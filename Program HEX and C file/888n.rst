                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module 888n
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _type_PARM_2
                                     12 	.globl _point_PARM_4
                                     13 	.globl _point_PARM_3
                                     14 	.globl _point_PARM_2
                                     15 	.globl _maxt_PARM_3
                                     16 	.globl _maxt_PARM_2
                                     17 	.globl _max_PARM_2
                                     18 	.globl _judgebit_PARM_2
                                     19 	.globl _flash_11_daa_1_164
                                     20 	.globl _table_3p
                                     21 	.globl _dat3
                                     22 	.globl _dat2
                                     23 	.globl _dat
                                     24 	.globl _table_id
                                     25 	.globl _table_cha
                                     26 	.globl _print
                                     27 	.globl _main
                                     28 	.globl _flash_11
                                     29 	.globl _flash_10
                                     30 	.globl _flash_9
                                     31 	.globl _flash_8
                                     32 	.globl _flash_7
                                     33 	.globl _flash_6
                                     34 	.globl _flash_5
                                     35 	.globl _flash_4
                                     36 	.globl _flash_3
                                     37 	.globl _flash_2
                                     38 	.globl _flash_1
                                     39 	.globl _transss
                                     40 	.globl _tranoutchar
                                     41 	.globl _trans
                                     42 	.globl _roll_3_xy
                                     43 	.globl _roll_apeak_xy
                                     44 	.globl _roll_apeak_yz
                                     45 	.globl _rolldisplay
                                     46 	.globl _boxtola
                                     47 	.globl _poke
                                     48 	.globl _box_apeak_xy
                                     49 	.globl _box
                                     50 	.globl _line
                                     51 	.globl _cirp
                                     52 	.globl _type
                                     53 	.globl _point
                                     54 	.globl _trailler
                                     55 	.globl _clear
                                     56 	.globl _maxt
                                     57 	.globl _max
                                     58 	.globl _abss
                                     59 	.globl _abs
                                     60 	.globl _judgebit
                                     61 	.globl _delay
                                     62 	.globl _delay5us
                                     63 	.globl _sinter
                                     64 	.globl _CCF0
                                     65 	.globl _CCF1
                                     66 	.globl _CR
                                     67 	.globl _CF
                                     68 	.globl _P5_3
                                     69 	.globl _P5_2
                                     70 	.globl _P5_1
                                     71 	.globl _P5_0
                                     72 	.globl _P4_7
                                     73 	.globl _P4_6
                                     74 	.globl _P4_5
                                     75 	.globl _P4_4
                                     76 	.globl _P4_3
                                     77 	.globl _P4_2
                                     78 	.globl _P4_1
                                     79 	.globl _P4_0
                                     80 	.globl _PADC
                                     81 	.globl _PLVD
                                     82 	.globl _PPCA
                                     83 	.globl _EADC
                                     84 	.globl _ELVD
                                     85 	.globl _CY
                                     86 	.globl _AC
                                     87 	.globl _F0
                                     88 	.globl _RS1
                                     89 	.globl _RS0
                                     90 	.globl _OV
                                     91 	.globl _F1
                                     92 	.globl _P
                                     93 	.globl _PS
                                     94 	.globl _PT1
                                     95 	.globl _PX1
                                     96 	.globl _PT0
                                     97 	.globl _PX0
                                     98 	.globl _RD
                                     99 	.globl _WR
                                    100 	.globl _T1
                                    101 	.globl _T0
                                    102 	.globl _INT1
                                    103 	.globl _INT0
                                    104 	.globl _TXD
                                    105 	.globl _RXD
                                    106 	.globl _P3_7
                                    107 	.globl _P3_6
                                    108 	.globl _P3_5
                                    109 	.globl _P3_4
                                    110 	.globl _P3_3
                                    111 	.globl _P3_2
                                    112 	.globl _P3_1
                                    113 	.globl _P3_0
                                    114 	.globl _EA
                                    115 	.globl _ES
                                    116 	.globl _ET1
                                    117 	.globl _EX1
                                    118 	.globl _ET0
                                    119 	.globl _EX0
                                    120 	.globl _P2_7
                                    121 	.globl _P2_6
                                    122 	.globl _P2_5
                                    123 	.globl _P2_4
                                    124 	.globl _P2_3
                                    125 	.globl _P2_2
                                    126 	.globl _P2_1
                                    127 	.globl _P2_0
                                    128 	.globl _SM0
                                    129 	.globl _SM1
                                    130 	.globl _SM2
                                    131 	.globl _REN
                                    132 	.globl _TB8
                                    133 	.globl _RB8
                                    134 	.globl _TI
                                    135 	.globl _RI
                                    136 	.globl _P1_7
                                    137 	.globl _P1_6
                                    138 	.globl _P1_5
                                    139 	.globl _P1_4
                                    140 	.globl _P1_3
                                    141 	.globl _P1_2
                                    142 	.globl _P1_1
                                    143 	.globl _P1_0
                                    144 	.globl _TF1
                                    145 	.globl _TR1
                                    146 	.globl _TF0
                                    147 	.globl _TR0
                                    148 	.globl _IE1
                                    149 	.globl _IT1
                                    150 	.globl _IE0
                                    151 	.globl _IT0
                                    152 	.globl _P0_7
                                    153 	.globl _P0_6
                                    154 	.globl _P0_5
                                    155 	.globl _P0_4
                                    156 	.globl _P0_3
                                    157 	.globl _P0_2
                                    158 	.globl _P0_1
                                    159 	.globl _P0_0
                                    160 	.globl _IAP_CONTR
                                    161 	.globl _IAP_TRIG
                                    162 	.globl _IAP_CMD
                                    163 	.globl _IAP_ADDRL
                                    164 	.globl _IAP_ADDRH
                                    165 	.globl _IAP_DATA
                                    166 	.globl _SPDAT
                                    167 	.globl _SPSTAT
                                    168 	.globl _SPCTL
                                    169 	.globl _ADC_RESL
                                    170 	.globl _ADC_RES
                                    171 	.globl _ADC_CONTR
                                    172 	.globl _P1ASF
                                    173 	.globl _PCA_PWM1
                                    174 	.globl _PCA_PWM0
                                    175 	.globl _CCAP1H
                                    176 	.globl _CCAP1L
                                    177 	.globl _CCAP0H
                                    178 	.globl _CCAP0L
                                    179 	.globl _CCAPM1
                                    180 	.globl _CCAPM0
                                    181 	.globl _CH
                                    182 	.globl _CL
                                    183 	.globl _CMOD
                                    184 	.globl _CCON
                                    185 	.globl _WDT_CONTR
                                    186 	.globl _BRT
                                    187 	.globl _S2BUF
                                    188 	.globl _S2CON
                                    189 	.globl _SADDR
                                    190 	.globl _SADEN
                                    191 	.globl _P5M1
                                    192 	.globl _P5M0
                                    193 	.globl _P4SW
                                    194 	.globl _P4M1
                                    195 	.globl _P4M0
                                    196 	.globl _P3M1
                                    197 	.globl _P3M0
                                    198 	.globl _P2M1
                                    199 	.globl _P2M0
                                    200 	.globl _P1M1
                                    201 	.globl _P1M0
                                    202 	.globl _P0M1
                                    203 	.globl _P0M0
                                    204 	.globl _P5
                                    205 	.globl _P4
                                    206 	.globl _IP2H
                                    207 	.globl _IP2
                                    208 	.globl _IPH
                                    209 	.globl _IE2
                                    210 	.globl _BUS_SPEED
                                    211 	.globl _CLK_DIV
                                    212 	.globl _WAKE_CLKO
                                    213 	.globl _AUXR1
                                    214 	.globl _AUXR
                                    215 	.globl _B
                                    216 	.globl _ACC
                                    217 	.globl _PSW
                                    218 	.globl _IP
                                    219 	.globl _P3
                                    220 	.globl _IE
                                    221 	.globl _P2
                                    222 	.globl _SBUF
                                    223 	.globl _SCON
                                    224 	.globl _P1
                                    225 	.globl _TH1
                                    226 	.globl _TH0
                                    227 	.globl _TL1
                                    228 	.globl _TL0
                                    229 	.globl _TMOD
                                    230 	.globl _TCON
                                    231 	.globl _PCON
                                    232 	.globl _DPH
                                    233 	.globl _DPL
                                    234 	.globl _SP
                                    235 	.globl _P0
                                    236 	.globl _display
                                    237 	.globl _tranoutchar_PARM_2
                                    238 	.globl _trans_PARM_2
                                    239 	.globl _roll_3_xy_PARM_2
                                    240 	.globl _roll_apeak_xy_PARM_2
                                    241 	.globl _roll_apeak_yz_PARM_2
                                    242 	.globl _boxtola_PARM_2
                                    243 	.globl _poke_PARM_3
                                    244 	.globl _poke_PARM_2
                                    245 	.globl _box_apeak_xy_PARM_8
                                    246 	.globl _box_apeak_xy_PARM_7
                                    247 	.globl _box_apeak_xy_PARM_6
                                    248 	.globl _box_apeak_xy_PARM_5
                                    249 	.globl _box_apeak_xy_PARM_4
                                    250 	.globl _box_apeak_xy_PARM_3
                                    251 	.globl _box_apeak_xy_PARM_2
                                    252 	.globl _box_PARM_8
                                    253 	.globl _box_PARM_7
                                    254 	.globl _box_PARM_6
                                    255 	.globl _box_PARM_5
                                    256 	.globl _box_PARM_4
                                    257 	.globl _box_PARM_3
                                    258 	.globl _box_PARM_2
                                    259 	.globl _line_PARM_7
                                    260 	.globl _line_PARM_6
                                    261 	.globl _line_PARM_5
                                    262 	.globl _line_PARM_4
                                    263 	.globl _line_PARM_3
                                    264 	.globl _line_PARM_2
                                    265 	.globl _cirp_PARM_3
                                    266 	.globl _cirp_PARM_2
                                    267 ;--------------------------------------------------------
                                    268 ; special function registers
                                    269 ;--------------------------------------------------------
                                    270 	.area RSEG    (ABS,DATA)
      000000                        271 	.org 0x0000
                           000080   272 _P0	=	0x0080
                           000081   273 _SP	=	0x0081
                           000082   274 _DPL	=	0x0082
                           000083   275 _DPH	=	0x0083
                           000087   276 _PCON	=	0x0087
                           000088   277 _TCON	=	0x0088
                           000089   278 _TMOD	=	0x0089
                           00008A   279 _TL0	=	0x008a
                           00008B   280 _TL1	=	0x008b
                           00008C   281 _TH0	=	0x008c
                           00008D   282 _TH1	=	0x008d
                           000090   283 _P1	=	0x0090
                           000098   284 _SCON	=	0x0098
                           000099   285 _SBUF	=	0x0099
                           0000A0   286 _P2	=	0x00a0
                           0000A8   287 _IE	=	0x00a8
                           0000B0   288 _P3	=	0x00b0
                           0000B8   289 _IP	=	0x00b8
                           0000D0   290 _PSW	=	0x00d0
                           0000E0   291 _ACC	=	0x00e0
                           0000F0   292 _B	=	0x00f0
                           00008E   293 _AUXR	=	0x008e
                           0000A2   294 _AUXR1	=	0x00a2
                           00008F   295 _WAKE_CLKO	=	0x008f
                           000097   296 _CLK_DIV	=	0x0097
                           0000A1   297 _BUS_SPEED	=	0x00a1
                           0000AF   298 _IE2	=	0x00af
                           0000B7   299 _IPH	=	0x00b7
                           0000B5   300 _IP2	=	0x00b5
                           0000B6   301 _IP2H	=	0x00b6
                           0000C0   302 _P4	=	0x00c0
                           0000C8   303 _P5	=	0x00c8
                           000094   304 _P0M0	=	0x0094
                           000093   305 _P0M1	=	0x0093
                           000092   306 _P1M0	=	0x0092
                           000091   307 _P1M1	=	0x0091
                           000096   308 _P2M0	=	0x0096
                           000095   309 _P2M1	=	0x0095
                           0000B2   310 _P3M0	=	0x00b2
                           0000B1   311 _P3M1	=	0x00b1
                           0000B4   312 _P4M0	=	0x00b4
                           0000B3   313 _P4M1	=	0x00b3
                           0000BB   314 _P4SW	=	0x00bb
                           0000CA   315 _P5M0	=	0x00ca
                           0000C9   316 _P5M1	=	0x00c9
                           0000B9   317 _SADEN	=	0x00b9
                           0000A9   318 _SADDR	=	0x00a9
                           00009A   319 _S2CON	=	0x009a
                           00009B   320 _S2BUF	=	0x009b
                           00009C   321 _BRT	=	0x009c
                           0000C1   322 _WDT_CONTR	=	0x00c1
                           0000D8   323 _CCON	=	0x00d8
                           0000D9   324 _CMOD	=	0x00d9
                           0000E9   325 _CL	=	0x00e9
                           0000F9   326 _CH	=	0x00f9
                           0000DA   327 _CCAPM0	=	0x00da
                           0000DB   328 _CCAPM1	=	0x00db
                           0000EA   329 _CCAP0L	=	0x00ea
                           0000FA   330 _CCAP0H	=	0x00fa
                           0000EB   331 _CCAP1L	=	0x00eb
                           0000FB   332 _CCAP1H	=	0x00fb
                           0000F2   333 _PCA_PWM0	=	0x00f2
                           0000F3   334 _PCA_PWM1	=	0x00f3
                           00009D   335 _P1ASF	=	0x009d
                           0000BC   336 _ADC_CONTR	=	0x00bc
                           0000BD   337 _ADC_RES	=	0x00bd
                           0000BE   338 _ADC_RESL	=	0x00be
                           0000CE   339 _SPCTL	=	0x00ce
                           0000CD   340 _SPSTAT	=	0x00cd
                           0000CF   341 _SPDAT	=	0x00cf
                           0000C2   342 _IAP_DATA	=	0x00c2
                           0000C3   343 _IAP_ADDRH	=	0x00c3
                           0000C4   344 _IAP_ADDRL	=	0x00c4
                           0000C5   345 _IAP_CMD	=	0x00c5
                           0000C6   346 _IAP_TRIG	=	0x00c6
                           0000C7   347 _IAP_CONTR	=	0x00c7
                                    348 ;--------------------------------------------------------
                                    349 ; special function bits
                                    350 ;--------------------------------------------------------
                                    351 	.area RSEG    (ABS,DATA)
      000000                        352 	.org 0x0000
                           000080   353 _P0_0	=	0x0080
                           000081   354 _P0_1	=	0x0081
                           000082   355 _P0_2	=	0x0082
                           000083   356 _P0_3	=	0x0083
                           000084   357 _P0_4	=	0x0084
                           000085   358 _P0_5	=	0x0085
                           000086   359 _P0_6	=	0x0086
                           000087   360 _P0_7	=	0x0087
                           000088   361 _IT0	=	0x0088
                           000089   362 _IE0	=	0x0089
                           00008A   363 _IT1	=	0x008a
                           00008B   364 _IE1	=	0x008b
                           00008C   365 _TR0	=	0x008c
                           00008D   366 _TF0	=	0x008d
                           00008E   367 _TR1	=	0x008e
                           00008F   368 _TF1	=	0x008f
                           000090   369 _P1_0	=	0x0090
                           000091   370 _P1_1	=	0x0091
                           000092   371 _P1_2	=	0x0092
                           000093   372 _P1_3	=	0x0093
                           000094   373 _P1_4	=	0x0094
                           000095   374 _P1_5	=	0x0095
                           000096   375 _P1_6	=	0x0096
                           000097   376 _P1_7	=	0x0097
                           000098   377 _RI	=	0x0098
                           000099   378 _TI	=	0x0099
                           00009A   379 _RB8	=	0x009a
                           00009B   380 _TB8	=	0x009b
                           00009C   381 _REN	=	0x009c
                           00009D   382 _SM2	=	0x009d
                           00009E   383 _SM1	=	0x009e
                           00009F   384 _SM0	=	0x009f
                           0000A0   385 _P2_0	=	0x00a0
                           0000A1   386 _P2_1	=	0x00a1
                           0000A2   387 _P2_2	=	0x00a2
                           0000A3   388 _P2_3	=	0x00a3
                           0000A4   389 _P2_4	=	0x00a4
                           0000A5   390 _P2_5	=	0x00a5
                           0000A6   391 _P2_6	=	0x00a6
                           0000A7   392 _P2_7	=	0x00a7
                           0000A8   393 _EX0	=	0x00a8
                           0000A9   394 _ET0	=	0x00a9
                           0000AA   395 _EX1	=	0x00aa
                           0000AB   396 _ET1	=	0x00ab
                           0000AC   397 _ES	=	0x00ac
                           0000AF   398 _EA	=	0x00af
                           0000B0   399 _P3_0	=	0x00b0
                           0000B1   400 _P3_1	=	0x00b1
                           0000B2   401 _P3_2	=	0x00b2
                           0000B3   402 _P3_3	=	0x00b3
                           0000B4   403 _P3_4	=	0x00b4
                           0000B5   404 _P3_5	=	0x00b5
                           0000B6   405 _P3_6	=	0x00b6
                           0000B7   406 _P3_7	=	0x00b7
                           0000B0   407 _RXD	=	0x00b0
                           0000B1   408 _TXD	=	0x00b1
                           0000B2   409 _INT0	=	0x00b2
                           0000B3   410 _INT1	=	0x00b3
                           0000B4   411 _T0	=	0x00b4
                           0000B5   412 _T1	=	0x00b5
                           0000B6   413 _WR	=	0x00b6
                           0000B7   414 _RD	=	0x00b7
                           0000B8   415 _PX0	=	0x00b8
                           0000B9   416 _PT0	=	0x00b9
                           0000BA   417 _PX1	=	0x00ba
                           0000BB   418 _PT1	=	0x00bb
                           0000BC   419 _PS	=	0x00bc
                           0000D0   420 _P	=	0x00d0
                           0000D1   421 _F1	=	0x00d1
                           0000D2   422 _OV	=	0x00d2
                           0000D3   423 _RS0	=	0x00d3
                           0000D4   424 _RS1	=	0x00d4
                           0000D5   425 _F0	=	0x00d5
                           0000D6   426 _AC	=	0x00d6
                           0000D7   427 _CY	=	0x00d7
                           0000AE   428 _ELVD	=	0x00ae
                           0000AD   429 _EADC	=	0x00ad
                           0000BF   430 _PPCA	=	0x00bf
                           0000BE   431 _PLVD	=	0x00be
                           0000BD   432 _PADC	=	0x00bd
                           0000C0   433 _P4_0	=	0x00c0
                           0000C1   434 _P4_1	=	0x00c1
                           0000C2   435 _P4_2	=	0x00c2
                           0000C3   436 _P4_3	=	0x00c3
                           0000C4   437 _P4_4	=	0x00c4
                           0000C5   438 _P4_5	=	0x00c5
                           0000C6   439 _P4_6	=	0x00c6
                           0000C7   440 _P4_7	=	0x00c7
                           0000C8   441 _P5_0	=	0x00c8
                           0000C9   442 _P5_1	=	0x00c9
                           0000CA   443 _P5_2	=	0x00ca
                           0000CB   444 _P5_3	=	0x00cb
                           0000DF   445 _CF	=	0x00df
                           0000DE   446 _CR	=	0x00de
                           0000D9   447 _CCF1	=	0x00d9
                           0000D8   448 _CCF0	=	0x00d8
                                    449 ;--------------------------------------------------------
                                    450 ; overlayable register banks
                                    451 ;--------------------------------------------------------
                                    452 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        453 	.ds 8
                                    454 ;--------------------------------------------------------
                                    455 ; overlayable bit register bank
                                    456 ;--------------------------------------------------------
                                    457 	.area BIT_BANK	(REL,OVR,DATA)
      000021                        458 bits:
      000021                        459 	.ds 1
                           008000   460 	b0 = bits[0]
                           008100   461 	b1 = bits[1]
                           008200   462 	b2 = bits[2]
                           008300   463 	b3 = bits[3]
                           008400   464 	b4 = bits[4]
                           008500   465 	b5 = bits[5]
                           008600   466 	b6 = bits[6]
                           008700   467 	b7 = bits[7]
                                    468 ;--------------------------------------------------------
                                    469 ; internal ram data
                                    470 ;--------------------------------------------------------
                                    471 	.area DSEG    (DATA)
      000022                        472 _trailler_speed_1_20:
      000022                        473 	.ds 2
      000024                        474 _cirp_PARM_2:
      000024                        475 	.ds 1
      000025                        476 _cirp_PARM_3:
      000025                        477 	.ds 1
      000026                        478 _line_PARM_2:
      000026                        479 	.ds 1
      000027                        480 _line_PARM_3:
      000027                        481 	.ds 1
      000028                        482 _line_PARM_4:
      000028                        483 	.ds 1
      000029                        484 _line_PARM_5:
      000029                        485 	.ds 1
      00002A                        486 _line_PARM_6:
      00002A                        487 	.ds 1
      00002B                        488 _line_PARM_7:
      00002B                        489 	.ds 1
      00002C                        490 _line_t_1_32:
      00002C                        491 	.ds 1
      00002D                        492 _line_b1_1_32:
      00002D                        493 	.ds 1
      00002E                        494 _line_c1_1_32:
      00002E                        495 	.ds 1
      00002F                        496 _box_PARM_2:
      00002F                        497 	.ds 1
      000030                        498 _box_PARM_3:
      000030                        499 	.ds 1
      000031                        500 _box_PARM_4:
      000031                        501 	.ds 1
      000032                        502 _box_PARM_5:
      000032                        503 	.ds 1
      000033                        504 _box_PARM_6:
      000033                        505 	.ds 1
      000034                        506 _box_PARM_7:
      000034                        507 	.ds 1
      000035                        508 _box_PARM_8:
      000035                        509 	.ds 1
      000036                        510 _box_x1_1_34:
      000036                        511 	.ds 1
      000037                        512 _box_j_1_35:
      000037                        513 	.ds 1
      000038                        514 _box_t_1_35:
      000038                        515 	.ds 1
      000039                        516 _box_apeak_xy_PARM_2:
      000039                        517 	.ds 1
      00003A                        518 _box_apeak_xy_PARM_3:
      00003A                        519 	.ds 1
      00003B                        520 _box_apeak_xy_PARM_4:
      00003B                        521 	.ds 1
      00003C                        522 _box_apeak_xy_PARM_5:
      00003C                        523 	.ds 1
      00003D                        524 _box_apeak_xy_PARM_6:
      00003D                        525 	.ds 1
      00003E                        526 _box_apeak_xy_PARM_7:
      00003E                        527 	.ds 1
      00003F                        528 _box_apeak_xy_PARM_8:
      00003F                        529 	.ds 1
      000040                        530 _poke_PARM_2:
      000040                        531 	.ds 1
      000041                        532 _poke_PARM_3:
      000041                        533 	.ds 1
      000042                        534 _boxtola_PARM_2:
      000042                        535 	.ds 1
      000043                        536 _roll_apeak_yz_PARM_2:
      000043                        537 	.ds 2
      000045                        538 _roll_apeak_xy_PARM_2:
      000045                        539 	.ds 2
      000047                        540 _roll_3_xy_PARM_2:
      000047                        541 	.ds 2
      000049                        542 _trans_PARM_2:
      000049                        543 	.ds 2
      00004B                        544 _tranoutchar_PARM_2:
      00004B                        545 	.ds 2
      00004D                        546 _tranoutchar_i_1_85:
      00004D                        547 	.ds 1
      00004E                        548 _tranoutchar_k_1_85:
      00004E                        549 	.ds 1
      00004F                        550 _tranoutchar_a_1_85:
      00004F                        551 	.ds 1
      000050                        552 _tranoutchar_i2_1_85:
      000050                        553 	.ds 1
      000051                        554 _tranoutchar_sloc0_1_0:
      000051                        555 	.ds 2
      000053                        556 _tranoutchar_sloc1_1_0:
      000053                        557 	.ds 2
      000055                        558 _flash_4_an_1_99:
      000055                        559 	.ds 8
      00005D                        560 _flash_5_an_1_106:
      00005D                        561 	.ds 4
      000061                        562 _flash_6_i_1_123:
      000061                        563 	.ds 1
      000062                        564 _flash_6_j_1_123:
      000062                        565 	.ds 1
      000063                        566 _flash_6_k_1_123:
      000063                        567 	.ds 1
      000064                        568 _flash_9_i_1_134:
      000064                        569 	.ds 1
      000065                        570 _flash_9_j_1_134:
      000065                        571 	.ds 1
      000066                        572 _flash_9_an_1_134:
      000066                        573 	.ds 8
      00006E                        574 _flash_9_y_1_134:
      00006E                        575 	.ds 1
      00006F                        576 _flash_9_sloc0_1_0:
      00006F                        577 	.ds 2
      000071                        578 _flash_9_sloc1_1_0:
      000071                        579 	.ds 2
      000073                        580 _flash_9_sloc2_1_0:
      000073                        581 	.ds 1
      000074                        582 _flash_10_i_1_153:
      000074                        583 	.ds 1
      000075                        584 _flash_10_an_1_153:
      000075                        585 	.ds 4
      000079                        586 _print_layer_1_174:
      000079                        587 	.ds 1
                                    588 ;--------------------------------------------------------
                                    589 ; overlayable items in internal ram 
                                    590 ;--------------------------------------------------------
                                    591 	.area	OSEG    (OVR,DATA)
                                    592 	.area	OSEG    (OVR,DATA)
      000008                        593 _judgebit_PARM_2:
      000008                        594 	.ds 1
                                    595 	.area	OSEG    (OVR,DATA)
                                    596 	.area	OSEG    (OVR,DATA)
                                    597 	.area	OSEG    (OVR,DATA)
      000008                        598 _max_PARM_2:
      000008                        599 	.ds 3
                                    600 	.area	OSEG    (OVR,DATA)
      000008                        601 _maxt_PARM_2:
      000008                        602 	.ds 1
      000009                        603 _maxt_PARM_3:
      000009                        604 	.ds 1
                                    605 	.area	OSEG    (OVR,DATA)
                                    606 	.area	OSEG    (OVR,DATA)
      000008                        607 _point_PARM_2:
      000008                        608 	.ds 1
      000009                        609 _point_PARM_3:
      000009                        610 	.ds 1
      00000A                        611 _point_PARM_4:
      00000A                        612 	.ds 1
                                    613 	.area	OSEG    (OVR,DATA)
      000008                        614 _type_PARM_2:
      000008                        615 	.ds 1
                                    616 	.area	OSEG    (OVR,DATA)
                                    617 ;--------------------------------------------------------
                                    618 ; Stack segment in internal ram 
                                    619 ;--------------------------------------------------------
                                    620 	.area	SSEG
      00007A                        621 __start__stack:
      00007A                        622 	.ds	1
                                    623 
                                    624 ;--------------------------------------------------------
                                    625 ; indirectly addressable internal ram data
                                    626 ;--------------------------------------------------------
                                    627 	.area ISEG    (DATA)
                                    628 ;--------------------------------------------------------
                                    629 ; absolute internal ram data
                                    630 ;--------------------------------------------------------
                                    631 	.area IABS    (ABS,DATA)
                                    632 	.area IABS    (ABS,DATA)
                                    633 ;--------------------------------------------------------
                                    634 ; bit data
                                    635 ;--------------------------------------------------------
                                    636 	.area BSEG    (BIT)
      000000                        637 _boxtola_sloc0_1_0:
      000000                        638 	.ds 1
      000001                        639 _flash_4_sloc0_1_0:
      000001                        640 	.ds 1
                                    641 ;--------------------------------------------------------
                                    642 ; paged external ram data
                                    643 ;--------------------------------------------------------
                                    644 	.area PSEG    (PAG,XDATA)
                                    645 ;--------------------------------------------------------
                                    646 ; external ram data
                                    647 ;--------------------------------------------------------
                                    648 	.area XSEG    (XDATA)
      000001                        649 _display::
      000001                        650 	.ds 64
                                    651 ;--------------------------------------------------------
                                    652 ; absolute external ram data
                                    653 ;--------------------------------------------------------
                                    654 	.area XABS    (ABS,XDATA)
                                    655 ;--------------------------------------------------------
                                    656 ; external initialized ram data
                                    657 ;--------------------------------------------------------
                                    658 	.area XISEG   (XDATA)
                                    659 	.area HOME    (CODE)
                                    660 	.area GSINIT0 (CODE)
                                    661 	.area GSINIT1 (CODE)
                                    662 	.area GSINIT2 (CODE)
                                    663 	.area GSINIT3 (CODE)
                                    664 	.area GSINIT4 (CODE)
                                    665 	.area GSINIT5 (CODE)
                                    666 	.area GSINIT  (CODE)
                                    667 	.area GSFINAL (CODE)
                                    668 	.area CSEG    (CODE)
                                    669 ;--------------------------------------------------------
                                    670 ; interrupt vector 
                                    671 ;--------------------------------------------------------
                                    672 	.area HOME    (CODE)
      000000                        673 __interrupt_vect:
      000000 02 00 11         [24]  674 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  675 	reti
      000004                        676 	.ds	7
      00000B 02 28 9A         [24]  677 	ljmp	_print
                                    678 ;--------------------------------------------------------
                                    679 ; global & static initialisations
                                    680 ;--------------------------------------------------------
                                    681 	.area HOME    (CODE)
                                    682 	.area GSINIT  (CODE)
                                    683 	.area GSFINAL (CODE)
                                    684 	.area GSINIT  (CODE)
                                    685 	.globl __sdcc_gsinit_startup
                                    686 	.globl __sdcc_program_startup
                                    687 	.globl __start__stack
                                    688 	.globl __mcs51_genXINIT
                                    689 	.globl __mcs51_genXRAMCLEAR
                                    690 	.globl __mcs51_genRAMCLEAR
                                    691 ;------------------------------------------------------------
                                    692 ;Allocation info for local variables in function 'print'
                                    693 ;------------------------------------------------------------
                                    694 ;layer                     Allocated with name '_print_layer_1_174'
                                    695 ;i                         Allocated to registers r7 
                                    696 ;------------------------------------------------------------
                                    697 ;	888n.c:1100: static uchar layer=0;
      00006A 75 79 00         [24]  698 	mov	_print_layer_1_174,#0x00
                                    699 	.area GSFINAL (CODE)
      00006D 02 00 0E         [24]  700 	ljmp	__sdcc_program_startup
                                    701 ;--------------------------------------------------------
                                    702 ; Home
                                    703 ;--------------------------------------------------------
                                    704 	.area HOME    (CODE)
                                    705 	.area HOME    (CODE)
      00000E                        706 __sdcc_program_startup:
      00000E 02 28 4D         [24]  707 	ljmp	_main
                                    708 ;	return from main will return to caller
                                    709 ;--------------------------------------------------------
                                    710 ; code
                                    711 ;--------------------------------------------------------
                                    712 	.area CSEG    (CODE)
                                    713 ;------------------------------------------------------------
                                    714 ;Allocation info for local variables in function 'sinter'
                                    715 ;------------------------------------------------------------
                                    716 ;	888n.c:58: void sinter()
                                    717 ;	-----------------------------------------
                                    718 ;	 function sinter
                                    719 ;	-----------------------------------------
      000070                        720 _sinter:
                           000007   721 	ar7 = 0x07
                           000006   722 	ar6 = 0x06
                           000005   723 	ar5 = 0x05
                           000004   724 	ar4 = 0x04
                           000003   725 	ar3 = 0x03
                           000002   726 	ar2 = 0x02
                           000001   727 	ar1 = 0x01
                           000000   728 	ar0 = 0x00
                                    729 ;	888n.c:60: IE=0x82;
      000070 75 A8 82         [24]  730 	mov	_IE,#0x82
                                    731 ;	888n.c:61: TCON=0x01;
      000073 75 88 01         [24]  732 	mov	_TCON,#0x01
                                    733 ;	888n.c:62: TH0=0xc0;
      000076 75 8C C0         [24]  734 	mov	_TH0,#0xc0
                                    735 ;	888n.c:63: TL0=0;
      000079 75 8A 00         [24]  736 	mov	_TL0,#0x00
                                    737 ;	888n.c:64: TR0=1;
      00007C D2 8C            [12]  738 	setb	_TR0
      00007E 22               [24]  739 	ret
                                    740 ;------------------------------------------------------------
                                    741 ;Allocation info for local variables in function 'delay5us'
                                    742 ;------------------------------------------------------------
                                    743 ;a                         Allocated to registers r6 
                                    744 ;b                         Allocated to registers r7 
                                    745 ;------------------------------------------------------------
                                    746 ;	888n.c:67: void delay5us(void)   // -0.026765046296us STC 1T 22.1184Mhz
                                    747 ;	-----------------------------------------
                                    748 ;	 function delay5us
                                    749 ;	-----------------------------------------
      00007F                        750 _delay5us:
                                    751 ;	888n.c:71: for(b=7;b>0;b--)
      00007F 7F 07            [12]  752 	mov	r7,#0x07
      000081                        753 00105$:
                                    754 ;	888n.c:72: for(a=2;a>0;a--);
      000081 7E 02            [12]  755 	mov	r6,#0x02
      000083                        756 00104$:
      000083 EE               [12]  757 	mov	a,r6
      000084 14               [12]  758 	dec	a
      000085 FD               [12]  759 	mov	r5,a
      000086 FE               [12]  760 	mov	r6,a
      000087 70 FA            [24]  761 	jnz	00104$
                                    762 ;	888n.c:71: for(b=7;b>0;b--)
      000089 EF               [12]  763 	mov	a,r7
      00008A 14               [12]  764 	dec	a
      00008B FE               [12]  765 	mov	r6,a
      00008C FF               [12]  766 	mov	r7,a
      00008D 70 F2            [24]  767 	jnz	00105$
      00008F 22               [24]  768 	ret
                                    769 ;------------------------------------------------------------
                                    770 ;Allocation info for local variables in function 'delay'
                                    771 ;------------------------------------------------------------
                                    772 ;i                         Allocated to registers 
                                    773 ;------------------------------------------------------------
                                    774 ;	888n.c:75: void delay(uint i)
                                    775 ;	-----------------------------------------
                                    776 ;	 function delay
                                    777 ;	-----------------------------------------
      000090                        778 _delay:
      000090 AE 82            [24]  779 	mov	r6,dpl
      000092 AF 83            [24]  780 	mov	r7,dph
                                    781 ;	888n.c:78: while (i--) {
      000094                        782 00101$:
      000094 8E 04            [24]  783 	mov	ar4,r6
      000096 8F 05            [24]  784 	mov	ar5,r7
      000098 1E               [12]  785 	dec	r6
      000099 BE FF 01         [24]  786 	cjne	r6,#0xff,00113$
      00009C 1F               [12]  787 	dec	r7
      00009D                        788 00113$:
      00009D EC               [12]  789 	mov	a,r4
      00009E 4D               [12]  790 	orl	a,r5
      00009F 60 0D            [24]  791 	jz	00104$
                                    792 ;	888n.c:79: delay5us();
      0000A1 C0 07            [24]  793 	push	ar7
      0000A3 C0 06            [24]  794 	push	ar6
      0000A5 12 00 7F         [24]  795 	lcall	_delay5us
      0000A8 D0 06            [24]  796 	pop	ar6
      0000AA D0 07            [24]  797 	pop	ar7
      0000AC 80 E6            [24]  798 	sjmp	00101$
      0000AE                        799 00104$:
      0000AE 22               [24]  800 	ret
                                    801 ;------------------------------------------------------------
                                    802 ;Allocation info for local variables in function 'judgebit'
                                    803 ;------------------------------------------------------------
                                    804 ;b                         Allocated with name '_judgebit_PARM_2'
                                    805 ;num                       Allocated to registers r7 
                                    806 ;------------------------------------------------------------
                                    807 ;	888n.c:84: uchar judgebit(uchar num, uchar b)
                                    808 ;	-----------------------------------------
                                    809 ;	 function judgebit
                                    810 ;	-----------------------------------------
      0000AF                        811 _judgebit:
      0000AF AF 82            [24]  812 	mov	r7,dpl
                                    813 ;	888n.c:86: num = num & (1<<b);      
      0000B1 85 08 F0         [24]  814 	mov	b,_judgebit_PARM_2
      0000B4 05 F0            [12]  815 	inc	b
      0000B6 74 01            [12]  816 	mov	a,#0x01
      0000B8 80 02            [24]  817 	sjmp	00110$
      0000BA                        818 00108$:
      0000BA 25 E0            [12]  819 	add	a,acc
      0000BC                        820 00110$:
      0000BC D5 F0 FB         [24]  821 	djnz	b,00108$
      0000BF FE               [12]  822 	mov	r6,a
      0000C0 5F               [12]  823 	anl	a,r7
                                    824 ;	888n.c:87: return num ? 1 : 0;
      0000C1 60 04            [24]  825 	jz	00103$
      0000C3 7F 01            [12]  826 	mov	r7,#0x01
      0000C5 80 02            [24]  827 	sjmp	00104$
      0000C7                        828 00103$:
      0000C7 7F 00            [12]  829 	mov	r7,#0x00
      0000C9                        830 00104$:
      0000C9 8F 82            [24]  831 	mov	dpl,r7
      0000CB 22               [24]  832 	ret
                                    833 ;------------------------------------------------------------
                                    834 ;Allocation info for local variables in function 'abs'
                                    835 ;------------------------------------------------------------
                                    836 ;a                         Allocated to registers r7 
                                    837 ;b                         Allocated to registers r6 
                                    838 ;------------------------------------------------------------
                                    839 ;	888n.c:92: uchar abs(uchar a)
                                    840 ;	-----------------------------------------
                                    841 ;	 function abs
                                    842 ;	-----------------------------------------
      0000CC                        843 _abs:
      0000CC AF 82            [24]  844 	mov	r7,dpl
                                    845 ;	888n.c:96: b=a/10;
      0000CE 75 F0 0A         [24]  846 	mov	b,#0x0a
      0000D1 EF               [12]  847 	mov	a,r7
      0000D2 84               [48]  848 	div	ab
                                    849 ;	888n.c:97: a=a-b*10;
      0000D3 FE               [12]  850 	mov	r6,a
      0000D4 75 F0 0A         [24]  851 	mov	b,#0x0a
      0000D7 A4               [48]  852 	mul	ab
      0000D8 D3               [12]  853 	setb	c
      0000D9 9F               [12]  854 	subb	a,r7
      0000DA F4               [12]  855 	cpl	a
      0000DB FF               [12]  856 	mov	r7,a
                                    857 ;	888n.c:99: if (a >= 5) b++;
      0000DC BF 05 00         [24]  858 	cjne	r7,#0x05,00108$
      0000DF                        859 00108$:
      0000DF 40 01            [24]  860 	jc	00102$
      0000E1 0E               [12]  861 	inc	r6
      0000E2                        862 00102$:
                                    863 ;	888n.c:101: return b;
      0000E2 8E 82            [24]  864 	mov	dpl,r6
      0000E4 22               [24]  865 	ret
                                    866 ;------------------------------------------------------------
                                    867 ;Allocation info for local variables in function 'abss'
                                    868 ;------------------------------------------------------------
                                    869 ;a                         Allocated to registers r7 
                                    870 ;------------------------------------------------------------
                                    871 ;	888n.c:105: uchar abss(char a)
                                    872 ;	-----------------------------------------
                                    873 ;	 function abss
                                    874 ;	-----------------------------------------
      0000E5                        875 _abss:
                                    876 ;	888n.c:107: if (a < 0) a=-a;
      0000E5 E5 82            [12]  877 	mov	a,dpl
      0000E7 FF               [12]  878 	mov	r7,a
      0000E8 30 E7 04         [24]  879 	jnb	acc.7,00102$
      0000EB C3               [12]  880 	clr	c
      0000EC E4               [12]  881 	clr	a
      0000ED 9F               [12]  882 	subb	a,r7
      0000EE FF               [12]  883 	mov	r7,a
      0000EF                        884 00102$:
                                    885 ;	888n.c:108: return a;
      0000EF 8F 82            [24]  886 	mov	dpl,r7
      0000F1 22               [24]  887 	ret
                                    888 ;------------------------------------------------------------
                                    889 ;Allocation info for local variables in function 'max'
                                    890 ;------------------------------------------------------------
                                    891 ;b                         Allocated with name '_max_PARM_2'
                                    892 ;a                         Allocated to registers r5 r6 r7 
                                    893 ;t                         Allocated to registers 
                                    894 ;------------------------------------------------------------
                                    895 ;	888n.c:113: void max(uchar *a, uchar *b)
                                    896 ;	-----------------------------------------
                                    897 ;	 function max
                                    898 ;	-----------------------------------------
      0000F2                        899 _max:
                                    900 ;	888n.c:117: if ((*a) > (*b)) {
      0000F2 AD 82            [24]  901 	mov	r5,dpl
      0000F4 AE 83            [24]  902 	mov	r6,dph
      0000F6 AF F0            [24]  903 	mov	r7,b
      0000F8 12 29 D1         [24]  904 	lcall	__gptrget
      0000FB FC               [12]  905 	mov	r4,a
      0000FC A9 08            [24]  906 	mov	r1,_max_PARM_2
      0000FE AA 09            [24]  907 	mov	r2,(_max_PARM_2 + 1)
      000100 AB 0A            [24]  908 	mov	r3,(_max_PARM_2 + 2)
      000102 89 82            [24]  909 	mov	dpl,r1
      000104 8A 83            [24]  910 	mov	dph,r2
      000106 8B F0            [24]  911 	mov	b,r3
      000108 12 29 D1         [24]  912 	lcall	__gptrget
      00010B F8               [12]  913 	mov	r0,a
      00010C C3               [12]  914 	clr	c
      00010D 9C               [12]  915 	subb	a,r4
      00010E 50 14            [24]  916 	jnc	00103$
                                    917 ;	888n.c:119: (*a) = (*b);
      000110 8D 82            [24]  918 	mov	dpl,r5
      000112 8E 83            [24]  919 	mov	dph,r6
      000114 8F F0            [24]  920 	mov	b,r7
      000116 E8               [12]  921 	mov	a,r0
      000117 12 29 40         [24]  922 	lcall	__gptrput
                                    923 ;	888n.c:120: (*b) = t;   
      00011A 89 82            [24]  924 	mov	dpl,r1
      00011C 8A 83            [24]  925 	mov	dph,r2
      00011E 8B F0            [24]  926 	mov	b,r3
      000120 EC               [12]  927 	mov	a,r4
      000121 02 29 40         [24]  928 	ljmp	__gptrput
      000124                        929 00103$:
      000124 22               [24]  930 	ret
                                    931 ;------------------------------------------------------------
                                    932 ;Allocation info for local variables in function 'maxt'
                                    933 ;------------------------------------------------------------
                                    934 ;b                         Allocated with name '_maxt_PARM_2'
                                    935 ;c                         Allocated with name '_maxt_PARM_3'
                                    936 ;a                         Allocated to registers r7 
                                    937 ;------------------------------------------------------------
                                    938 ;	888n.c:125: uchar maxt(uchar a, uchar b, uchar c)
                                    939 ;	-----------------------------------------
                                    940 ;	 function maxt
                                    941 ;	-----------------------------------------
      000125                        942 _maxt:
      000125 AF 82            [24]  943 	mov	r7,dpl
                                    944 ;	888n.c:127: if (a < b) a = b;
      000127 C3               [12]  945 	clr	c
      000128 EF               [12]  946 	mov	a,r7
      000129 95 08            [12]  947 	subb	a,_maxt_PARM_2
      00012B 50 02            [24]  948 	jnc	00102$
      00012D AF 08            [24]  949 	mov	r7,_maxt_PARM_2
      00012F                        950 00102$:
                                    951 ;	888n.c:128: if (a < c) a = c;
      00012F C3               [12]  952 	clr	c
      000130 EF               [12]  953 	mov	a,r7
      000131 95 09            [12]  954 	subb	a,_maxt_PARM_3
      000133 50 02            [24]  955 	jnc	00104$
      000135 AF 09            [24]  956 	mov	r7,_maxt_PARM_3
      000137                        957 00104$:
                                    958 ;	888n.c:130: return a;
      000137 8F 82            [24]  959 	mov	dpl,r7
      000139 22               [24]  960 	ret
                                    961 ;------------------------------------------------------------
                                    962 ;Allocation info for local variables in function 'clear'
                                    963 ;------------------------------------------------------------
                                    964 ;le                        Allocated to registers r7 
                                    965 ;i                         Allocated to registers r3 
                                    966 ;j                         Allocated to registers r6 
                                    967 ;------------------------------------------------------------
                                    968 ;	888n.c:133: void clear(char le)
                                    969 ;	-----------------------------------------
                                    970 ;	 function clear
                                    971 ;	-----------------------------------------
      00013A                        972 _clear:
      00013A AF 82            [24]  973 	mov	r7,dpl
                                    974 ;	888n.c:137: for (j=0; j<8; j++) for (i=0; i<8; i++) display[j][i] = le;
      00013C 7E 00            [12]  975 	mov	r6,#0x00
      00013E                        976 00109$:
      00013E EE               [12]  977 	mov	a,r6
      00013F 75 F0 08         [24]  978 	mov	b,#0x08
      000142 A4               [48]  979 	mul	ab
      000143 FC               [12]  980 	mov	r4,a
      000144 AD F0            [24]  981 	mov	r5,b
      000146 7B 00            [12]  982 	mov	r3,#0x00
      000148                        983 00103$:
      000148 EC               [12]  984 	mov	a,r4
      000149 24 01            [12]  985 	add	a,#_display
      00014B F9               [12]  986 	mov	r1,a
      00014C ED               [12]  987 	mov	a,r5
      00014D 34 00            [12]  988 	addc	a,#(_display >> 8)
      00014F FA               [12]  989 	mov	r2,a
      000150 EB               [12]  990 	mov	a,r3
      000151 29               [12]  991 	add	a,r1
      000152 F5 82            [12]  992 	mov	dpl,a
      000154 E4               [12]  993 	clr	a
      000155 3A               [12]  994 	addc	a,r2
      000156 F5 83            [12]  995 	mov	dph,a
      000158 EF               [12]  996 	mov	a,r7
      000159 F0               [24]  997 	movx	@dptr,a
      00015A 0B               [12]  998 	inc	r3
      00015B BB 08 00         [24]  999 	cjne	r3,#0x08,00120$
      00015E                       1000 00120$:
      00015E 40 E8            [24] 1001 	jc	00103$
      000160 0E               [12] 1002 	inc	r6
      000161 BE 08 00         [24] 1003 	cjne	r6,#0x08,00122$
      000164                       1004 00122$:
      000164 40 D8            [24] 1005 	jc	00109$
      000166 22               [24] 1006 	ret
                                   1007 ;------------------------------------------------------------
                                   1008 ;Allocation info for local variables in function 'trailler'
                                   1009 ;------------------------------------------------------------
                                   1010 ;speed                     Allocated with name '_trailler_speed_1_20'
                                   1011 ;i                         Allocated to registers r5 
                                   1012 ;j                         Allocated to registers r3 
                                   1013 ;------------------------------------------------------------
                                   1014 ;	888n.c:140: void trailler(uint speed)
                                   1015 ;	-----------------------------------------
                                   1016 ;	 function trailler
                                   1017 ;	-----------------------------------------
      000167                       1018 _trailler:
      000167 85 82 22         [24] 1019 	mov	_trailler_speed_1_20,dpl
      00016A 85 83 23         [24] 1020 	mov	(_trailler_speed_1_20 + 1),dph
                                   1021 ;	888n.c:144: for (i=6; i>=-3; i--) {
      00016D 7D 06            [12] 1022 	mov	r5,#0x06
      00016F                       1023 00112$:
                                   1024 ;	888n.c:145: if (i >= 0) {
      00016F ED               [12] 1025 	mov	a,r5
      000170 20 E7 50         [24] 1026 	jb	acc.7,00103$
                                   1027 ;	888n.c:146: for (j=0;j<8;j++) display[j][i] = display[j][i+1];
      000173 ED               [12] 1028 	mov	a,r5
      000174 04               [12] 1029 	inc	a
      000175 FC               [12] 1030 	mov	r4,a
      000176 7B 00            [12] 1031 	mov	r3,#0x00
      000178                       1032 00108$:
      000178 C2 D5            [12] 1033 	clr	F0
      00017A 75 F0 08         [24] 1034 	mov	b,#0x08
      00017D EB               [12] 1035 	mov	a,r3
      00017E 30 E7 04         [24] 1036 	jnb	acc.7,00135$
      000181 B2 D5            [12] 1037 	cpl	F0
      000183 F4               [12] 1038 	cpl	a
      000184 04               [12] 1039 	inc	a
      000185                       1040 00135$:
      000185 A4               [48] 1041 	mul	ab
      000186 30 D5 0A         [24] 1042 	jnb	F0,00136$
      000189 F4               [12] 1043 	cpl	a
      00018A 24 01            [12] 1044 	add	a,#0x01
      00018C C5 F0            [12] 1045 	xch	a,b
      00018E F4               [12] 1046 	cpl	a
      00018F 34 00            [12] 1047 	addc	a,#0x00
      000191 C5 F0            [12] 1048 	xch	a,b
      000193                       1049 00136$:
      000193 F9               [12] 1050 	mov	r1,a
      000194 AA F0            [24] 1051 	mov	r2,b
      000196 24 01            [12] 1052 	add	a,#_display
      000198 F8               [12] 1053 	mov	r0,a
      000199 EA               [12] 1054 	mov	a,r2
      00019A 34 00            [12] 1055 	addc	a,#(_display >> 8)
      00019C FF               [12] 1056 	mov	r7,a
      00019D ED               [12] 1057 	mov	a,r5
      00019E 28               [12] 1058 	add	a,r0
      00019F F8               [12] 1059 	mov	r0,a
      0001A0 E4               [12] 1060 	clr	a
      0001A1 3F               [12] 1061 	addc	a,r7
      0001A2 FF               [12] 1062 	mov	r7,a
      0001A3 E9               [12] 1063 	mov	a,r1
      0001A4 24 01            [12] 1064 	add	a,#_display
      0001A6 F9               [12] 1065 	mov	r1,a
      0001A7 EA               [12] 1066 	mov	a,r2
      0001A8 34 00            [12] 1067 	addc	a,#(_display >> 8)
      0001AA FA               [12] 1068 	mov	r2,a
      0001AB EC               [12] 1069 	mov	a,r4
      0001AC 29               [12] 1070 	add	a,r1
      0001AD F5 82            [12] 1071 	mov	dpl,a
      0001AF E4               [12] 1072 	clr	a
      0001B0 3A               [12] 1073 	addc	a,r2
      0001B1 F5 83            [12] 1074 	mov	dph,a
      0001B3 E0               [24] 1075 	movx	a,@dptr
      0001B4 FE               [12] 1076 	mov	r6,a
      0001B5 88 82            [24] 1077 	mov	dpl,r0
      0001B7 8F 83            [24] 1078 	mov	dph,r7
      0001B9 F0               [24] 1079 	movx	@dptr,a
      0001BA 0B               [12] 1080 	inc	r3
      0001BB C3               [12] 1081 	clr	c
      0001BC EB               [12] 1082 	mov	a,r3
      0001BD 64 80            [12] 1083 	xrl	a,#0x80
      0001BF 94 88            [12] 1084 	subb	a,#0x88
      0001C1 40 B5            [24] 1085 	jc	00108$
      0001C3                       1086 00103$:
                                   1087 ;	888n.c:149: if (i<4) for (j=0;j<8;j++) display[j][i+4]=0;
      0001C3 C3               [12] 1088 	clr	c
      0001C4 ED               [12] 1089 	mov	a,r5
      0001C5 64 80            [12] 1090 	xrl	a,#0x80
      0001C7 94 84            [12] 1091 	subb	a,#0x84
      0001C9 50 3C            [24] 1092 	jnc	00106$
      0001CB 74 04            [12] 1093 	mov	a,#0x04
      0001CD 2D               [12] 1094 	add	a,r5
      0001CE FF               [12] 1095 	mov	r7,a
      0001CF 7E 00            [12] 1096 	mov	r6,#0x00
      0001D1                       1097 00110$:
      0001D1 C2 D5            [12] 1098 	clr	F0
      0001D3 75 F0 08         [24] 1099 	mov	b,#0x08
      0001D6 EE               [12] 1100 	mov	a,r6
      0001D7 30 E7 04         [24] 1101 	jnb	acc.7,00139$
      0001DA B2 D5            [12] 1102 	cpl	F0
      0001DC F4               [12] 1103 	cpl	a
      0001DD 04               [12] 1104 	inc	a
      0001DE                       1105 00139$:
      0001DE A4               [48] 1106 	mul	ab
      0001DF 30 D5 0A         [24] 1107 	jnb	F0,00140$
      0001E2 F4               [12] 1108 	cpl	a
      0001E3 24 01            [12] 1109 	add	a,#0x01
      0001E5 C5 F0            [12] 1110 	xch	a,b
      0001E7 F4               [12] 1111 	cpl	a
      0001E8 34 00            [12] 1112 	addc	a,#0x00
      0001EA C5 F0            [12] 1113 	xch	a,b
      0001EC                       1114 00140$:
      0001EC 24 01            [12] 1115 	add	a,#_display
      0001EE FB               [12] 1116 	mov	r3,a
      0001EF 74 00            [12] 1117 	mov	a,#(_display >> 8)
      0001F1 35 F0            [12] 1118 	addc	a,b
      0001F3 FC               [12] 1119 	mov	r4,a
      0001F4 EF               [12] 1120 	mov	a,r7
      0001F5 2B               [12] 1121 	add	a,r3
      0001F6 F5 82            [12] 1122 	mov	dpl,a
      0001F8 E4               [12] 1123 	clr	a
      0001F9 3C               [12] 1124 	addc	a,r4
      0001FA F5 83            [12] 1125 	mov	dph,a
      0001FC E4               [12] 1126 	clr	a
      0001FD F0               [24] 1127 	movx	@dptr,a
      0001FE 0E               [12] 1128 	inc	r6
      0001FF C3               [12] 1129 	clr	c
      000200 EE               [12] 1130 	mov	a,r6
      000201 64 80            [12] 1131 	xrl	a,#0x80
      000203 94 88            [12] 1132 	subb	a,#0x88
      000205 40 CA            [24] 1133 	jc	00110$
      000207                       1134 00106$:
                                   1135 ;	888n.c:151: delay(speed);
      000207 85 22 82         [24] 1136 	mov	dpl,_trailler_speed_1_20
      00020A 85 23 83         [24] 1137 	mov	dph,(_trailler_speed_1_20 + 1)
      00020D C0 05            [24] 1138 	push	ar5
      00020F 12 00 90         [24] 1139 	lcall	_delay
      000212 D0 05            [24] 1140 	pop	ar5
                                   1141 ;	888n.c:144: for (i=6; i>=-3; i--) {
      000214 1D               [12] 1142 	dec	r5
      000215 C3               [12] 1143 	clr	c
      000216 ED               [12] 1144 	mov	a,r5
      000217 64 80            [12] 1145 	xrl	a,#0x80
      000219 94 7D            [12] 1146 	subb	a,#0x7d
      00021B 40 03            [24] 1147 	jc	00142$
      00021D 02 01 6F         [24] 1148 	ljmp	00112$
      000220                       1149 00142$:
      000220 22               [24] 1150 	ret
                                   1151 ;------------------------------------------------------------
                                   1152 ;Allocation info for local variables in function 'point'
                                   1153 ;------------------------------------------------------------
                                   1154 ;y                         Allocated with name '_point_PARM_2'
                                   1155 ;z                         Allocated with name '_point_PARM_3'
                                   1156 ;le                        Allocated with name '_point_PARM_4'
                                   1157 ;x                         Allocated to registers r7 
                                   1158 ;ch1                       Allocated to registers r7 
                                   1159 ;ch0                       Allocated to registers r6 
                                   1160 ;------------------------------------------------------------
                                   1161 ;	888n.c:156: void point(uchar x, uchar y, uchar z, uchar le)
                                   1162 ;	-----------------------------------------
                                   1163 ;	 function point
                                   1164 ;	-----------------------------------------
      000221                       1165 _point:
      000221 AF 82            [24] 1166 	mov	r7,dpl
                                   1167 ;	888n.c:160: ch1 = 1<<x;
      000223 8F F0            [24] 1168 	mov	b,r7
      000225 05 F0            [12] 1169 	inc	b
      000227 74 01            [12] 1170 	mov	a,#0x01
      000229 80 02            [24] 1171 	sjmp	00111$
      00022B                       1172 00109$:
      00022B 25 E0            [12] 1173 	add	a,acc
      00022D                       1174 00111$:
      00022D D5 F0 FB         [24] 1175 	djnz	b,00109$
                                   1176 ;	888n.c:161: ch0=~ch1;
      000230 FF               [12] 1177 	mov	r7,a
      000231 F4               [12] 1178 	cpl	a
      000232 FE               [12] 1179 	mov	r6,a
                                   1180 ;	888n.c:163: if (le) 
      000233 E5 0A            [12] 1181 	mov	a,_point_PARM_4
      000235 60 32            [24] 1182 	jz	00102$
                                   1183 ;	888n.c:164: display[z][y]=display[z][y]|ch1;
      000237 E5 09            [12] 1184 	mov	a,_point_PARM_3
      000239 75 F0 08         [24] 1185 	mov	b,#0x08
      00023C A4               [48] 1186 	mul	ab
      00023D FC               [12] 1187 	mov	r4,a
      00023E AD F0            [24] 1188 	mov	r5,b
      000240 24 01            [12] 1189 	add	a,#_display
      000242 FA               [12] 1190 	mov	r2,a
      000243 ED               [12] 1191 	mov	a,r5
      000244 34 00            [12] 1192 	addc	a,#(_display >> 8)
      000246 FB               [12] 1193 	mov	r3,a
      000247 E5 08            [12] 1194 	mov	a,_point_PARM_2
      000249 F9               [12] 1195 	mov	r1,a
      00024A 2A               [12] 1196 	add	a,r2
      00024B FA               [12] 1197 	mov	r2,a
      00024C E4               [12] 1198 	clr	a
      00024D 3B               [12] 1199 	addc	a,r3
      00024E FB               [12] 1200 	mov	r3,a
      00024F EC               [12] 1201 	mov	a,r4
      000250 24 01            [12] 1202 	add	a,#_display
      000252 FC               [12] 1203 	mov	r4,a
      000253 ED               [12] 1204 	mov	a,r5
      000254 34 00            [12] 1205 	addc	a,#(_display >> 8)
      000256 FD               [12] 1206 	mov	r5,a
      000257 E9               [12] 1207 	mov	a,r1
      000258 2C               [12] 1208 	add	a,r4
      000259 F5 82            [12] 1209 	mov	dpl,a
      00025B E4               [12] 1210 	clr	a
      00025C 3D               [12] 1211 	addc	a,r5
      00025D F5 83            [12] 1212 	mov	dph,a
      00025F E0               [24] 1213 	movx	a,@dptr
      000260 42 07            [12] 1214 	orl	ar7,a
      000262 8A 82            [24] 1215 	mov	dpl,r2
      000264 8B 83            [24] 1216 	mov	dph,r3
      000266 EF               [12] 1217 	mov	a,r7
      000267 F0               [24] 1218 	movx	@dptr,a
      000268 22               [24] 1219 	ret
      000269                       1220 00102$:
                                   1221 ;	888n.c:166: display[z][y]=display[z][y]&ch0;
      000269 E5 09            [12] 1222 	mov	a,_point_PARM_3
      00026B 75 F0 08         [24] 1223 	mov	b,#0x08
      00026E A4               [48] 1224 	mul	ab
      00026F FD               [12] 1225 	mov	r5,a
      000270 AF F0            [24] 1226 	mov	r7,b
      000272 24 01            [12] 1227 	add	a,#_display
      000274 FB               [12] 1228 	mov	r3,a
      000275 EF               [12] 1229 	mov	a,r7
      000276 34 00            [12] 1230 	addc	a,#(_display >> 8)
      000278 FC               [12] 1231 	mov	r4,a
      000279 E5 08            [12] 1232 	mov	a,_point_PARM_2
      00027B FA               [12] 1233 	mov	r2,a
      00027C 2B               [12] 1234 	add	a,r3
      00027D FB               [12] 1235 	mov	r3,a
      00027E E4               [12] 1236 	clr	a
      00027F 3C               [12] 1237 	addc	a,r4
      000280 FC               [12] 1238 	mov	r4,a
      000281 ED               [12] 1239 	mov	a,r5
      000282 24 01            [12] 1240 	add	a,#_display
      000284 FD               [12] 1241 	mov	r5,a
      000285 EF               [12] 1242 	mov	a,r7
      000286 34 00            [12] 1243 	addc	a,#(_display >> 8)
      000288 FF               [12] 1244 	mov	r7,a
      000289 EA               [12] 1245 	mov	a,r2
      00028A 2D               [12] 1246 	add	a,r5
      00028B F5 82            [12] 1247 	mov	dpl,a
      00028D E4               [12] 1248 	clr	a
      00028E 3F               [12] 1249 	addc	a,r7
      00028F F5 83            [12] 1250 	mov	dph,a
      000291 E0               [24] 1251 	movx	a,@dptr
      000292 52 06            [12] 1252 	anl	ar6,a
      000294 8B 82            [24] 1253 	mov	dpl,r3
      000296 8C 83            [24] 1254 	mov	dph,r4
      000298 EE               [12] 1255 	mov	a,r6
      000299 F0               [24] 1256 	movx	@dptr,a
      00029A 22               [24] 1257 	ret
                                   1258 ;------------------------------------------------------------
                                   1259 ;Allocation info for local variables in function 'type'
                                   1260 ;------------------------------------------------------------
                                   1261 ;y                         Allocated with name '_type_PARM_2'
                                   1262 ;cha                       Allocated to registers r7 
                                   1263 ;xx                        Allocated to registers r4 
                                   1264 ;------------------------------------------------------------
                                   1265 ;	888n.c:169: void type(uchar cha, uchar y)
                                   1266 ;	-----------------------------------------
                                   1267 ;	 function type
                                   1268 ;	-----------------------------------------
      00029B                       1269 _type:
      00029B AF 82            [24] 1270 	mov	r7,dpl
                                   1271 ;	888n.c:174: for (xx=0; xx<8; xx++) display[xx][y]=table_cha[cha][xx];
      00029D AE 08            [24] 1272 	mov	r6,_type_PARM_2
      00029F EF               [12] 1273 	mov	a,r7
      0002A0 75 F0 08         [24] 1274 	mov	b,#0x08
      0002A3 A4               [48] 1275 	mul	ab
      0002A4 24 5F            [12] 1276 	add	a,#_table_cha
      0002A6 FD               [12] 1277 	mov	r5,a
      0002A7 74 2A            [12] 1278 	mov	a,#(_table_cha >> 8)
      0002A9 35 F0            [12] 1279 	addc	a,b
      0002AB FF               [12] 1280 	mov	r7,a
      0002AC 7C 00            [12] 1281 	mov	r4,#0x00
      0002AE                       1282 00102$:
      0002AE EC               [12] 1283 	mov	a,r4
      0002AF 75 F0 08         [24] 1284 	mov	b,#0x08
      0002B2 A4               [48] 1285 	mul	ab
      0002B3 24 01            [12] 1286 	add	a,#_display
      0002B5 FA               [12] 1287 	mov	r2,a
      0002B6 74 00            [12] 1288 	mov	a,#(_display >> 8)
      0002B8 35 F0            [12] 1289 	addc	a,b
      0002BA FB               [12] 1290 	mov	r3,a
      0002BB EE               [12] 1291 	mov	a,r6
      0002BC 2A               [12] 1292 	add	a,r2
      0002BD FA               [12] 1293 	mov	r2,a
      0002BE E4               [12] 1294 	clr	a
      0002BF 3B               [12] 1295 	addc	a,r3
      0002C0 FB               [12] 1296 	mov	r3,a
      0002C1 EC               [12] 1297 	mov	a,r4
      0002C2 2D               [12] 1298 	add	a,r5
      0002C3 F5 82            [12] 1299 	mov	dpl,a
      0002C5 E4               [12] 1300 	clr	a
      0002C6 3F               [12] 1301 	addc	a,r7
      0002C7 F5 83            [12] 1302 	mov	dph,a
      0002C9 E4               [12] 1303 	clr	a
      0002CA 93               [24] 1304 	movc	a,@a+dptr
      0002CB F9               [12] 1305 	mov	r1,a
      0002CC 8A 82            [24] 1306 	mov	dpl,r2
      0002CE 8B 83            [24] 1307 	mov	dph,r3
      0002D0 F0               [24] 1308 	movx	@dptr,a
      0002D1 0C               [12] 1309 	inc	r4
      0002D2 BC 08 00         [24] 1310 	cjne	r4,#0x08,00110$
      0002D5                       1311 00110$:
      0002D5 40 D7            [24] 1312 	jc	00102$
      0002D7 22               [24] 1313 	ret
                                   1314 ;------------------------------------------------------------
                                   1315 ;Allocation info for local variables in function 'cirp'
                                   1316 ;------------------------------------------------------------
                                   1317 ;dir                       Allocated with name '_cirp_PARM_2'
                                   1318 ;le                        Allocated with name '_cirp_PARM_3'
                                   1319 ;cpp                       Allocated to registers r7 
                                   1320 ;a                         Allocated to registers r5 
                                   1321 ;b                         Allocated to registers r4 
                                   1322 ;c                         Allocated to registers r6 
                                   1323 ;cp                        Allocated to registers r6 
                                   1324 ;------------------------------------------------------------
                                   1325 ;	888n.c:181: void cirp(uchar cpp, uchar dir, uchar le)
                                   1326 ;	-----------------------------------------
                                   1327 ;	 function cirp
                                   1328 ;	-----------------------------------------
      0002D8                       1329 _cirp:
      0002D8 AF 82            [24] 1330 	mov	r7,dpl
                                   1331 ;	888n.c:185: if ((cpp<128) && (cpp>=0)) {
      0002DA BF 80 00         [24] 1332 	cjne	r7,#0x80,00120$
      0002DD                       1333 00120$:
      0002DD 50 3D            [24] 1334 	jnc	00109$
                                   1335 ;	888n.c:186: if (dir)
      0002DF E5 24            [12] 1336 	mov	a,_cirp_PARM_2
      0002E1 60 07            [24] 1337 	jz	00102$
                                   1338 ;	888n.c:187: cp=127-cpp;
      0002E3 74 7F            [12] 1339 	mov	a,#0x7f
      0002E5 C3               [12] 1340 	clr	c
      0002E6 9F               [12] 1341 	subb	a,r7
      0002E7 FE               [12] 1342 	mov	r6,a
      0002E8 80 02            [24] 1343 	sjmp	00103$
      0002EA                       1344 00102$:
                                   1345 ;	888n.c:189: cp=cpp; 
      0002EA 8F 06            [24] 1346 	mov	ar6,r7
      0002EC                       1347 00103$:
                                   1348 ;	888n.c:191: a = (dat[cp]>>5)&0x07;
      0002EC EE               [12] 1349 	mov	a,r6
      0002ED 90 2A C7         [24] 1350 	mov	dptr,#_dat
      0002F0 93               [24] 1351 	movc	a,@a+dptr
      0002F1 FE               [12] 1352 	mov	r6,a
      0002F2 C4               [12] 1353 	swap	a
      0002F3 03               [12] 1354 	rr	a
      0002F4 54 07            [12] 1355 	anl	a,#0x07
      0002F6 FD               [12] 1356 	mov	r5,a
      0002F7 53 05 07         [24] 1357 	anl	ar5,#0x07
                                   1358 ;	888n.c:192: b = (dat[cp]>>2)&0x07;
      0002FA EE               [12] 1359 	mov	a,r6
      0002FB 03               [12] 1360 	rr	a
      0002FC 03               [12] 1361 	rr	a
      0002FD 54 3F            [12] 1362 	anl	a,#0x3f
      0002FF FC               [12] 1363 	mov	r4,a
      000300 53 04 07         [24] 1364 	anl	ar4,#0x07
                                   1365 ;	888n.c:193: c = dat[cp]&0x03;
      000303 53 06 03         [24] 1366 	anl	ar6,#0x03
                                   1367 ;	888n.c:195: if (cpp>63) c=7-c;
      000306 EF               [12] 1368 	mov	a,r7
      000307 24 C0            [12] 1369 	add	a,#0xff - 0x3f
      000309 50 05            [24] 1370 	jnc	00105$
      00030B 74 07            [12] 1371 	mov	a,#0x07
      00030D C3               [12] 1372 	clr	c
      00030E 9E               [12] 1373 	subb	a,r6
      00030F FE               [12] 1374 	mov	r6,a
      000310                       1375 00105$:
                                   1376 ;	888n.c:197: point (a,b,c,le);
      000310 8C 08            [24] 1377 	mov	_point_PARM_2,r4
      000312 8E 09            [24] 1378 	mov	_point_PARM_3,r6
      000314 85 25 0A         [24] 1379 	mov	_point_PARM_4,_cirp_PARM_3
      000317 8D 82            [24] 1380 	mov	dpl,r5
      000319 02 02 21         [24] 1381 	ljmp	_point
      00031C                       1382 00109$:
      00031C 22               [24] 1383 	ret
                                   1384 ;------------------------------------------------------------
                                   1385 ;Allocation info for local variables in function 'line'
                                   1386 ;------------------------------------------------------------
                                   1387 ;y1                        Allocated with name '_line_PARM_2'
                                   1388 ;z1                        Allocated with name '_line_PARM_3'
                                   1389 ;x2                        Allocated with name '_line_PARM_4'
                                   1390 ;y2                        Allocated with name '_line_PARM_5'
                                   1391 ;z2                        Allocated with name '_line_PARM_6'
                                   1392 ;le                        Allocated with name '_line_PARM_7'
                                   1393 ;x1                        Allocated to registers r7 
                                   1394 ;t                         Allocated with name '_line_t_1_32'
                                   1395 ;a                         Allocated to registers r7 
                                   1396 ;b                         Allocated to registers r2 
                                   1397 ;c                         Allocated to registers r1 
                                   1398 ;a1                        Allocated to registers r6 
                                   1399 ;b1                        Allocated with name '_line_b1_1_32'
                                   1400 ;c1                        Allocated with name '_line_c1_1_32'
                                   1401 ;i                         Allocated to registers r5 
                                   1402 ;------------------------------------------------------------
                                   1403 ;	888n.c:203: void line(uchar x1, uchar y1, uchar z1, uchar x2, uchar y2, uchar z2, uchar le)
                                   1404 ;	-----------------------------------------
                                   1405 ;	 function line
                                   1406 ;	-----------------------------------------
      00031D                       1407 _line:
      00031D AF 82            [24] 1408 	mov	r7,dpl
                                   1409 ;	888n.c:207: a1 = x2-x1;
      00031F E5 28            [12] 1410 	mov	a,_line_PARM_4
      000321 C3               [12] 1411 	clr	c
      000322 9F               [12] 1412 	subb	a,r7
      000323 FE               [12] 1413 	mov	r6,a
                                   1414 ;	888n.c:208: b1=y2-y1;
      000324 E5 29            [12] 1415 	mov	a,_line_PARM_5
      000326 C3               [12] 1416 	clr	c
      000327 95 26            [12] 1417 	subb	a,_line_PARM_2
      000329 F5 2D            [12] 1418 	mov	_line_b1_1_32,a
                                   1419 ;	888n.c:209: c1=z2-z1;
      00032B E5 2A            [12] 1420 	mov	a,_line_PARM_6
      00032D C3               [12] 1421 	clr	c
      00032E 95 27            [12] 1422 	subb	a,_line_PARM_3
      000330 F5 2E            [12] 1423 	mov	_line_c1_1_32,a
                                   1424 ;	888n.c:210: t=maxt(abss(a1),abss(b1),abss(c1));
      000332 8E 82            [24] 1425 	mov	dpl,r6
      000334 C0 07            [24] 1426 	push	ar7
      000336 C0 06            [24] 1427 	push	ar6
      000338 12 00 E5         [24] 1428 	lcall	_abss
      00033B AB 82            [24] 1429 	mov	r3,dpl
      00033D 85 2D 82         [24] 1430 	mov	dpl,_line_b1_1_32
      000340 C0 03            [24] 1431 	push	ar3
      000342 12 00 E5         [24] 1432 	lcall	_abss
      000345 AA 82            [24] 1433 	mov	r2,dpl
      000347 85 2E 82         [24] 1434 	mov	dpl,_line_c1_1_32
      00034A C0 02            [24] 1435 	push	ar2
      00034C 12 00 E5         [24] 1436 	lcall	_abss
      00034F 85 82 09         [24] 1437 	mov	_maxt_PARM_3,dpl
      000352 D0 02            [24] 1438 	pop	ar2
      000354 D0 03            [24] 1439 	pop	ar3
      000356 8A 08            [24] 1440 	mov	_maxt_PARM_2,r2
      000358 8B 82            [24] 1441 	mov	dpl,r3
      00035A 12 01 25         [24] 1442 	lcall	_maxt
      00035D 85 82 2C         [24] 1443 	mov	_line_t_1_32,dpl
      000360 D0 06            [24] 1444 	pop	ar6
      000362 D0 07            [24] 1445 	pop	ar7
                                   1446 ;	888n.c:211: a=x1*10;
      000364 EF               [12] 1447 	mov	a,r7
      000365 75 F0 0A         [24] 1448 	mov	b,#0x0a
      000368 A4               [48] 1449 	mul	ab
      000369 FF               [12] 1450 	mov	r7,a
                                   1451 ;	888n.c:212: b=y1*10;
      00036A E5 26            [12] 1452 	mov	a,_line_PARM_2
      00036C 75 F0 0A         [24] 1453 	mov	b,#0x0a
      00036F A4               [48] 1454 	mul	ab
      000370 FA               [12] 1455 	mov	r2,a
                                   1456 ;	888n.c:213: c=z1*10;
      000371 E5 27            [12] 1457 	mov	a,_line_PARM_3
      000373 75 F0 0A         [24] 1458 	mov	b,#0x0a
      000376 A4               [48] 1459 	mul	ab
      000377 F9               [12] 1460 	mov	r1,a
                                   1461 ;	888n.c:214: a1=a1*10/t;
      000378 C2 D5            [12] 1462 	clr	F0
      00037A 75 F0 0A         [24] 1463 	mov	b,#0x0a
      00037D EE               [12] 1464 	mov	a,r6
      00037E 30 E7 04         [24] 1465 	jnb	acc.7,00114$
      000381 B2 D5            [12] 1466 	cpl	F0
      000383 F4               [12] 1467 	cpl	a
      000384 04               [12] 1468 	inc	a
      000385                       1469 00114$:
      000385 A4               [48] 1470 	mul	ab
      000386 30 D5 0A         [24] 1471 	jnb	F0,00115$
      000389 F4               [12] 1472 	cpl	a
      00038A 24 01            [12] 1473 	add	a,#0x01
      00038C C5 F0            [12] 1474 	xch	a,b
      00038E F4               [12] 1475 	cpl	a
      00038F 34 00            [12] 1476 	addc	a,#0x00
      000391 C5 F0            [12] 1477 	xch	a,b
      000393                       1478 00115$:
      000393 F5 82            [12] 1479 	mov	dpl,a
      000395 85 F0 83         [24] 1480 	mov	dph,b
      000398 E5 2C            [12] 1481 	mov	a,_line_t_1_32
      00039A F8               [12] 1482 	mov	r0,a
      00039B 33               [12] 1483 	rlc	a
      00039C 95 E0            [12] 1484 	subb	a,acc
      00039E FB               [12] 1485 	mov	r3,a
      00039F 88 08            [24] 1486 	mov	__divsint_PARM_2,r0
      0003A1 8B 09            [24] 1487 	mov	(__divsint_PARM_2 + 1),r3
      0003A3 C0 07            [24] 1488 	push	ar7
      0003A5 C0 03            [24] 1489 	push	ar3
      0003A7 C0 02            [24] 1490 	push	ar2
      0003A9 C0 01            [24] 1491 	push	ar1
      0003AB C0 00            [24] 1492 	push	ar0
      0003AD 12 2A 23         [24] 1493 	lcall	__divsint
      0003B0 AC 82            [24] 1494 	mov	r4,dpl
      0003B2 AD 83            [24] 1495 	mov	r5,dph
      0003B4 D0 00            [24] 1496 	pop	ar0
      0003B6 D0 01            [24] 1497 	pop	ar1
      0003B8 D0 02            [24] 1498 	pop	ar2
      0003BA D0 03            [24] 1499 	pop	ar3
      0003BC D0 07            [24] 1500 	pop	ar7
      0003BE 8C 06            [24] 1501 	mov	ar6,r4
                                   1502 ;	888n.c:215: b1=b1*10/t;
      0003C0 C2 D5            [12] 1503 	clr	F0
      0003C2 75 F0 0A         [24] 1504 	mov	b,#0x0a
      0003C5 E5 2D            [12] 1505 	mov	a,_line_b1_1_32
      0003C7 30 E7 04         [24] 1506 	jnb	acc.7,00116$
      0003CA B2 D5            [12] 1507 	cpl	F0
      0003CC F4               [12] 1508 	cpl	a
      0003CD 04               [12] 1509 	inc	a
      0003CE                       1510 00116$:
      0003CE A4               [48] 1511 	mul	ab
      0003CF 30 D5 0A         [24] 1512 	jnb	F0,00117$
      0003D2 F4               [12] 1513 	cpl	a
      0003D3 24 01            [12] 1514 	add	a,#0x01
      0003D5 C5 F0            [12] 1515 	xch	a,b
      0003D7 F4               [12] 1516 	cpl	a
      0003D8 34 00            [12] 1517 	addc	a,#0x00
      0003DA C5 F0            [12] 1518 	xch	a,b
      0003DC                       1519 00117$:
      0003DC F5 82            [12] 1520 	mov	dpl,a
      0003DE 85 F0 83         [24] 1521 	mov	dph,b
      0003E1 88 08            [24] 1522 	mov	__divsint_PARM_2,r0
      0003E3 8B 09            [24] 1523 	mov	(__divsint_PARM_2 + 1),r3
      0003E5 C0 07            [24] 1524 	push	ar7
      0003E7 C0 06            [24] 1525 	push	ar6
      0003E9 C0 03            [24] 1526 	push	ar3
      0003EB C0 02            [24] 1527 	push	ar2
      0003ED C0 01            [24] 1528 	push	ar1
      0003EF C0 00            [24] 1529 	push	ar0
      0003F1 12 2A 23         [24] 1530 	lcall	__divsint
      0003F4 AC 82            [24] 1531 	mov	r4,dpl
      0003F6 AD 83            [24] 1532 	mov	r5,dph
      0003F8 D0 00            [24] 1533 	pop	ar0
      0003FA D0 01            [24] 1534 	pop	ar1
      0003FC D0 02            [24] 1535 	pop	ar2
      0003FE D0 03            [24] 1536 	pop	ar3
      000400 D0 06            [24] 1537 	pop	ar6
      000402 D0 07            [24] 1538 	pop	ar7
      000404 8C 2D            [24] 1539 	mov	_line_b1_1_32,r4
                                   1540 ;	888n.c:216: c1=c1*10/t;
      000406 C2 D5            [12] 1541 	clr	F0
      000408 75 F0 0A         [24] 1542 	mov	b,#0x0a
      00040B E5 2E            [12] 1543 	mov	a,_line_c1_1_32
      00040D 30 E7 04         [24] 1544 	jnb	acc.7,00118$
      000410 B2 D5            [12] 1545 	cpl	F0
      000412 F4               [12] 1546 	cpl	a
      000413 04               [12] 1547 	inc	a
      000414                       1548 00118$:
      000414 A4               [48] 1549 	mul	ab
      000415 30 D5 0A         [24] 1550 	jnb	F0,00119$
      000418 F4               [12] 1551 	cpl	a
      000419 24 01            [12] 1552 	add	a,#0x01
      00041B C5 F0            [12] 1553 	xch	a,b
      00041D F4               [12] 1554 	cpl	a
      00041E 34 00            [12] 1555 	addc	a,#0x00
      000420 C5 F0            [12] 1556 	xch	a,b
      000422                       1557 00119$:
      000422 F5 82            [12] 1558 	mov	dpl,a
      000424 85 F0 83         [24] 1559 	mov	dph,b
      000427 88 08            [24] 1560 	mov	__divsint_PARM_2,r0
      000429 8B 09            [24] 1561 	mov	(__divsint_PARM_2 + 1),r3
      00042B C0 07            [24] 1562 	push	ar7
      00042D C0 06            [24] 1563 	push	ar6
      00042F C0 02            [24] 1564 	push	ar2
      000431 C0 01            [24] 1565 	push	ar1
      000433 12 2A 23         [24] 1566 	lcall	__divsint
      000436 AC 82            [24] 1567 	mov	r4,dpl
      000438 D0 01            [24] 1568 	pop	ar1
      00043A D0 02            [24] 1569 	pop	ar2
      00043C D0 06            [24] 1570 	pop	ar6
      00043E D0 07            [24] 1571 	pop	ar7
      000440 8C 2E            [24] 1572 	mov	_line_c1_1_32,r4
                                   1573 ;	888n.c:218: for (i=0;i<t;i++) {
      000442 7D 00            [12] 1574 	mov	r5,#0x00
      000444                       1575 00103$:
      000444 C3               [12] 1576 	clr	c
      000445 ED               [12] 1577 	mov	a,r5
      000446 64 80            [12] 1578 	xrl	a,#0x80
      000448 85 2C F0         [24] 1579 	mov	b,_line_t_1_32
      00044B 63 F0 80         [24] 1580 	xrl	b,#0x80
      00044E 95 F0            [12] 1581 	subb	a,b
      000450 50 62            [24] 1582 	jnc	00101$
                                   1583 ;	888n.c:219: point(abs(a),abs(b),abs(c),le);
      000452 8F 82            [24] 1584 	mov	dpl,r7
      000454 C0 07            [24] 1585 	push	ar7
      000456 C0 06            [24] 1586 	push	ar6
      000458 C0 05            [24] 1587 	push	ar5
      00045A C0 02            [24] 1588 	push	ar2
      00045C C0 01            [24] 1589 	push	ar1
      00045E 12 00 CC         [24] 1590 	lcall	_abs
      000461 AC 82            [24] 1591 	mov	r4,dpl
      000463 D0 01            [24] 1592 	pop	ar1
      000465 D0 02            [24] 1593 	pop	ar2
      000467 8A 82            [24] 1594 	mov	dpl,r2
      000469 C0 04            [24] 1595 	push	ar4
      00046B C0 02            [24] 1596 	push	ar2
      00046D C0 01            [24] 1597 	push	ar1
      00046F 12 00 CC         [24] 1598 	lcall	_abs
      000472 AB 82            [24] 1599 	mov	r3,dpl
      000474 D0 01            [24] 1600 	pop	ar1
      000476 D0 02            [24] 1601 	pop	ar2
      000478 89 82            [24] 1602 	mov	dpl,r1
      00047A C0 03            [24] 1603 	push	ar3
      00047C C0 02            [24] 1604 	push	ar2
      00047E C0 01            [24] 1605 	push	ar1
      000480 12 00 CC         [24] 1606 	lcall	_abs
      000483 85 82 09         [24] 1607 	mov	_point_PARM_3,dpl
      000486 D0 01            [24] 1608 	pop	ar1
      000488 D0 02            [24] 1609 	pop	ar2
      00048A D0 03            [24] 1610 	pop	ar3
      00048C D0 04            [24] 1611 	pop	ar4
      00048E 8B 08            [24] 1612 	mov	_point_PARM_2,r3
      000490 85 2B 0A         [24] 1613 	mov	_point_PARM_4,_line_PARM_7
      000493 8C 82            [24] 1614 	mov	dpl,r4
      000495 C0 02            [24] 1615 	push	ar2
      000497 C0 01            [24] 1616 	push	ar1
      000499 12 02 21         [24] 1617 	lcall	_point
      00049C D0 01            [24] 1618 	pop	ar1
      00049E D0 02            [24] 1619 	pop	ar2
      0004A0 D0 05            [24] 1620 	pop	ar5
      0004A2 D0 06            [24] 1621 	pop	ar6
      0004A4 D0 07            [24] 1622 	pop	ar7
                                   1623 ;	888n.c:220: a += a1;
      0004A6 EE               [12] 1624 	mov	a,r6
      0004A7 2F               [12] 1625 	add	a,r7
      0004A8 FF               [12] 1626 	mov	r7,a
                                   1627 ;	888n.c:221: b += b1;
      0004A9 E5 2D            [12] 1628 	mov	a,_line_b1_1_32
      0004AB 2A               [12] 1629 	add	a,r2
      0004AC FA               [12] 1630 	mov	r2,a
                                   1631 ;	888n.c:222: c += c1;
      0004AD E5 2E            [12] 1632 	mov	a,_line_c1_1_32
      0004AF 29               [12] 1633 	add	a,r1
      0004B0 F9               [12] 1634 	mov	r1,a
                                   1635 ;	888n.c:218: for (i=0;i<t;i++) {
      0004B1 0D               [12] 1636 	inc	r5
      0004B2 80 90            [24] 1637 	sjmp	00103$
      0004B4                       1638 00101$:
                                   1639 ;	888n.c:225: point(x2,y2,z2,le);
      0004B4 85 29 08         [24] 1640 	mov	_point_PARM_2,_line_PARM_5
      0004B7 85 2A 09         [24] 1641 	mov	_point_PARM_3,_line_PARM_6
      0004BA 85 2B 0A         [24] 1642 	mov	_point_PARM_4,_line_PARM_7
      0004BD 85 28 82         [24] 1643 	mov	dpl,_line_PARM_4
      0004C0 02 02 21         [24] 1644 	ljmp	_point
                                   1645 ;------------------------------------------------------------
                                   1646 ;Allocation info for local variables in function 'box'
                                   1647 ;------------------------------------------------------------
                                   1648 ;y1                        Allocated with name '_box_PARM_2'
                                   1649 ;z1                        Allocated with name '_box_PARM_3'
                                   1650 ;x2                        Allocated with name '_box_PARM_4'
                                   1651 ;y2                        Allocated with name '_box_PARM_5'
                                   1652 ;z2                        Allocated with name '_box_PARM_6'
                                   1653 ;fill                      Allocated with name '_box_PARM_7'
                                   1654 ;le                        Allocated with name '_box_PARM_8'
                                   1655 ;x1                        Allocated with name '_box_x1_1_34'
                                   1656 ;i                         Allocated to registers r6 
                                   1657 ;j                         Allocated with name '_box_j_1_35'
                                   1658 ;t                         Allocated with name '_box_t_1_35'
                                   1659 ;------------------------------------------------------------
                                   1660 ;	888n.c:228: void box(uchar x1, uchar y1, uchar z1, uchar x2, uchar y2, uchar z2, uchar fill, uchar le)
                                   1661 ;	-----------------------------------------
                                   1662 ;	 function box
                                   1663 ;	-----------------------------------------
      0004C3                       1664 _box:
      0004C3 85 82 36         [24] 1665 	mov	_box_x1_1_34,dpl
                                   1666 ;	888n.c:230: uchar i, j, t=0;
      0004C6 75 38 00         [24] 1667 	mov	_box_t_1_35,#0x00
                                   1668 ;	888n.c:232: max(&x1, &x2);
      0004C9 75 08 31         [24] 1669 	mov	_max_PARM_2,#_box_PARM_4
      0004CC 75 09 00         [24] 1670 	mov	(_max_PARM_2 + 1),#0x00
      0004CF 75 0A 40         [24] 1671 	mov	(_max_PARM_2 + 2),#0x40
      0004D2 90 00 36         [24] 1672 	mov	dptr,#_box_x1_1_34
      0004D5 75 F0 40         [24] 1673 	mov	b,#0x40
      0004D8 12 00 F2         [24] 1674 	lcall	_max
                                   1675 ;	888n.c:233: max(&y1, &y2);
      0004DB 75 08 32         [24] 1676 	mov	_max_PARM_2,#_box_PARM_5
      0004DE 75 09 00         [24] 1677 	mov	(_max_PARM_2 + 1),#0x00
      0004E1 75 0A 40         [24] 1678 	mov	(_max_PARM_2 + 2),#0x40
      0004E4 90 00 2F         [24] 1679 	mov	dptr,#_box_PARM_2
      0004E7 75 F0 40         [24] 1680 	mov	b,#0x40
      0004EA 12 00 F2         [24] 1681 	lcall	_max
                                   1682 ;	888n.c:234: max(&z1, &z2);
      0004ED 75 08 33         [24] 1683 	mov	_max_PARM_2,#_box_PARM_6
      0004F0 75 09 00         [24] 1684 	mov	(_max_PARM_2 + 1),#0x00
      0004F3 75 0A 40         [24] 1685 	mov	(_max_PARM_2 + 2),#0x40
      0004F6 90 00 30         [24] 1686 	mov	dptr,#_box_PARM_3
      0004F9 75 F0 40         [24] 1687 	mov	b,#0x40
      0004FC 12 00 F2         [24] 1688 	lcall	_max
                                   1689 ;	888n.c:236: for (i=x1; i<=x2; i++) t |= 1<<i;
      0004FF AE 36            [24] 1690 	mov	r6,_box_x1_1_34
      000501 8E 05            [24] 1691 	mov	ar5,r6
      000503                       1692 00131$:
      000503 C3               [12] 1693 	clr	c
      000504 E5 31            [12] 1694 	mov	a,_box_PARM_4
      000506 9D               [12] 1695 	subb	a,r5
      000507 40 13            [24] 1696 	jc	00101$
      000509 8D F0            [24] 1697 	mov	b,r5
      00050B 05 F0            [12] 1698 	inc	b
      00050D 74 01            [12] 1699 	mov	a,#0x01
      00050F 80 02            [24] 1700 	sjmp	00279$
      000511                       1701 00277$:
      000511 25 E0            [12] 1702 	add	a,acc
      000513                       1703 00279$:
      000513 D5 F0 FB         [24] 1704 	djnz	b,00277$
      000516 FC               [12] 1705 	mov	r4,a
      000517 42 38            [12] 1706 	orl	_box_t_1_35,a
      000519 0D               [12] 1707 	inc	r5
      00051A 80 E7            [24] 1708 	sjmp	00131$
      00051C                       1709 00101$:
                                   1710 ;	888n.c:237: if (!le) t = ~t;
      00051C E5 35            [12] 1711 	mov	a,_box_PARM_8
      00051E 70 05            [24] 1712 	jnz	00103$
      000520 E5 38            [12] 1713 	mov	a,_box_t_1_35
      000522 F4               [12] 1714 	cpl	a
      000523 F5 38            [12] 1715 	mov	_box_t_1_35,a
      000525                       1716 00103$:
                                   1717 ;	888n.c:238: if (fill) {
      000525 E5 34            [12] 1718 	mov	a,_box_PARM_7
      000527 70 03            [24] 1719 	jnz	00281$
      000529 02 05 CA         [24] 1720 	ljmp	00128$
      00052C                       1721 00281$:
                                   1722 ;	888n.c:239: if (le) {
      00052C E5 35            [12] 1723 	mov	a,_box_PARM_8
      00052E 60 4D            [24] 1724 	jz	00109$
                                   1725 ;	888n.c:240: for (i=z1;i<=z2;i++)
      000530 AE 30            [24] 1726 	mov	r6,_box_PARM_3
      000532 8E 05            [24] 1727 	mov	ar5,r6
      000534                       1728 00137$:
      000534 C3               [12] 1729 	clr	c
      000535 E5 33            [12] 1730 	mov	a,_box_PARM_6
      000537 9D               [12] 1731 	subb	a,r5
      000538 50 01            [24] 1732 	jnc	00283$
      00053A 22               [24] 1733 	ret
      00053B                       1734 00283$:
                                   1735 ;	888n.c:241: for (j=y1;j<=y2;j++) display[j][i] |= t;
      00053B 85 2F 37         [24] 1736 	mov	_box_j_1_35,_box_PARM_2
      00053E AB 37            [24] 1737 	mov	r3,_box_j_1_35
      000540                       1738 00134$:
      000540 C3               [12] 1739 	clr	c
      000541 E5 32            [12] 1740 	mov	a,_box_PARM_5
      000543 9B               [12] 1741 	subb	a,r3
      000544 40 34            [24] 1742 	jc	00138$
      000546 EB               [12] 1743 	mov	a,r3
      000547 75 F0 08         [24] 1744 	mov	b,#0x08
      00054A A4               [48] 1745 	mul	ab
      00054B F9               [12] 1746 	mov	r1,a
      00054C AA F0            [24] 1747 	mov	r2,b
      00054E 24 01            [12] 1748 	add	a,#_display
      000550 F8               [12] 1749 	mov	r0,a
      000551 EA               [12] 1750 	mov	a,r2
      000552 34 00            [12] 1751 	addc	a,#(_display >> 8)
      000554 FF               [12] 1752 	mov	r7,a
      000555 ED               [12] 1753 	mov	a,r5
      000556 28               [12] 1754 	add	a,r0
      000557 F8               [12] 1755 	mov	r0,a
      000558 E4               [12] 1756 	clr	a
      000559 3F               [12] 1757 	addc	a,r7
      00055A FF               [12] 1758 	mov	r7,a
      00055B E9               [12] 1759 	mov	a,r1
      00055C 24 01            [12] 1760 	add	a,#_display
      00055E F9               [12] 1761 	mov	r1,a
      00055F EA               [12] 1762 	mov	a,r2
      000560 34 00            [12] 1763 	addc	a,#(_display >> 8)
      000562 FA               [12] 1764 	mov	r2,a
      000563 ED               [12] 1765 	mov	a,r5
      000564 29               [12] 1766 	add	a,r1
      000565 F5 82            [12] 1767 	mov	dpl,a
      000567 E4               [12] 1768 	clr	a
      000568 3A               [12] 1769 	addc	a,r2
      000569 F5 83            [12] 1770 	mov	dph,a
      00056B E0               [24] 1771 	movx	a,@dptr
      00056C FA               [12] 1772 	mov	r2,a
      00056D E5 38            [12] 1773 	mov	a,_box_t_1_35
      00056F 42 02            [12] 1774 	orl	ar2,a
      000571 88 82            [24] 1775 	mov	dpl,r0
      000573 8F 83            [24] 1776 	mov	dph,r7
      000575 EA               [12] 1777 	mov	a,r2
      000576 F0               [24] 1778 	movx	@dptr,a
      000577 0B               [12] 1779 	inc	r3
      000578 80 C6            [24] 1780 	sjmp	00134$
      00057A                       1781 00138$:
                                   1782 ;	888n.c:240: for (i=z1;i<=z2;i++)
      00057A 0D               [12] 1783 	inc	r5
      00057B 80 B7            [24] 1784 	sjmp	00137$
      00057D                       1785 00109$:
                                   1786 ;	888n.c:243: for (i=z1;i<=z2;i++)
      00057D AE 30            [24] 1787 	mov	r6,_box_PARM_3
      00057F 8E 07            [24] 1788 	mov	ar7,r6
      000581                       1789 00143$:
      000581 C3               [12] 1790 	clr	c
      000582 E5 33            [12] 1791 	mov	a,_box_PARM_6
      000584 9F               [12] 1792 	subb	a,r7
      000585 50 01            [24] 1793 	jnc	00285$
      000587 22               [24] 1794 	ret
      000588                       1795 00285$:
                                   1796 ;	888n.c:244: for (j=y1;j<=y2;j++) display[j][i] &= t;
      000588 85 2F 37         [24] 1797 	mov	_box_j_1_35,_box_PARM_2
      00058B AD 37            [24] 1798 	mov	r5,_box_j_1_35
      00058D                       1799 00140$:
      00058D C3               [12] 1800 	clr	c
      00058E E5 32            [12] 1801 	mov	a,_box_PARM_5
      000590 9D               [12] 1802 	subb	a,r5
      000591 40 34            [24] 1803 	jc	00144$
      000593 ED               [12] 1804 	mov	a,r5
      000594 75 F0 08         [24] 1805 	mov	b,#0x08
      000597 A4               [48] 1806 	mul	ab
      000598 FA               [12] 1807 	mov	r2,a
      000599 AB F0            [24] 1808 	mov	r3,b
      00059B 24 01            [12] 1809 	add	a,#_display
      00059D F8               [12] 1810 	mov	r0,a
      00059E EB               [12] 1811 	mov	a,r3
      00059F 34 00            [12] 1812 	addc	a,#(_display >> 8)
      0005A1 F9               [12] 1813 	mov	r1,a
      0005A2 EF               [12] 1814 	mov	a,r7
      0005A3 28               [12] 1815 	add	a,r0
      0005A4 F8               [12] 1816 	mov	r0,a
      0005A5 E4               [12] 1817 	clr	a
      0005A6 39               [12] 1818 	addc	a,r1
      0005A7 F9               [12] 1819 	mov	r1,a
      0005A8 EA               [12] 1820 	mov	a,r2
      0005A9 24 01            [12] 1821 	add	a,#_display
      0005AB FA               [12] 1822 	mov	r2,a
      0005AC EB               [12] 1823 	mov	a,r3
      0005AD 34 00            [12] 1824 	addc	a,#(_display >> 8)
      0005AF FB               [12] 1825 	mov	r3,a
      0005B0 EF               [12] 1826 	mov	a,r7
      0005B1 2A               [12] 1827 	add	a,r2
      0005B2 F5 82            [12] 1828 	mov	dpl,a
      0005B4 E4               [12] 1829 	clr	a
      0005B5 3B               [12] 1830 	addc	a,r3
      0005B6 F5 83            [12] 1831 	mov	dph,a
      0005B8 E0               [24] 1832 	movx	a,@dptr
      0005B9 FB               [12] 1833 	mov	r3,a
      0005BA E5 38            [12] 1834 	mov	a,_box_t_1_35
      0005BC 52 03            [12] 1835 	anl	ar3,a
      0005BE 88 82            [24] 1836 	mov	dpl,r0
      0005C0 89 83            [24] 1837 	mov	dph,r1
      0005C2 EB               [12] 1838 	mov	a,r3
      0005C3 F0               [24] 1839 	movx	@dptr,a
      0005C4 0D               [12] 1840 	inc	r5
      0005C5 80 C6            [24] 1841 	sjmp	00140$
      0005C7                       1842 00144$:
                                   1843 ;	888n.c:243: for (i=z1;i<=z2;i++)
      0005C7 0F               [12] 1844 	inc	r7
      0005C8 80 B7            [24] 1845 	sjmp	00143$
      0005CA                       1846 00128$:
                                   1847 ;	888n.c:247: if (le) {
      0005CA E5 35            [12] 1848 	mov	a,_box_PARM_8
      0005CC 70 03            [24] 1849 	jnz	00287$
      0005CE 02 06 A4         [24] 1850 	ljmp	00112$
      0005D1                       1851 00287$:
                                   1852 ;	888n.c:248: display[y1][z1]|=t;
      0005D1 E5 2F            [12] 1853 	mov	a,_box_PARM_2
      0005D3 75 F0 08         [24] 1854 	mov	b,#0x08
      0005D6 A4               [48] 1855 	mul	ab
      0005D7 FD               [12] 1856 	mov	r5,a
      0005D8 AF F0            [24] 1857 	mov	r7,b
      0005DA 24 01            [12] 1858 	add	a,#_display
      0005DC FA               [12] 1859 	mov	r2,a
      0005DD EF               [12] 1860 	mov	a,r7
      0005DE 34 00            [12] 1861 	addc	a,#(_display >> 8)
      0005E0 FB               [12] 1862 	mov	r3,a
      0005E1 E5 30            [12] 1863 	mov	a,_box_PARM_3
      0005E3 F9               [12] 1864 	mov	r1,a
      0005E4 2A               [12] 1865 	add	a,r2
      0005E5 FA               [12] 1866 	mov	r2,a
      0005E6 E4               [12] 1867 	clr	a
      0005E7 3B               [12] 1868 	addc	a,r3
      0005E8 FB               [12] 1869 	mov	r3,a
      0005E9 ED               [12] 1870 	mov	a,r5
      0005EA 24 01            [12] 1871 	add	a,#_display
      0005EC FD               [12] 1872 	mov	r5,a
      0005ED EF               [12] 1873 	mov	a,r7
      0005EE 34 00            [12] 1874 	addc	a,#(_display >> 8)
      0005F0 FF               [12] 1875 	mov	r7,a
      0005F1 E9               [12] 1876 	mov	a,r1
      0005F2 2D               [12] 1877 	add	a,r5
      0005F3 F5 82            [12] 1878 	mov	dpl,a
      0005F5 E4               [12] 1879 	clr	a
      0005F6 3F               [12] 1880 	addc	a,r7
      0005F7 F5 83            [12] 1881 	mov	dph,a
      0005F9 E0               [24] 1882 	movx	a,@dptr
      0005FA FF               [12] 1883 	mov	r7,a
      0005FB E5 38            [12] 1884 	mov	a,_box_t_1_35
      0005FD 42 07            [12] 1885 	orl	ar7,a
      0005FF 8A 82            [24] 1886 	mov	dpl,r2
      000601 8B 83            [24] 1887 	mov	dph,r3
      000603 EF               [12] 1888 	mov	a,r7
      000604 F0               [24] 1889 	movx	@dptr,a
                                   1890 ;	888n.c:249: display[y2][z1]|=t;
      000605 E5 32            [12] 1891 	mov	a,_box_PARM_5
      000607 75 F0 08         [24] 1892 	mov	b,#0x08
      00060A A4               [48] 1893 	mul	ab
      00060B FD               [12] 1894 	mov	r5,a
      00060C AF F0            [24] 1895 	mov	r7,b
      00060E 24 01            [12] 1896 	add	a,#_display
      000610 FA               [12] 1897 	mov	r2,a
      000611 EF               [12] 1898 	mov	a,r7
      000612 34 00            [12] 1899 	addc	a,#(_display >> 8)
      000614 FB               [12] 1900 	mov	r3,a
      000615 E5 30            [12] 1901 	mov	a,_box_PARM_3
      000617 F9               [12] 1902 	mov	r1,a
      000618 2A               [12] 1903 	add	a,r2
      000619 FA               [12] 1904 	mov	r2,a
      00061A E4               [12] 1905 	clr	a
      00061B 3B               [12] 1906 	addc	a,r3
      00061C FB               [12] 1907 	mov	r3,a
      00061D ED               [12] 1908 	mov	a,r5
      00061E 24 01            [12] 1909 	add	a,#_display
      000620 FD               [12] 1910 	mov	r5,a
      000621 EF               [12] 1911 	mov	a,r7
      000622 34 00            [12] 1912 	addc	a,#(_display >> 8)
      000624 FF               [12] 1913 	mov	r7,a
      000625 E9               [12] 1914 	mov	a,r1
      000626 2D               [12] 1915 	add	a,r5
      000627 F5 82            [12] 1916 	mov	dpl,a
      000629 E4               [12] 1917 	clr	a
      00062A 3F               [12] 1918 	addc	a,r7
      00062B F5 83            [12] 1919 	mov	dph,a
      00062D E0               [24] 1920 	movx	a,@dptr
      00062E FF               [12] 1921 	mov	r7,a
      00062F E5 38            [12] 1922 	mov	a,_box_t_1_35
      000631 42 07            [12] 1923 	orl	ar7,a
      000633 8A 82            [24] 1924 	mov	dpl,r2
      000635 8B 83            [24] 1925 	mov	dph,r3
      000637 EF               [12] 1926 	mov	a,r7
      000638 F0               [24] 1927 	movx	@dptr,a
                                   1928 ;	888n.c:250: display[y1][z2]|=t;
      000639 E5 2F            [12] 1929 	mov	a,_box_PARM_2
      00063B 75 F0 08         [24] 1930 	mov	b,#0x08
      00063E A4               [48] 1931 	mul	ab
      00063F FD               [12] 1932 	mov	r5,a
      000640 AF F0            [24] 1933 	mov	r7,b
      000642 24 01            [12] 1934 	add	a,#_display
      000644 FA               [12] 1935 	mov	r2,a
      000645 EF               [12] 1936 	mov	a,r7
      000646 34 00            [12] 1937 	addc	a,#(_display >> 8)
      000648 FB               [12] 1938 	mov	r3,a
      000649 E5 33            [12] 1939 	mov	a,_box_PARM_6
      00064B F9               [12] 1940 	mov	r1,a
      00064C 2A               [12] 1941 	add	a,r2
      00064D FA               [12] 1942 	mov	r2,a
      00064E E4               [12] 1943 	clr	a
      00064F 3B               [12] 1944 	addc	a,r3
      000650 FB               [12] 1945 	mov	r3,a
      000651 ED               [12] 1946 	mov	a,r5
      000652 24 01            [12] 1947 	add	a,#_display
      000654 FD               [12] 1948 	mov	r5,a
      000655 EF               [12] 1949 	mov	a,r7
      000656 34 00            [12] 1950 	addc	a,#(_display >> 8)
      000658 FF               [12] 1951 	mov	r7,a
      000659 E9               [12] 1952 	mov	a,r1
      00065A 2D               [12] 1953 	add	a,r5
      00065B F5 82            [12] 1954 	mov	dpl,a
      00065D E4               [12] 1955 	clr	a
      00065E 3F               [12] 1956 	addc	a,r7
      00065F F5 83            [12] 1957 	mov	dph,a
      000661 E0               [24] 1958 	movx	a,@dptr
      000662 FF               [12] 1959 	mov	r7,a
      000663 E5 38            [12] 1960 	mov	a,_box_t_1_35
      000665 42 07            [12] 1961 	orl	ar7,a
      000667 8A 82            [24] 1962 	mov	dpl,r2
      000669 8B 83            [24] 1963 	mov	dph,r3
      00066B EF               [12] 1964 	mov	a,r7
      00066C F0               [24] 1965 	movx	@dptr,a
                                   1966 ;	888n.c:251: display[y2][z2]|=t;
      00066D E5 32            [12] 1967 	mov	a,_box_PARM_5
      00066F 75 F0 08         [24] 1968 	mov	b,#0x08
      000672 A4               [48] 1969 	mul	ab
      000673 FD               [12] 1970 	mov	r5,a
      000674 AF F0            [24] 1971 	mov	r7,b
      000676 24 01            [12] 1972 	add	a,#_display
      000678 FA               [12] 1973 	mov	r2,a
      000679 EF               [12] 1974 	mov	a,r7
      00067A 34 00            [12] 1975 	addc	a,#(_display >> 8)
      00067C FB               [12] 1976 	mov	r3,a
      00067D E5 33            [12] 1977 	mov	a,_box_PARM_6
      00067F F9               [12] 1978 	mov	r1,a
      000680 2A               [12] 1979 	add	a,r2
      000681 FA               [12] 1980 	mov	r2,a
      000682 E4               [12] 1981 	clr	a
      000683 3B               [12] 1982 	addc	a,r3
      000684 FB               [12] 1983 	mov	r3,a
      000685 ED               [12] 1984 	mov	a,r5
      000686 24 01            [12] 1985 	add	a,#_display
      000688 FD               [12] 1986 	mov	r5,a
      000689 EF               [12] 1987 	mov	a,r7
      00068A 34 00            [12] 1988 	addc	a,#(_display >> 8)
      00068C FF               [12] 1989 	mov	r7,a
      00068D E9               [12] 1990 	mov	a,r1
      00068E 2D               [12] 1991 	add	a,r5
      00068F F5 82            [12] 1992 	mov	dpl,a
      000691 E4               [12] 1993 	clr	a
      000692 3F               [12] 1994 	addc	a,r7
      000693 F5 83            [12] 1995 	mov	dph,a
      000695 E0               [24] 1996 	movx	a,@dptr
      000696 FF               [12] 1997 	mov	r7,a
      000697 E5 38            [12] 1998 	mov	a,_box_t_1_35
      000699 42 07            [12] 1999 	orl	ar7,a
      00069B 8A 82            [24] 2000 	mov	dpl,r2
      00069D 8B 83            [24] 2001 	mov	dph,r3
      00069F EF               [12] 2002 	mov	a,r7
      0006A0 F0               [24] 2003 	movx	@dptr,a
      0006A1 02 07 74         [24] 2004 	ljmp	00113$
      0006A4                       2005 00112$:
                                   2006 ;	888n.c:253: display[y1][z1]&=t;
      0006A4 E5 2F            [12] 2007 	mov	a,_box_PARM_2
      0006A6 75 F0 08         [24] 2008 	mov	b,#0x08
      0006A9 A4               [48] 2009 	mul	ab
      0006AA FD               [12] 2010 	mov	r5,a
      0006AB AF F0            [24] 2011 	mov	r7,b
      0006AD 24 01            [12] 2012 	add	a,#_display
      0006AF FA               [12] 2013 	mov	r2,a
      0006B0 EF               [12] 2014 	mov	a,r7
      0006B1 34 00            [12] 2015 	addc	a,#(_display >> 8)
      0006B3 FB               [12] 2016 	mov	r3,a
      0006B4 E5 30            [12] 2017 	mov	a,_box_PARM_3
      0006B6 F9               [12] 2018 	mov	r1,a
      0006B7 2A               [12] 2019 	add	a,r2
      0006B8 FA               [12] 2020 	mov	r2,a
      0006B9 E4               [12] 2021 	clr	a
      0006BA 3B               [12] 2022 	addc	a,r3
      0006BB FB               [12] 2023 	mov	r3,a
      0006BC ED               [12] 2024 	mov	a,r5
      0006BD 24 01            [12] 2025 	add	a,#_display
      0006BF FD               [12] 2026 	mov	r5,a
      0006C0 EF               [12] 2027 	mov	a,r7
      0006C1 34 00            [12] 2028 	addc	a,#(_display >> 8)
      0006C3 FF               [12] 2029 	mov	r7,a
      0006C4 E9               [12] 2030 	mov	a,r1
      0006C5 2D               [12] 2031 	add	a,r5
      0006C6 F5 82            [12] 2032 	mov	dpl,a
      0006C8 E4               [12] 2033 	clr	a
      0006C9 3F               [12] 2034 	addc	a,r7
      0006CA F5 83            [12] 2035 	mov	dph,a
      0006CC E0               [24] 2036 	movx	a,@dptr
      0006CD FF               [12] 2037 	mov	r7,a
      0006CE E5 38            [12] 2038 	mov	a,_box_t_1_35
      0006D0 52 07            [12] 2039 	anl	ar7,a
      0006D2 8A 82            [24] 2040 	mov	dpl,r2
      0006D4 8B 83            [24] 2041 	mov	dph,r3
      0006D6 EF               [12] 2042 	mov	a,r7
      0006D7 F0               [24] 2043 	movx	@dptr,a
                                   2044 ;	888n.c:254: display[y2][z1]&=t;
      0006D8 E5 32            [12] 2045 	mov	a,_box_PARM_5
      0006DA 75 F0 08         [24] 2046 	mov	b,#0x08
      0006DD A4               [48] 2047 	mul	ab
      0006DE FD               [12] 2048 	mov	r5,a
      0006DF AF F0            [24] 2049 	mov	r7,b
      0006E1 24 01            [12] 2050 	add	a,#_display
      0006E3 FA               [12] 2051 	mov	r2,a
      0006E4 EF               [12] 2052 	mov	a,r7
      0006E5 34 00            [12] 2053 	addc	a,#(_display >> 8)
      0006E7 FB               [12] 2054 	mov	r3,a
      0006E8 E5 30            [12] 2055 	mov	a,_box_PARM_3
      0006EA F9               [12] 2056 	mov	r1,a
      0006EB 2A               [12] 2057 	add	a,r2
      0006EC FA               [12] 2058 	mov	r2,a
      0006ED E4               [12] 2059 	clr	a
      0006EE 3B               [12] 2060 	addc	a,r3
      0006EF FB               [12] 2061 	mov	r3,a
      0006F0 ED               [12] 2062 	mov	a,r5
      0006F1 24 01            [12] 2063 	add	a,#_display
      0006F3 FD               [12] 2064 	mov	r5,a
      0006F4 EF               [12] 2065 	mov	a,r7
      0006F5 34 00            [12] 2066 	addc	a,#(_display >> 8)
      0006F7 FF               [12] 2067 	mov	r7,a
      0006F8 E9               [12] 2068 	mov	a,r1
      0006F9 2D               [12] 2069 	add	a,r5
      0006FA F5 82            [12] 2070 	mov	dpl,a
      0006FC E4               [12] 2071 	clr	a
      0006FD 3F               [12] 2072 	addc	a,r7
      0006FE F5 83            [12] 2073 	mov	dph,a
      000700 E0               [24] 2074 	movx	a,@dptr
      000701 FF               [12] 2075 	mov	r7,a
      000702 E5 38            [12] 2076 	mov	a,_box_t_1_35
      000704 52 07            [12] 2077 	anl	ar7,a
      000706 8A 82            [24] 2078 	mov	dpl,r2
      000708 8B 83            [24] 2079 	mov	dph,r3
      00070A EF               [12] 2080 	mov	a,r7
      00070B F0               [24] 2081 	movx	@dptr,a
                                   2082 ;	888n.c:255: display[y1][z2]&=t;
      00070C E5 2F            [12] 2083 	mov	a,_box_PARM_2
      00070E 75 F0 08         [24] 2084 	mov	b,#0x08
      000711 A4               [48] 2085 	mul	ab
      000712 FD               [12] 2086 	mov	r5,a
      000713 AF F0            [24] 2087 	mov	r7,b
      000715 24 01            [12] 2088 	add	a,#_display
      000717 FA               [12] 2089 	mov	r2,a
      000718 EF               [12] 2090 	mov	a,r7
      000719 34 00            [12] 2091 	addc	a,#(_display >> 8)
      00071B FB               [12] 2092 	mov	r3,a
      00071C E5 33            [12] 2093 	mov	a,_box_PARM_6
      00071E F9               [12] 2094 	mov	r1,a
      00071F 2A               [12] 2095 	add	a,r2
      000720 FA               [12] 2096 	mov	r2,a
      000721 E4               [12] 2097 	clr	a
      000722 3B               [12] 2098 	addc	a,r3
      000723 FB               [12] 2099 	mov	r3,a
      000724 ED               [12] 2100 	mov	a,r5
      000725 24 01            [12] 2101 	add	a,#_display
      000727 FD               [12] 2102 	mov	r5,a
      000728 EF               [12] 2103 	mov	a,r7
      000729 34 00            [12] 2104 	addc	a,#(_display >> 8)
      00072B FF               [12] 2105 	mov	r7,a
      00072C E9               [12] 2106 	mov	a,r1
      00072D 2D               [12] 2107 	add	a,r5
      00072E F5 82            [12] 2108 	mov	dpl,a
      000730 E4               [12] 2109 	clr	a
      000731 3F               [12] 2110 	addc	a,r7
      000732 F5 83            [12] 2111 	mov	dph,a
      000734 E0               [24] 2112 	movx	a,@dptr
      000735 FF               [12] 2113 	mov	r7,a
      000736 E5 38            [12] 2114 	mov	a,_box_t_1_35
      000738 52 07            [12] 2115 	anl	ar7,a
      00073A 8A 82            [24] 2116 	mov	dpl,r2
      00073C 8B 83            [24] 2117 	mov	dph,r3
      00073E EF               [12] 2118 	mov	a,r7
      00073F F0               [24] 2119 	movx	@dptr,a
                                   2120 ;	888n.c:256: display[y2][z2]&=t;
      000740 E5 32            [12] 2121 	mov	a,_box_PARM_5
      000742 75 F0 08         [24] 2122 	mov	b,#0x08
      000745 A4               [48] 2123 	mul	ab
      000746 FD               [12] 2124 	mov	r5,a
      000747 AF F0            [24] 2125 	mov	r7,b
      000749 24 01            [12] 2126 	add	a,#_display
      00074B FA               [12] 2127 	mov	r2,a
      00074C EF               [12] 2128 	mov	a,r7
      00074D 34 00            [12] 2129 	addc	a,#(_display >> 8)
      00074F FB               [12] 2130 	mov	r3,a
      000750 E5 33            [12] 2131 	mov	a,_box_PARM_6
      000752 F9               [12] 2132 	mov	r1,a
      000753 2A               [12] 2133 	add	a,r2
      000754 FA               [12] 2134 	mov	r2,a
      000755 E4               [12] 2135 	clr	a
      000756 3B               [12] 2136 	addc	a,r3
      000757 FB               [12] 2137 	mov	r3,a
      000758 ED               [12] 2138 	mov	a,r5
      000759 24 01            [12] 2139 	add	a,#_display
      00075B FD               [12] 2140 	mov	r5,a
      00075C EF               [12] 2141 	mov	a,r7
      00075D 34 00            [12] 2142 	addc	a,#(_display >> 8)
      00075F FF               [12] 2143 	mov	r7,a
      000760 E9               [12] 2144 	mov	a,r1
      000761 2D               [12] 2145 	add	a,r5
      000762 F5 82            [12] 2146 	mov	dpl,a
      000764 E4               [12] 2147 	clr	a
      000765 3F               [12] 2148 	addc	a,r7
      000766 F5 83            [12] 2149 	mov	dph,a
      000768 E0               [24] 2150 	movx	a,@dptr
      000769 FF               [12] 2151 	mov	r7,a
      00076A E5 38            [12] 2152 	mov	a,_box_t_1_35
      00076C 52 07            [12] 2153 	anl	ar7,a
      00076E 8A 82            [24] 2154 	mov	dpl,r2
      000770 8B 83            [24] 2155 	mov	dph,r3
      000772 EF               [12] 2156 	mov	a,r7
      000773 F0               [24] 2157 	movx	@dptr,a
      000774                       2158 00113$:
                                   2159 ;	888n.c:258: t=(0x01<<x1)|(0x01<<x2);
      000774 85 36 F0         [24] 2160 	mov	b,_box_x1_1_34
      000777 05 F0            [12] 2161 	inc	b
      000779 74 01            [12] 2162 	mov	a,#0x01
      00077B 80 02            [24] 2163 	sjmp	00290$
      00077D                       2164 00288$:
      00077D 25 E0            [12] 2165 	add	a,acc
      00077F                       2166 00290$:
      00077F D5 F0 FB         [24] 2167 	djnz	b,00288$
      000782 FF               [12] 2168 	mov	r7,a
      000783 85 31 F0         [24] 2169 	mov	b,_box_PARM_4
      000786 05 F0            [12] 2170 	inc	b
      000788 74 01            [12] 2171 	mov	a,#0x01
      00078A 80 02            [24] 2172 	sjmp	00293$
      00078C                       2173 00291$:
      00078C 25 E0            [12] 2174 	add	a,acc
      00078E                       2175 00293$:
      00078E D5 F0 FB         [24] 2176 	djnz	b,00291$
      000791 FD               [12] 2177 	mov	r5,a
      000792 4F               [12] 2178 	orl	a,r7
      000793 F5 38            [12] 2179 	mov	_box_t_1_35,a
                                   2180 ;	888n.c:259: if (!le) t = ~t;
      000795 E5 35            [12] 2181 	mov	a,_box_PARM_8
      000797 70 05            [24] 2182 	jnz	00115$
      000799 E5 38            [12] 2183 	mov	a,_box_t_1_35
      00079B F4               [12] 2184 	cpl	a
      00079C F5 38            [12] 2185 	mov	_box_t_1_35,a
      00079E                       2186 00115$:
                                   2187 ;	888n.c:260: if (le) {
      00079E E5 35            [12] 2188 	mov	a,_box_PARM_8
      0007A0 70 03            [24] 2189 	jnz	00295$
      0007A2 02 08 50         [24] 2190 	ljmp	00125$
      0007A5                       2191 00295$:
                                   2192 ;	888n.c:261: for (j=z1;j<=z2;j+=(z2-z1)) {
      0007A5 85 30 37         [24] 2193 	mov	_box_j_1_35,_box_PARM_3
      0007A8                       2194 00149$:
      0007A8 C3               [12] 2195 	clr	c
      0007A9 E5 33            [12] 2196 	mov	a,_box_PARM_6
      0007AB 95 37            [12] 2197 	subb	a,_box_j_1_35
      0007AD 40 4B            [24] 2198 	jc	00117$
                                   2199 ;	888n.c:262: for (i=y1;i<=y2;i++) display[i][j]|=t;
      0007AF AE 2F            [24] 2200 	mov	r6,_box_PARM_2
      0007B1 8E 07            [24] 2201 	mov	ar7,r6
      0007B3                       2202 00146$:
      0007B3 C3               [12] 2203 	clr	c
      0007B4 E5 32            [12] 2204 	mov	a,_box_PARM_5
      0007B6 9F               [12] 2205 	subb	a,r7
      0007B7 40 36            [24] 2206 	jc	00150$
      0007B9 EF               [12] 2207 	mov	a,r7
      0007BA 75 F0 08         [24] 2208 	mov	b,#0x08
      0007BD A4               [48] 2209 	mul	ab
      0007BE FB               [12] 2210 	mov	r3,a
      0007BF AD F0            [24] 2211 	mov	r5,b
      0007C1 24 01            [12] 2212 	add	a,#_display
      0007C3 F9               [12] 2213 	mov	r1,a
      0007C4 ED               [12] 2214 	mov	a,r5
      0007C5 34 00            [12] 2215 	addc	a,#(_display >> 8)
      0007C7 FA               [12] 2216 	mov	r2,a
      0007C8 E5 37            [12] 2217 	mov	a,_box_j_1_35
      0007CA 29               [12] 2218 	add	a,r1
      0007CB F9               [12] 2219 	mov	r1,a
      0007CC E4               [12] 2220 	clr	a
      0007CD 3A               [12] 2221 	addc	a,r2
      0007CE FA               [12] 2222 	mov	r2,a
      0007CF EB               [12] 2223 	mov	a,r3
      0007D0 24 01            [12] 2224 	add	a,#_display
      0007D2 FB               [12] 2225 	mov	r3,a
      0007D3 ED               [12] 2226 	mov	a,r5
      0007D4 34 00            [12] 2227 	addc	a,#(_display >> 8)
      0007D6 FD               [12] 2228 	mov	r5,a
      0007D7 E5 37            [12] 2229 	mov	a,_box_j_1_35
      0007D9 2B               [12] 2230 	add	a,r3
      0007DA F5 82            [12] 2231 	mov	dpl,a
      0007DC E4               [12] 2232 	clr	a
      0007DD 3D               [12] 2233 	addc	a,r5
      0007DE F5 83            [12] 2234 	mov	dph,a
      0007E0 E0               [24] 2235 	movx	a,@dptr
      0007E1 FD               [12] 2236 	mov	r5,a
      0007E2 E5 38            [12] 2237 	mov	a,_box_t_1_35
      0007E4 42 05            [12] 2238 	orl	ar5,a
      0007E6 89 82            [24] 2239 	mov	dpl,r1
      0007E8 8A 83            [24] 2240 	mov	dph,r2
      0007EA ED               [12] 2241 	mov	a,r5
      0007EB F0               [24] 2242 	movx	@dptr,a
      0007EC 0F               [12] 2243 	inc	r7
      0007ED 80 C4            [24] 2244 	sjmp	00146$
      0007EF                       2245 00150$:
                                   2246 ;	888n.c:261: for (j=z1;j<=z2;j+=(z2-z1)) {
      0007EF E5 33            [12] 2247 	mov	a,_box_PARM_6
      0007F1 C3               [12] 2248 	clr	c
      0007F2 95 30            [12] 2249 	subb	a,_box_PARM_3
      0007F4 25 37            [12] 2250 	add	a,_box_j_1_35
      0007F6 F5 37            [12] 2251 	mov	_box_j_1_35,a
      0007F8 80 AE            [24] 2252 	sjmp	00149$
      0007FA                       2253 00117$:
                                   2254 ;	888n.c:264: for (j=y1;j<=y2;j+=(y2-y1)) {
      0007FA 85 2F 37         [24] 2255 	mov	_box_j_1_35,_box_PARM_2
      0007FD                       2256 00155$:
      0007FD C3               [12] 2257 	clr	c
      0007FE E5 32            [12] 2258 	mov	a,_box_PARM_5
      000800 95 37            [12] 2259 	subb	a,_box_j_1_35
      000802 50 01            [24] 2260 	jnc	00298$
      000804 22               [24] 2261 	ret
      000805                       2262 00298$:
                                   2263 ;	888n.c:265: for (i=z1;i<=z2;i++) display[j][i]|=t;
      000805 AE 30            [24] 2264 	mov	r6,_box_PARM_3
      000807 E5 37            [12] 2265 	mov	a,_box_j_1_35
      000809 75 F0 08         [24] 2266 	mov	b,#0x08
      00080C A4               [48] 2267 	mul	ab
      00080D FD               [12] 2268 	mov	r5,a
      00080E AF F0            [24] 2269 	mov	r7,b
      000810 8E 03            [24] 2270 	mov	ar3,r6
      000812                       2271 00152$:
      000812 C3               [12] 2272 	clr	c
      000813 E5 33            [12] 2273 	mov	a,_box_PARM_6
      000815 9B               [12] 2274 	subb	a,r3
      000816 40 2D            [24] 2275 	jc	00156$
      000818 ED               [12] 2276 	mov	a,r5
      000819 24 01            [12] 2277 	add	a,#_display
      00081B F9               [12] 2278 	mov	r1,a
      00081C EF               [12] 2279 	mov	a,r7
      00081D 34 00            [12] 2280 	addc	a,#(_display >> 8)
      00081F FA               [12] 2281 	mov	r2,a
      000820 EB               [12] 2282 	mov	a,r3
      000821 29               [12] 2283 	add	a,r1
      000822 F9               [12] 2284 	mov	r1,a
      000823 E4               [12] 2285 	clr	a
      000824 3A               [12] 2286 	addc	a,r2
      000825 FA               [12] 2287 	mov	r2,a
      000826 ED               [12] 2288 	mov	a,r5
      000827 24 01            [12] 2289 	add	a,#_display
      000829 F8               [12] 2290 	mov	r0,a
      00082A EF               [12] 2291 	mov	a,r7
      00082B 34 00            [12] 2292 	addc	a,#(_display >> 8)
      00082D FC               [12] 2293 	mov	r4,a
      00082E EB               [12] 2294 	mov	a,r3
      00082F 28               [12] 2295 	add	a,r0
      000830 F5 82            [12] 2296 	mov	dpl,a
      000832 E4               [12] 2297 	clr	a
      000833 3C               [12] 2298 	addc	a,r4
      000834 F5 83            [12] 2299 	mov	dph,a
      000836 E0               [24] 2300 	movx	a,@dptr
      000837 FC               [12] 2301 	mov	r4,a
      000838 E5 38            [12] 2302 	mov	a,_box_t_1_35
      00083A 42 04            [12] 2303 	orl	ar4,a
      00083C 89 82            [24] 2304 	mov	dpl,r1
      00083E 8A 83            [24] 2305 	mov	dph,r2
      000840 EC               [12] 2306 	mov	a,r4
      000841 F0               [24] 2307 	movx	@dptr,a
      000842 0B               [12] 2308 	inc	r3
      000843 80 CD            [24] 2309 	sjmp	00152$
      000845                       2310 00156$:
                                   2311 ;	888n.c:264: for (j=y1;j<=y2;j+=(y2-y1)) {
      000845 E5 32            [12] 2312 	mov	a,_box_PARM_5
      000847 C3               [12] 2313 	clr	c
      000848 95 2F            [12] 2314 	subb	a,_box_PARM_2
      00084A 25 37            [12] 2315 	add	a,_box_j_1_35
      00084C F5 37            [12] 2316 	mov	_box_j_1_35,a
      00084E 80 AD            [24] 2317 	sjmp	00155$
      000850                       2318 00125$:
                                   2319 ;	888n.c:268: for (j=z1;j<=z2;j+=(z2-z1)) {
      000850 85 30 37         [24] 2320 	mov	_box_j_1_35,_box_PARM_3
      000853                       2321 00161$:
      000853 C3               [12] 2322 	clr	c
      000854 E5 33            [12] 2323 	mov	a,_box_PARM_6
      000856 95 37            [12] 2324 	subb	a,_box_j_1_35
      000858 40 4B            [24] 2325 	jc	00121$
                                   2326 ;	888n.c:269: for (i=y1;i<=y2;i++) display[i][j]&=t;
      00085A AE 2F            [24] 2327 	mov	r6,_box_PARM_2
      00085C 8E 07            [24] 2328 	mov	ar7,r6
      00085E                       2329 00158$:
      00085E C3               [12] 2330 	clr	c
      00085F E5 32            [12] 2331 	mov	a,_box_PARM_5
      000861 9F               [12] 2332 	subb	a,r7
      000862 40 36            [24] 2333 	jc	00162$
      000864 EF               [12] 2334 	mov	a,r7
      000865 75 F0 08         [24] 2335 	mov	b,#0x08
      000868 A4               [48] 2336 	mul	ab
      000869 FD               [12] 2337 	mov	r5,a
      00086A AE F0            [24] 2338 	mov	r6,b
      00086C 24 01            [12] 2339 	add	a,#_display
      00086E FB               [12] 2340 	mov	r3,a
      00086F EE               [12] 2341 	mov	a,r6
      000870 34 00            [12] 2342 	addc	a,#(_display >> 8)
      000872 FC               [12] 2343 	mov	r4,a
      000873 E5 37            [12] 2344 	mov	a,_box_j_1_35
      000875 2B               [12] 2345 	add	a,r3
      000876 FB               [12] 2346 	mov	r3,a
      000877 E4               [12] 2347 	clr	a
      000878 3C               [12] 2348 	addc	a,r4
      000879 FC               [12] 2349 	mov	r4,a
      00087A ED               [12] 2350 	mov	a,r5
      00087B 24 01            [12] 2351 	add	a,#_display
      00087D FD               [12] 2352 	mov	r5,a
      00087E EE               [12] 2353 	mov	a,r6
      00087F 34 00            [12] 2354 	addc	a,#(_display >> 8)
      000881 FE               [12] 2355 	mov	r6,a
      000882 E5 37            [12] 2356 	mov	a,_box_j_1_35
      000884 2D               [12] 2357 	add	a,r5
      000885 F5 82            [12] 2358 	mov	dpl,a
      000887 E4               [12] 2359 	clr	a
      000888 3E               [12] 2360 	addc	a,r6
      000889 F5 83            [12] 2361 	mov	dph,a
      00088B E0               [24] 2362 	movx	a,@dptr
      00088C FE               [12] 2363 	mov	r6,a
      00088D E5 38            [12] 2364 	mov	a,_box_t_1_35
      00088F 52 06            [12] 2365 	anl	ar6,a
      000891 8B 82            [24] 2366 	mov	dpl,r3
      000893 8C 83            [24] 2367 	mov	dph,r4
      000895 EE               [12] 2368 	mov	a,r6
      000896 F0               [24] 2369 	movx	@dptr,a
      000897 0F               [12] 2370 	inc	r7
      000898 80 C4            [24] 2371 	sjmp	00158$
      00089A                       2372 00162$:
                                   2373 ;	888n.c:268: for (j=z1;j<=z2;j+=(z2-z1)) {
      00089A E5 33            [12] 2374 	mov	a,_box_PARM_6
      00089C C3               [12] 2375 	clr	c
      00089D 95 30            [12] 2376 	subb	a,_box_PARM_3
      00089F 25 37            [12] 2377 	add	a,_box_j_1_35
      0008A1 F5 37            [12] 2378 	mov	_box_j_1_35,a
      0008A3 80 AE            [24] 2379 	sjmp	00161$
      0008A5                       2380 00121$:
                                   2381 ;	888n.c:271: for (j=y1;j<=y2;j+=(y2-y1)) {
      0008A5 85 2F 37         [24] 2382 	mov	_box_j_1_35,_box_PARM_2
      0008A8                       2383 00167$:
      0008A8 C3               [12] 2384 	clr	c
      0008A9 E5 32            [12] 2385 	mov	a,_box_PARM_5
      0008AB 95 37            [12] 2386 	subb	a,_box_j_1_35
      0008AD 40 49            [24] 2387 	jc	00169$
                                   2388 ;	888n.c:272: for (i=z1;i<=z2;i++) display[j][i]&=t;
      0008AF AF 30            [24] 2389 	mov	r7,_box_PARM_3
      0008B1 E5 37            [12] 2390 	mov	a,_box_j_1_35
      0008B3 75 F0 08         [24] 2391 	mov	b,#0x08
      0008B6 A4               [48] 2392 	mul	ab
      0008B7 FD               [12] 2393 	mov	r5,a
      0008B8 AE F0            [24] 2394 	mov	r6,b
      0008BA                       2395 00164$:
      0008BA C3               [12] 2396 	clr	c
      0008BB E5 33            [12] 2397 	mov	a,_box_PARM_6
      0008BD 9F               [12] 2398 	subb	a,r7
      0008BE 40 2D            [24] 2399 	jc	00168$
      0008C0 ED               [12] 2400 	mov	a,r5
      0008C1 24 01            [12] 2401 	add	a,#_display
      0008C3 FB               [12] 2402 	mov	r3,a
      0008C4 EE               [12] 2403 	mov	a,r6
      0008C5 34 00            [12] 2404 	addc	a,#(_display >> 8)
      0008C7 FC               [12] 2405 	mov	r4,a
      0008C8 EF               [12] 2406 	mov	a,r7
      0008C9 2B               [12] 2407 	add	a,r3
      0008CA FB               [12] 2408 	mov	r3,a
      0008CB E4               [12] 2409 	clr	a
      0008CC 3C               [12] 2410 	addc	a,r4
      0008CD FC               [12] 2411 	mov	r4,a
      0008CE ED               [12] 2412 	mov	a,r5
      0008CF 24 01            [12] 2413 	add	a,#_display
      0008D1 F9               [12] 2414 	mov	r1,a
      0008D2 EE               [12] 2415 	mov	a,r6
      0008D3 34 00            [12] 2416 	addc	a,#(_display >> 8)
      0008D5 FA               [12] 2417 	mov	r2,a
      0008D6 EF               [12] 2418 	mov	a,r7
      0008D7 29               [12] 2419 	add	a,r1
      0008D8 F5 82            [12] 2420 	mov	dpl,a
      0008DA E4               [12] 2421 	clr	a
      0008DB 3A               [12] 2422 	addc	a,r2
      0008DC F5 83            [12] 2423 	mov	dph,a
      0008DE E0               [24] 2424 	movx	a,@dptr
      0008DF FA               [12] 2425 	mov	r2,a
      0008E0 E5 38            [12] 2426 	mov	a,_box_t_1_35
      0008E2 52 02            [12] 2427 	anl	ar2,a
      0008E4 8B 82            [24] 2428 	mov	dpl,r3
      0008E6 8C 83            [24] 2429 	mov	dph,r4
      0008E8 EA               [12] 2430 	mov	a,r2
      0008E9 F0               [24] 2431 	movx	@dptr,a
      0008EA 0F               [12] 2432 	inc	r7
      0008EB 80 CD            [24] 2433 	sjmp	00164$
      0008ED                       2434 00168$:
                                   2435 ;	888n.c:271: for (j=y1;j<=y2;j+=(y2-y1)) {
      0008ED E5 32            [12] 2436 	mov	a,_box_PARM_5
      0008EF C3               [12] 2437 	clr	c
      0008F0 95 2F            [12] 2438 	subb	a,_box_PARM_2
      0008F2 25 37            [12] 2439 	add	a,_box_j_1_35
      0008F4 F5 37            [12] 2440 	mov	_box_j_1_35,a
      0008F6 80 B0            [24] 2441 	sjmp	00167$
      0008F8                       2442 00169$:
      0008F8 22               [24] 2443 	ret
                                   2444 ;------------------------------------------------------------
                                   2445 ;Allocation info for local variables in function 'box_apeak_xy'
                                   2446 ;------------------------------------------------------------
                                   2447 ;y1                        Allocated with name '_box_apeak_xy_PARM_2'
                                   2448 ;z1                        Allocated with name '_box_apeak_xy_PARM_3'
                                   2449 ;x2                        Allocated with name '_box_apeak_xy_PARM_4'
                                   2450 ;y2                        Allocated with name '_box_apeak_xy_PARM_5'
                                   2451 ;z2                        Allocated with name '_box_apeak_xy_PARM_6'
                                   2452 ;fill                      Allocated with name '_box_apeak_xy_PARM_7'
                                   2453 ;le                        Allocated with name '_box_apeak_xy_PARM_8'
                                   2454 ;x1                        Allocated to registers r7 
                                   2455 ;i                         Allocated to registers 
                                   2456 ;------------------------------------------------------------
                                   2457 ;	888n.c:278: void box_apeak_xy(uchar x1, uchar y1, uchar z1, uchar x2, uchar y2, uchar z2, uchar fill, uchar le)
                                   2458 ;	-----------------------------------------
                                   2459 ;	 function box_apeak_xy
                                   2460 ;	-----------------------------------------
      0008F9                       2461 _box_apeak_xy:
      0008F9 AF 82            [24] 2462 	mov	r7,dpl
                                   2463 ;	888n.c:282: max(&z1, &z2);
      0008FB 75 08 3D         [24] 2464 	mov	_max_PARM_2,#_box_apeak_xy_PARM_6
      0008FE 75 09 00         [24] 2465 	mov	(_max_PARM_2 + 1),#0x00
      000901 75 0A 40         [24] 2466 	mov	(_max_PARM_2 + 2),#0x40
      000904 90 00 3A         [24] 2467 	mov	dptr,#_box_apeak_xy_PARM_3
      000907 75 F0 40         [24] 2468 	mov	b,#0x40
      00090A C0 07            [24] 2469 	push	ar7
      00090C 12 00 F2         [24] 2470 	lcall	_max
      00090F D0 07            [24] 2471 	pop	ar7
                                   2472 ;	888n.c:283: if (fill) {
      000911 E5 3E            [12] 2473 	mov	a,_box_apeak_xy_PARM_7
      000913 60 29            [24] 2474 	jz	00103$
                                   2475 ;	888n.c:284: for (i=z1;i<=z2;i++) line (x1, y1, i, x2, y2, i, le);
      000915 AE 3A            [24] 2476 	mov	r6,_box_apeak_xy_PARM_3
      000917                       2477 00106$:
      000917 C3               [12] 2478 	clr	c
      000918 E5 3D            [12] 2479 	mov	a,_box_apeak_xy_PARM_6
      00091A 9E               [12] 2480 	subb	a,r6
      00091B 50 01            [24] 2481 	jnc	00121$
      00091D 22               [24] 2482 	ret
      00091E                       2483 00121$:
      00091E 85 39 26         [24] 2484 	mov	_line_PARM_2,_box_apeak_xy_PARM_2
      000921 8E 27            [24] 2485 	mov	_line_PARM_3,r6
      000923 85 3B 28         [24] 2486 	mov	_line_PARM_4,_box_apeak_xy_PARM_4
      000926 85 3C 29         [24] 2487 	mov	_line_PARM_5,_box_apeak_xy_PARM_5
      000929 8E 2A            [24] 2488 	mov	_line_PARM_6,r6
      00092B 85 3F 2B         [24] 2489 	mov	_line_PARM_7,_box_apeak_xy_PARM_8
      00092E 8F 82            [24] 2490 	mov	dpl,r7
      000930 C0 07            [24] 2491 	push	ar7
      000932 C0 06            [24] 2492 	push	ar6
      000934 12 03 1D         [24] 2493 	lcall	_line
      000937 D0 06            [24] 2494 	pop	ar6
      000939 D0 07            [24] 2495 	pop	ar7
      00093B 0E               [12] 2496 	inc	r6
      00093C 80 D9            [24] 2497 	sjmp	00106$
      00093E                       2498 00103$:
                                   2499 ;	888n.c:286: line (x1,y1,z1,x2,y2,z1,le);
      00093E 85 39 26         [24] 2500 	mov	_line_PARM_2,_box_apeak_xy_PARM_2
      000941 85 3A 27         [24] 2501 	mov	_line_PARM_3,_box_apeak_xy_PARM_3
      000944 85 3B 28         [24] 2502 	mov	_line_PARM_4,_box_apeak_xy_PARM_4
      000947 85 3C 29         [24] 2503 	mov	_line_PARM_5,_box_apeak_xy_PARM_5
      00094A 85 3A 2A         [24] 2504 	mov	_line_PARM_6,_box_apeak_xy_PARM_3
      00094D 85 3F 2B         [24] 2505 	mov	_line_PARM_7,_box_apeak_xy_PARM_8
      000950 8F 82            [24] 2506 	mov	dpl,r7
      000952 C0 07            [24] 2507 	push	ar7
      000954 12 03 1D         [24] 2508 	lcall	_line
      000957 D0 07            [24] 2509 	pop	ar7
                                   2510 ;	888n.c:287: line (x1,y1,z2,x2,y2,z2,le);
      000959 85 39 26         [24] 2511 	mov	_line_PARM_2,_box_apeak_xy_PARM_2
      00095C 85 3D 27         [24] 2512 	mov	_line_PARM_3,_box_apeak_xy_PARM_6
      00095F 85 3B 28         [24] 2513 	mov	_line_PARM_4,_box_apeak_xy_PARM_4
      000962 85 3C 29         [24] 2514 	mov	_line_PARM_5,_box_apeak_xy_PARM_5
      000965 85 3D 2A         [24] 2515 	mov	_line_PARM_6,_box_apeak_xy_PARM_6
      000968 85 3F 2B         [24] 2516 	mov	_line_PARM_7,_box_apeak_xy_PARM_8
      00096B 8F 82            [24] 2517 	mov	dpl,r7
      00096D C0 07            [24] 2518 	push	ar7
      00096F 12 03 1D         [24] 2519 	lcall	_line
                                   2520 ;	888n.c:288: line (x2,y2,z1,x2,y2,z2,le);
      000972 85 3C 26         [24] 2521 	mov	_line_PARM_2,_box_apeak_xy_PARM_5
      000975 85 3A 27         [24] 2522 	mov	_line_PARM_3,_box_apeak_xy_PARM_3
      000978 85 3B 28         [24] 2523 	mov	_line_PARM_4,_box_apeak_xy_PARM_4
      00097B 85 3C 29         [24] 2524 	mov	_line_PARM_5,_box_apeak_xy_PARM_5
      00097E 85 3D 2A         [24] 2525 	mov	_line_PARM_6,_box_apeak_xy_PARM_6
      000981 85 3F 2B         [24] 2526 	mov	_line_PARM_7,_box_apeak_xy_PARM_8
      000984 85 3B 82         [24] 2527 	mov	dpl,_box_apeak_xy_PARM_4
      000987 12 03 1D         [24] 2528 	lcall	_line
      00098A D0 07            [24] 2529 	pop	ar7
                                   2530 ;	888n.c:289: line (x1,y1,z1,x1,y1,z2,le);
      00098C 85 39 26         [24] 2531 	mov	_line_PARM_2,_box_apeak_xy_PARM_2
      00098F 85 3A 27         [24] 2532 	mov	_line_PARM_3,_box_apeak_xy_PARM_3
      000992 8F 28            [24] 2533 	mov	_line_PARM_4,r7
      000994 85 39 29         [24] 2534 	mov	_line_PARM_5,_box_apeak_xy_PARM_2
      000997 85 3D 2A         [24] 2535 	mov	_line_PARM_6,_box_apeak_xy_PARM_6
      00099A 85 3F 2B         [24] 2536 	mov	_line_PARM_7,_box_apeak_xy_PARM_8
      00099D 8F 82            [24] 2537 	mov	dpl,r7
      00099F 02 03 1D         [24] 2538 	ljmp	_line
                                   2539 ;------------------------------------------------------------
                                   2540 ;Allocation info for local variables in function 'poke'
                                   2541 ;------------------------------------------------------------
                                   2542 ;x                         Allocated with name '_poke_PARM_2'
                                   2543 ;y                         Allocated with name '_poke_PARM_3'
                                   2544 ;n                         Allocated to registers r7 
                                   2545 ;i                         Allocated to registers r6 
                                   2546 ;------------------------------------------------------------
                                   2547 ;	888n.c:293: void poke(uchar n, uchar x, uchar y)
                                   2548 ;	-----------------------------------------
                                   2549 ;	 function poke
                                   2550 ;	-----------------------------------------
      0009A2                       2551 _poke:
      0009A2 AF 82            [24] 2552 	mov	r7,dpl
                                   2553 ;	888n.c:297: for (i=0; i<8; i++) point(x, y, i, judgebit(n,i));
      0009A4 7E 00            [12] 2554 	mov	r6,#0x00
      0009A6                       2555 00102$:
      0009A6 8E 08            [24] 2556 	mov	_judgebit_PARM_2,r6
      0009A8 8F 82            [24] 2557 	mov	dpl,r7
      0009AA C0 07            [24] 2558 	push	ar7
      0009AC C0 06            [24] 2559 	push	ar6
      0009AE 12 00 AF         [24] 2560 	lcall	_judgebit
      0009B1 85 82 0A         [24] 2561 	mov	_point_PARM_4,dpl
      0009B4 D0 06            [24] 2562 	pop	ar6
      0009B6 85 41 08         [24] 2563 	mov	_point_PARM_2,_poke_PARM_3
      0009B9 8E 09            [24] 2564 	mov	_point_PARM_3,r6
      0009BB 85 40 82         [24] 2565 	mov	dpl,_poke_PARM_2
      0009BE C0 06            [24] 2566 	push	ar6
      0009C0 12 02 21         [24] 2567 	lcall	_point
      0009C3 D0 06            [24] 2568 	pop	ar6
      0009C5 D0 07            [24] 2569 	pop	ar7
      0009C7 0E               [12] 2570 	inc	r6
      0009C8 BE 08 00         [24] 2571 	cjne	r6,#0x08,00110$
      0009CB                       2572 00110$:
      0009CB 40 D9            [24] 2573 	jc	00102$
      0009CD 22               [24] 2574 	ret
                                   2575 ;------------------------------------------------------------
                                   2576 ;Allocation info for local variables in function 'boxtola'
                                   2577 ;------------------------------------------------------------
                                   2578 ;n                         Allocated with name '_boxtola_PARM_2'
                                   2579 ;i                         Allocated to registers r7 
                                   2580 ;------------------------------------------------------------
                                   2581 ;	888n.c:300: void boxtola(char i,uchar n)
                                   2582 ;	-----------------------------------------
                                   2583 ;	 function boxtola
                                   2584 ;	-----------------------------------------
      0009CE                       2585 _boxtola:
                                   2586 ;	888n.c:302: if ((i>=0)&(i<8)) poke(n,0,7-i);
      0009CE E5 82            [12] 2587 	mov	a,dpl
      0009D0 FF               [12] 2588 	mov	r7,a
      0009D1 33               [12] 2589 	rlc	a
      0009D2 B3               [12] 2590 	cpl	c
      0009D3 92 00            [24] 2591 	mov	_boxtola_sloc0_1_0,c
      0009D5 C3               [12] 2592 	clr	c
      0009D6 EF               [12] 2593 	mov	a,r7
      0009D7 64 80            [12] 2594 	xrl	a,#0x80
      0009D9 94 88            [12] 2595 	subb	a,#0x88
      0009DB E4               [12] 2596 	clr	a
      0009DC 33               [12] 2597 	rlc	a
      0009DD FE               [12] 2598 	mov	r6,a
      0009DE A2 00            [12] 2599 	mov	c,_boxtola_sloc0_1_0
      0009E0 E4               [12] 2600 	clr	a
      0009E1 33               [12] 2601 	rlc	a
      0009E2 FD               [12] 2602 	mov	r5,a
      0009E3 EE               [12] 2603 	mov	a,r6
      0009E4 5D               [12] 2604 	anl	a,r5
      0009E5 60 13            [24] 2605 	jz	00102$
      0009E7 74 07            [12] 2606 	mov	a,#0x07
      0009E9 C3               [12] 2607 	clr	c
      0009EA 9F               [12] 2608 	subb	a,r7
      0009EB F5 41            [12] 2609 	mov	_poke_PARM_3,a
      0009ED 75 40 00         [24] 2610 	mov	_poke_PARM_2,#0x00
      0009F0 85 42 82         [24] 2611 	mov	dpl,_boxtola_PARM_2
      0009F3 C0 07            [24] 2612 	push	ar7
      0009F5 12 09 A2         [24] 2613 	lcall	_poke
      0009F8 D0 07            [24] 2614 	pop	ar7
      0009FA                       2615 00102$:
                                   2616 ;	888n.c:303: if ((i>=8)&(i<16)) poke(n,i-8,0);
      0009FA C3               [12] 2617 	clr	c
      0009FB EF               [12] 2618 	mov	a,r7
      0009FC 64 80            [12] 2619 	xrl	a,#0x80
      0009FE 94 88            [12] 2620 	subb	a,#0x88
      000A00 B3               [12] 2621 	cpl	c
      000A01 92 00            [24] 2622 	mov	_boxtola_sloc0_1_0,c
      000A03 C3               [12] 2623 	clr	c
      000A04 EF               [12] 2624 	mov	a,r7
      000A05 64 80            [12] 2625 	xrl	a,#0x80
      000A07 94 90            [12] 2626 	subb	a,#0x90
      000A09 E4               [12] 2627 	clr	a
      000A0A 33               [12] 2628 	rlc	a
      000A0B FE               [12] 2629 	mov	r6,a
      000A0C A2 00            [12] 2630 	mov	c,_boxtola_sloc0_1_0
      000A0E E4               [12] 2631 	clr	a
      000A0F 33               [12] 2632 	rlc	a
      000A10 FD               [12] 2633 	mov	r5,a
      000A11 EE               [12] 2634 	mov	a,r6
      000A12 5D               [12] 2635 	anl	a,r5
      000A13 60 12            [24] 2636 	jz	00104$
      000A15 EF               [12] 2637 	mov	a,r7
      000A16 24 F8            [12] 2638 	add	a,#0xf8
      000A18 F5 40            [12] 2639 	mov	_poke_PARM_2,a
      000A1A 75 41 00         [24] 2640 	mov	_poke_PARM_3,#0x00
      000A1D 85 42 82         [24] 2641 	mov	dpl,_boxtola_PARM_2
      000A20 C0 07            [24] 2642 	push	ar7
      000A22 12 09 A2         [24] 2643 	lcall	_poke
      000A25 D0 07            [24] 2644 	pop	ar7
      000A27                       2645 00104$:
                                   2646 ;	888n.c:304: if ((i>=16)&(i<24)) poke(n,7,i-16);
      000A27 C3               [12] 2647 	clr	c
      000A28 EF               [12] 2648 	mov	a,r7
      000A29 64 80            [12] 2649 	xrl	a,#0x80
      000A2B 94 90            [12] 2650 	subb	a,#0x90
      000A2D B3               [12] 2651 	cpl	c
      000A2E 92 00            [24] 2652 	mov	_boxtola_sloc0_1_0,c
      000A30 C3               [12] 2653 	clr	c
      000A31 EF               [12] 2654 	mov	a,r7
      000A32 64 80            [12] 2655 	xrl	a,#0x80
      000A34 94 98            [12] 2656 	subb	a,#0x98
      000A36 E4               [12] 2657 	clr	a
      000A37 33               [12] 2658 	rlc	a
      000A38 FE               [12] 2659 	mov	r6,a
      000A39 A2 00            [12] 2660 	mov	c,_boxtola_sloc0_1_0
      000A3B E4               [12] 2661 	clr	a
      000A3C 33               [12] 2662 	rlc	a
      000A3D FD               [12] 2663 	mov	r5,a
      000A3E EE               [12] 2664 	mov	a,r6
      000A3F 5D               [12] 2665 	anl	a,r5
      000A40 60 0E            [24] 2666 	jz	00107$
      000A42 EF               [12] 2667 	mov	a,r7
      000A43 24 F0            [12] 2668 	add	a,#0xf0
      000A45 F5 41            [12] 2669 	mov	_poke_PARM_3,a
      000A47 75 40 07         [24] 2670 	mov	_poke_PARM_2,#0x07
      000A4A 85 42 82         [24] 2671 	mov	dpl,_boxtola_PARM_2
      000A4D 02 09 A2         [24] 2672 	ljmp	_poke
      000A50                       2673 00107$:
      000A50 22               [24] 2674 	ret
                                   2675 ;------------------------------------------------------------
                                   2676 ;Allocation info for local variables in function 'rolldisplay'
                                   2677 ;------------------------------------------------------------
                                   2678 ;speed                     Allocated to registers r6 r7 
                                   2679 ;j                         Allocated to registers r4 
                                   2680 ;i                         Allocated to registers r5 
                                   2681 ;a                         Allocated to registers r3 
                                   2682 ;------------------------------------------------------------
                                   2683 ;	888n.c:307: void rolldisplay(uint speed)
                                   2684 ;	-----------------------------------------
                                   2685 ;	 function rolldisplay
                                   2686 ;	-----------------------------------------
      000A51                       2687 _rolldisplay:
      000A51 AE 82            [24] 2688 	mov	r6,dpl
      000A53 AF 83            [24] 2689 	mov	r7,dph
                                   2690 ;	888n.c:312: for (i=23;i>-40;i--) {
      000A55 7D 17            [12] 2691 	mov	r5,#0x17
                                   2692 ;	888n.c:313: for (j=0;j<40;j++) {
      000A57                       2693 00114$:
      000A57 7C 00            [12] 2694 	mov	r4,#0x00
      000A59                       2695 00106$:
                                   2696 ;	888n.c:314: a=i+j;
      000A59 8C 03            [24] 2697 	mov	ar3,r4
      000A5B EB               [12] 2698 	mov	a,r3
      000A5C 2D               [12] 2699 	add	a,r5
                                   2700 ;	888n.c:315: if ((a>=0) && (a<24)) boxtola(a, table_id[j]);
      000A5D FB               [12] 2701 	mov	r3,a
      000A5E 20 E7 24         [24] 2702 	jb	acc.7,00107$
      000A61 C3               [12] 2703 	clr	c
      000A62 EB               [12] 2704 	mov	a,r3
      000A63 64 80            [12] 2705 	xrl	a,#0x80
      000A65 94 98            [12] 2706 	subb	a,#0x98
      000A67 50 1C            [24] 2707 	jnc	00107$
      000A69 EC               [12] 2708 	mov	a,r4
      000A6A 90 2A 9F         [24] 2709 	mov	dptr,#_table_id
      000A6D 93               [24] 2710 	movc	a,@a+dptr
      000A6E F5 42            [12] 2711 	mov	_boxtola_PARM_2,a
      000A70 8B 82            [24] 2712 	mov	dpl,r3
      000A72 C0 07            [24] 2713 	push	ar7
      000A74 C0 06            [24] 2714 	push	ar6
      000A76 C0 05            [24] 2715 	push	ar5
      000A78 C0 04            [24] 2716 	push	ar4
      000A7A 12 09 CE         [24] 2717 	lcall	_boxtola
      000A7D D0 04            [24] 2718 	pop	ar4
      000A7F D0 05            [24] 2719 	pop	ar5
      000A81 D0 06            [24] 2720 	pop	ar6
      000A83 D0 07            [24] 2721 	pop	ar7
      000A85                       2722 00107$:
                                   2723 ;	888n.c:313: for (j=0;j<40;j++) {
      000A85 0C               [12] 2724 	inc	r4
      000A86 BC 28 00         [24] 2725 	cjne	r4,#0x28,00131$
      000A89                       2726 00131$:
      000A89 40 CE            [24] 2727 	jc	00106$
                                   2728 ;	888n.c:318: delay(speed);
      000A8B 8E 82            [24] 2729 	mov	dpl,r6
      000A8D 8F 83            [24] 2730 	mov	dph,r7
      000A8F C0 07            [24] 2731 	push	ar7
      000A91 C0 06            [24] 2732 	push	ar6
      000A93 C0 05            [24] 2733 	push	ar5
      000A95 12 00 90         [24] 2734 	lcall	_delay
      000A98 D0 05            [24] 2735 	pop	ar5
      000A9A D0 06            [24] 2736 	pop	ar6
      000A9C D0 07            [24] 2737 	pop	ar7
                                   2738 ;	888n.c:312: for (i=23;i>-40;i--) {
      000A9E 1D               [12] 2739 	dec	r5
      000A9F C3               [12] 2740 	clr	c
      000AA0 74 58            [12] 2741 	mov	a,#(0xd8 ^ 0x80)
      000AA2 8D F0            [24] 2742 	mov	b,r5
      000AA4 63 F0 80         [24] 2743 	xrl	b,#0x80
      000AA7 95 F0            [12] 2744 	subb	a,b
      000AA9 40 AC            [24] 2745 	jc	00114$
      000AAB 22               [24] 2746 	ret
                                   2747 ;------------------------------------------------------------
                                   2748 ;Allocation info for local variables in function 'roll_apeak_yz'
                                   2749 ;------------------------------------------------------------
                                   2750 ;speed                     Allocated with name '_roll_apeak_yz_PARM_2'
                                   2751 ;n                         Allocated to registers r7 
                                   2752 ;i                         Allocated to registers r7 
                                   2753 ;------------------------------------------------------------
                                   2754 ;	888n.c:322: void roll_apeak_yz(uchar n,uint speed)
                                   2755 ;	-----------------------------------------
                                   2756 ;	 function roll_apeak_yz
                                   2757 ;	-----------------------------------------
      000AAC                       2758 _roll_apeak_yz:
                                   2759 ;	888n.c:326: switch(n) {
      000AAC E5 82            [12] 2760 	mov	a,dpl
      000AAE FF               [12] 2761 	mov	r7,a
      000AAF 24 FC            [12] 2762 	add	a,#0xff - 0x03
      000AB1 50 01            [24] 2763 	jnc	00147$
      000AB3 22               [24] 2764 	ret
      000AB4                       2765 00147$:
      000AB4 EF               [12] 2766 	mov	a,r7
      000AB5 2F               [12] 2767 	add	a,r7
      000AB6 2F               [12] 2768 	add	a,r7
      000AB7 90 0A BB         [24] 2769 	mov	dptr,#00148$
      000ABA 73               [24] 2770 	jmp	@a+dptr
      000ABB                       2771 00148$:
      000ABB 02 0B 79         [24] 2772 	ljmp	00107$
      000ABE 02 0A C7         [24] 2773 	ljmp	00101$
      000AC1 02 0B 05         [24] 2774 	ljmp	00103$
      000AC4 02 0B 3F         [24] 2775 	ljmp	00105$
                                   2776 ;	888n.c:327: case 1:
      000AC7                       2777 00101$:
                                   2778 ;	888n.c:328: for (i=0;i<7;i++) {
      000AC7 7F 00            [12] 2779 	mov	r7,#0x00
      000AC9                       2780 00111$:
                                   2781 ;	888n.c:329: display[i][7]=0;
      000AC9 EF               [12] 2782 	mov	a,r7
      000ACA 75 F0 08         [24] 2783 	mov	b,#0x08
      000ACD A4               [48] 2784 	mul	ab
      000ACE 24 01            [12] 2785 	add	a,#_display
      000AD0 FD               [12] 2786 	mov	r5,a
      000AD1 74 00            [12] 2787 	mov	a,#(_display >> 8)
      000AD3 35 F0            [12] 2788 	addc	a,b
      000AD5 FE               [12] 2789 	mov	r6,a
      000AD6 74 07            [12] 2790 	mov	a,#0x07
      000AD8 2D               [12] 2791 	add	a,r5
      000AD9 F5 82            [12] 2792 	mov	dpl,a
      000ADB E4               [12] 2793 	clr	a
      000ADC 3E               [12] 2794 	addc	a,r6
      000ADD F5 83            [12] 2795 	mov	dph,a
      000ADF E4               [12] 2796 	clr	a
      000AE0 F0               [24] 2797 	movx	@dptr,a
                                   2798 ;	888n.c:330: display[7][6-i]=255;
      000AE1 74 06            [12] 2799 	mov	a,#0x06
      000AE3 C3               [12] 2800 	clr	c
      000AE4 9F               [12] 2801 	subb	a,r7
      000AE5 24 39            [12] 2802 	add	a,#(_display + 0x0038)
      000AE7 F5 82            [12] 2803 	mov	dpl,a
      000AE9 E4               [12] 2804 	clr	a
      000AEA 34 00            [12] 2805 	addc	a,#((_display + 0x0038) >> 8)
      000AEC F5 83            [12] 2806 	mov	dph,a
      000AEE 74 FF            [12] 2807 	mov	a,#0xff
      000AF0 F0               [24] 2808 	movx	@dptr,a
                                   2809 ;	888n.c:331: delay(speed);
      000AF1 85 43 82         [24] 2810 	mov	dpl,_roll_apeak_yz_PARM_2
      000AF4 85 44 83         [24] 2811 	mov	dph,(_roll_apeak_yz_PARM_2 + 1)
      000AF7 C0 07            [24] 2812 	push	ar7
      000AF9 12 00 90         [24] 2813 	lcall	_delay
      000AFC D0 07            [24] 2814 	pop	ar7
                                   2815 ;	888n.c:328: for (i=0;i<7;i++) {
      000AFE 0F               [12] 2816 	inc	r7
      000AFF BF 07 00         [24] 2817 	cjne	r7,#0x07,00149$
      000B02                       2818 00149$:
      000B02 40 C5            [24] 2819 	jc	00111$
                                   2820 ;	888n.c:333: break;
      000B04 22               [24] 2821 	ret
                                   2822 ;	888n.c:334: case 2:
      000B05                       2823 00103$:
                                   2824 ;	888n.c:335: for (i=0;i<7;i++) {
      000B05 7F 00            [12] 2825 	mov	r7,#0x00
      000B07                       2826 00113$:
                                   2827 ;	888n.c:336: display[7][7-i]=0;
      000B07 74 07            [12] 2828 	mov	a,#0x07
      000B09 C3               [12] 2829 	clr	c
      000B0A 9F               [12] 2830 	subb	a,r7
      000B0B 24 39            [12] 2831 	add	a,#(_display + 0x0038)
      000B0D F5 82            [12] 2832 	mov	dpl,a
      000B0F E4               [12] 2833 	clr	a
      000B10 34 00            [12] 2834 	addc	a,#((_display + 0x0038) >> 8)
      000B12 F5 83            [12] 2835 	mov	dph,a
      000B14 E4               [12] 2836 	clr	a
      000B15 F0               [24] 2837 	movx	@dptr,a
                                   2838 ;	888n.c:337: display[6-i][0]=255;
      000B16 74 06            [12] 2839 	mov	a,#0x06
      000B18 C3               [12] 2840 	clr	c
      000B19 9F               [12] 2841 	subb	a,r7
      000B1A 75 F0 08         [24] 2842 	mov	b,#0x08
      000B1D A4               [48] 2843 	mul	ab
      000B1E 24 01            [12] 2844 	add	a,#_display
      000B20 F5 82            [12] 2845 	mov	dpl,a
      000B22 74 00            [12] 2846 	mov	a,#(_display >> 8)
      000B24 35 F0            [12] 2847 	addc	a,b
      000B26 F5 83            [12] 2848 	mov	dph,a
      000B28 74 FF            [12] 2849 	mov	a,#0xff
      000B2A F0               [24] 2850 	movx	@dptr,a
                                   2851 ;	888n.c:338: delay(speed);
      000B2B 85 43 82         [24] 2852 	mov	dpl,_roll_apeak_yz_PARM_2
      000B2E 85 44 83         [24] 2853 	mov	dph,(_roll_apeak_yz_PARM_2 + 1)
      000B31 C0 07            [24] 2854 	push	ar7
      000B33 12 00 90         [24] 2855 	lcall	_delay
      000B36 D0 07            [24] 2856 	pop	ar7
                                   2857 ;	888n.c:335: for (i=0;i<7;i++) {
      000B38 0F               [12] 2858 	inc	r7
      000B39 BF 07 00         [24] 2859 	cjne	r7,#0x07,00151$
      000B3C                       2860 00151$:
      000B3C 40 C9            [24] 2861 	jc	00113$
                                   2862 ;	888n.c:340: break;
      000B3E 22               [24] 2863 	ret
                                   2864 ;	888n.c:341: case 3:
      000B3F                       2865 00105$:
                                   2866 ;	888n.c:342: for (i=0;i<7;i++) {
      000B3F 7F 00            [12] 2867 	mov	r7,#0x00
      000B41                       2868 00115$:
                                   2869 ;	888n.c:343: display[7-i][0]=0;
      000B41 74 07            [12] 2870 	mov	a,#0x07
      000B43 C3               [12] 2871 	clr	c
      000B44 9F               [12] 2872 	subb	a,r7
      000B45 75 F0 08         [24] 2873 	mov	b,#0x08
      000B48 A4               [48] 2874 	mul	ab
      000B49 24 01            [12] 2875 	add	a,#_display
      000B4B F5 82            [12] 2876 	mov	dpl,a
      000B4D 74 00            [12] 2877 	mov	a,#(_display >> 8)
      000B4F 35 F0            [12] 2878 	addc	a,b
      000B51 F5 83            [12] 2879 	mov	dph,a
      000B53 E4               [12] 2880 	clr	a
      000B54 F0               [24] 2881 	movx	@dptr,a
                                   2882 ;	888n.c:344: display[0][i+1]=255;
      000B55 EF               [12] 2883 	mov	a,r7
      000B56 04               [12] 2884 	inc	a
      000B57 FE               [12] 2885 	mov	r6,a
      000B58 24 01            [12] 2886 	add	a,#_display
      000B5A F5 82            [12] 2887 	mov	dpl,a
      000B5C E4               [12] 2888 	clr	a
      000B5D 34 00            [12] 2889 	addc	a,#(_display >> 8)
      000B5F F5 83            [12] 2890 	mov	dph,a
      000B61 74 FF            [12] 2891 	mov	a,#0xff
      000B63 F0               [24] 2892 	movx	@dptr,a
                                   2893 ;	888n.c:345: delay(speed);
      000B64 85 43 82         [24] 2894 	mov	dpl,_roll_apeak_yz_PARM_2
      000B67 85 44 83         [24] 2895 	mov	dph,(_roll_apeak_yz_PARM_2 + 1)
      000B6A C0 06            [24] 2896 	push	ar6
      000B6C 12 00 90         [24] 2897 	lcall	_delay
      000B6F D0 06            [24] 2898 	pop	ar6
                                   2899 ;	888n.c:342: for (i=0;i<7;i++) {
      000B71 8E 07            [24] 2900 	mov	ar7,r6
      000B73 BF 07 00         [24] 2901 	cjne	r7,#0x07,00153$
      000B76                       2902 00153$:
      000B76 40 C9            [24] 2903 	jc	00115$
                                   2904 ;	888n.c:347: break;
                                   2905 ;	888n.c:348: case 0:
      000B78 22               [24] 2906 	ret
      000B79                       2907 00107$:
                                   2908 ;	888n.c:349: for (i=0;i<7;i++) {
      000B79 7F 00            [12] 2909 	mov	r7,#0x00
      000B7B                       2910 00117$:
                                   2911 ;	888n.c:350: display[0][i]=0;
      000B7B EF               [12] 2912 	mov	a,r7
      000B7C 24 01            [12] 2913 	add	a,#_display
      000B7E F5 82            [12] 2914 	mov	dpl,a
      000B80 E4               [12] 2915 	clr	a
      000B81 34 00            [12] 2916 	addc	a,#(_display >> 8)
      000B83 F5 83            [12] 2917 	mov	dph,a
      000B85 E4               [12] 2918 	clr	a
      000B86 F0               [24] 2919 	movx	@dptr,a
                                   2920 ;	888n.c:351: display[i+1][7]=255;
      000B87 EF               [12] 2921 	mov	a,r7
      000B88 04               [12] 2922 	inc	a
      000B89 FE               [12] 2923 	mov	r6,a
      000B8A 75 F0 08         [24] 2924 	mov	b,#0x08
      000B8D A4               [48] 2925 	mul	ab
      000B8E 24 01            [12] 2926 	add	a,#_display
      000B90 FC               [12] 2927 	mov	r4,a
      000B91 74 00            [12] 2928 	mov	a,#(_display >> 8)
      000B93 35 F0            [12] 2929 	addc	a,b
      000B95 FD               [12] 2930 	mov	r5,a
      000B96 74 07            [12] 2931 	mov	a,#0x07
      000B98 2C               [12] 2932 	add	a,r4
      000B99 F5 82            [12] 2933 	mov	dpl,a
      000B9B E4               [12] 2934 	clr	a
      000B9C 3D               [12] 2935 	addc	a,r5
      000B9D F5 83            [12] 2936 	mov	dph,a
      000B9F 74 FF            [12] 2937 	mov	a,#0xff
      000BA1 F0               [24] 2938 	movx	@dptr,a
                                   2939 ;	888n.c:352: delay(speed);
      000BA2 85 43 82         [24] 2940 	mov	dpl,_roll_apeak_yz_PARM_2
      000BA5 85 44 83         [24] 2941 	mov	dph,(_roll_apeak_yz_PARM_2 + 1)
      000BA8 C0 06            [24] 2942 	push	ar6
      000BAA 12 00 90         [24] 2943 	lcall	_delay
      000BAD D0 06            [24] 2944 	pop	ar6
                                   2945 ;	888n.c:349: for (i=0;i<7;i++) {
      000BAF 8E 07            [24] 2946 	mov	ar7,r6
      000BB1 BF 07 00         [24] 2947 	cjne	r7,#0x07,00155$
      000BB4                       2948 00155$:
      000BB4 40 C5            [24] 2949 	jc	00117$
                                   2950 ;	888n.c:357: }
      000BB6 22               [24] 2951 	ret
                                   2952 ;------------------------------------------------------------
                                   2953 ;Allocation info for local variables in function 'roll_apeak_xy'
                                   2954 ;------------------------------------------------------------
                                   2955 ;speed                     Allocated with name '_roll_apeak_xy_PARM_2'
                                   2956 ;n                         Allocated to registers r7 
                                   2957 ;i                         Allocated to registers r7 
                                   2958 ;------------------------------------------------------------
                                   2959 ;	888n.c:360: void roll_apeak_xy(uchar n,uint speed)
                                   2960 ;	-----------------------------------------
                                   2961 ;	 function roll_apeak_xy
                                   2962 ;	-----------------------------------------
      000BB7                       2963 _roll_apeak_xy:
                                   2964 ;	888n.c:364: switch(n) {
      000BB7 E5 82            [12] 2965 	mov	a,dpl
      000BB9 FF               [12] 2966 	mov	r7,a
      000BBA 24 FC            [12] 2967 	add	a,#0xff - 0x03
      000BBC 50 01            [24] 2968 	jnc	00147$
      000BBE 22               [24] 2969 	ret
      000BBF                       2970 00147$:
      000BBF EF               [12] 2971 	mov	a,r7
      000BC0 2F               [12] 2972 	add	a,r7
      000BC1 2F               [12] 2973 	add	a,r7
      000BC2 90 0B C6         [24] 2974 	mov	dptr,#00148$
      000BC5 73               [24] 2975 	jmp	@a+dptr
      000BC6                       2976 00148$:
      000BC6 02 0C B7         [24] 2977 	ljmp	00107$
      000BC9 02 0B D2         [24] 2978 	ljmp	00101$
      000BCC 02 0C 1C         [24] 2979 	ljmp	00103$
      000BCF 02 0C 67         [24] 2980 	ljmp	00105$
                                   2981 ;	888n.c:365: case 1:
      000BD2                       2982 00101$:
                                   2983 ;	888n.c:366: for (i=0;i<7;i++) {
      000BD2 7F 00            [12] 2984 	mov	r7,#0x00
      000BD4                       2985 00111$:
                                   2986 ;	888n.c:367: line(0,i,0,0,i,7,0);
      000BD4 8F 26            [24] 2987 	mov	_line_PARM_2,r7
      000BD6 75 27 00         [24] 2988 	mov	_line_PARM_3,#0x00
      000BD9 75 28 00         [24] 2989 	mov	_line_PARM_4,#0x00
      000BDC 8F 29            [24] 2990 	mov	_line_PARM_5,r7
      000BDE 75 2A 07         [24] 2991 	mov	_line_PARM_6,#0x07
      000BE1 75 2B 00         [24] 2992 	mov	_line_PARM_7,#0x00
      000BE4 75 82 00         [24] 2993 	mov	dpl,#0x00
      000BE7 C0 07            [24] 2994 	push	ar7
      000BE9 12 03 1D         [24] 2995 	lcall	_line
      000BEC D0 07            [24] 2996 	pop	ar7
                                   2997 ;	888n.c:368: line(i+1,7,0,i+1,7,7,1);
      000BEE EF               [12] 2998 	mov	a,r7
      000BEF 04               [12] 2999 	inc	a
      000BF0 FE               [12] 3000 	mov	r6,a
      000BF1 75 26 07         [24] 3001 	mov	_line_PARM_2,#0x07
      000BF4 75 27 00         [24] 3002 	mov	_line_PARM_3,#0x00
      000BF7 8E 28            [24] 3003 	mov	_line_PARM_4,r6
      000BF9 75 29 07         [24] 3004 	mov	_line_PARM_5,#0x07
      000BFC 75 2A 07         [24] 3005 	mov	_line_PARM_6,#0x07
      000BFF 75 2B 01         [24] 3006 	mov	_line_PARM_7,#0x01
      000C02 8E 82            [24] 3007 	mov	dpl,r6
      000C04 C0 06            [24] 3008 	push	ar6
      000C06 12 03 1D         [24] 3009 	lcall	_line
                                   3010 ;	888n.c:369: delay(speed);
      000C09 85 45 82         [24] 3011 	mov	dpl,_roll_apeak_xy_PARM_2
      000C0C 85 46 83         [24] 3012 	mov	dph,(_roll_apeak_xy_PARM_2 + 1)
      000C0F 12 00 90         [24] 3013 	lcall	_delay
      000C12 D0 06            [24] 3014 	pop	ar6
                                   3015 ;	888n.c:366: for (i=0;i<7;i++) {
      000C14 8E 07            [24] 3016 	mov	ar7,r6
      000C16 BF 07 00         [24] 3017 	cjne	r7,#0x07,00149$
      000C19                       3018 00149$:
      000C19 40 B9            [24] 3019 	jc	00111$
                                   3020 ;	888n.c:371: break;
      000C1B 22               [24] 3021 	ret
                                   3022 ;	888n.c:372: case 2:
      000C1C                       3023 00103$:
                                   3024 ;	888n.c:373: for (i=0;i<7;i++) {
      000C1C 7E 00            [12] 3025 	mov	r6,#0x00
      000C1E                       3026 00113$:
                                   3027 ;	888n.c:374: line(i,7,0,i,7,7,0);
      000C1E 75 26 07         [24] 3028 	mov	_line_PARM_2,#0x07
      000C21 75 27 00         [24] 3029 	mov	_line_PARM_3,#0x00
      000C24 8E 28            [24] 3030 	mov	_line_PARM_4,r6
      000C26 75 29 07         [24] 3031 	mov	_line_PARM_5,#0x07
      000C29 75 2A 07         [24] 3032 	mov	_line_PARM_6,#0x07
      000C2C 75 2B 00         [24] 3033 	mov	_line_PARM_7,#0x00
      000C2F 8E 82            [24] 3034 	mov	dpl,r6
      000C31 C0 06            [24] 3035 	push	ar6
      000C33 12 03 1D         [24] 3036 	lcall	_line
      000C36 D0 06            [24] 3037 	pop	ar6
                                   3038 ;	888n.c:375: line(7,6-i,0,7,6-i,7,1);
      000C38 74 06            [12] 3039 	mov	a,#0x06
      000C3A C3               [12] 3040 	clr	c
      000C3B 9E               [12] 3041 	subb	a,r6
      000C3C FD               [12] 3042 	mov	r5,a
      000C3D 8D 26            [24] 3043 	mov	_line_PARM_2,r5
      000C3F 75 27 00         [24] 3044 	mov	_line_PARM_3,#0x00
      000C42 75 28 07         [24] 3045 	mov	_line_PARM_4,#0x07
      000C45 8D 29            [24] 3046 	mov	_line_PARM_5,r5
      000C47 75 2A 07         [24] 3047 	mov	_line_PARM_6,#0x07
      000C4A 75 2B 01         [24] 3048 	mov	_line_PARM_7,#0x01
      000C4D 75 82 07         [24] 3049 	mov	dpl,#0x07
      000C50 C0 06            [24] 3050 	push	ar6
      000C52 12 03 1D         [24] 3051 	lcall	_line
                                   3052 ;	888n.c:376: delay(speed);
      000C55 85 45 82         [24] 3053 	mov	dpl,_roll_apeak_xy_PARM_2
      000C58 85 46 83         [24] 3054 	mov	dph,(_roll_apeak_xy_PARM_2 + 1)
      000C5B 12 00 90         [24] 3055 	lcall	_delay
      000C5E D0 06            [24] 3056 	pop	ar6
                                   3057 ;	888n.c:373: for (i=0;i<7;i++) {
      000C60 0E               [12] 3058 	inc	r6
      000C61 BE 07 00         [24] 3059 	cjne	r6,#0x07,00151$
      000C64                       3060 00151$:
      000C64 40 B8            [24] 3061 	jc	00113$
                                   3062 ;	888n.c:378: break;
      000C66 22               [24] 3063 	ret
                                   3064 ;	888n.c:379: case 3:
      000C67                       3065 00105$:
                                   3066 ;	888n.c:380: for (i=0;i<7;i++) {
      000C67 7E 00            [12] 3067 	mov	r6,#0x00
      000C69                       3068 00115$:
                                   3069 ;	888n.c:381: line(7,7-i,0,7,7-i,7,0);
      000C69 74 07            [12] 3070 	mov	a,#0x07
      000C6B C3               [12] 3071 	clr	c
      000C6C 9E               [12] 3072 	subb	a,r6
      000C6D FD               [12] 3073 	mov	r5,a
      000C6E 8D 26            [24] 3074 	mov	_line_PARM_2,r5
      000C70 75 27 00         [24] 3075 	mov	_line_PARM_3,#0x00
      000C73 75 28 07         [24] 3076 	mov	_line_PARM_4,#0x07
      000C76 8D 29            [24] 3077 	mov	_line_PARM_5,r5
      000C78 75 2A 07         [24] 3078 	mov	_line_PARM_6,#0x07
      000C7B 75 2B 00         [24] 3079 	mov	_line_PARM_7,#0x00
      000C7E 75 82 07         [24] 3080 	mov	dpl,#0x07
      000C81 C0 06            [24] 3081 	push	ar6
      000C83 12 03 1D         [24] 3082 	lcall	_line
      000C86 D0 06            [24] 3083 	pop	ar6
                                   3084 ;	888n.c:382: line(6-i,0,0,6-i,0,7,1);
      000C88 74 06            [12] 3085 	mov	a,#0x06
      000C8A C3               [12] 3086 	clr	c
      000C8B 9E               [12] 3087 	subb	a,r6
      000C8C FD               [12] 3088 	mov	r5,a
      000C8D 75 26 00         [24] 3089 	mov	_line_PARM_2,#0x00
      000C90 75 27 00         [24] 3090 	mov	_line_PARM_3,#0x00
      000C93 8D 28            [24] 3091 	mov	_line_PARM_4,r5
      000C95 75 29 00         [24] 3092 	mov	_line_PARM_5,#0x00
      000C98 75 2A 07         [24] 3093 	mov	_line_PARM_6,#0x07
      000C9B 75 2B 01         [24] 3094 	mov	_line_PARM_7,#0x01
      000C9E 8D 82            [24] 3095 	mov	dpl,r5
      000CA0 C0 06            [24] 3096 	push	ar6
      000CA2 12 03 1D         [24] 3097 	lcall	_line
                                   3098 ;	888n.c:383: delay(speed);
      000CA5 85 45 82         [24] 3099 	mov	dpl,_roll_apeak_xy_PARM_2
      000CA8 85 46 83         [24] 3100 	mov	dph,(_roll_apeak_xy_PARM_2 + 1)
      000CAB 12 00 90         [24] 3101 	lcall	_delay
      000CAE D0 06            [24] 3102 	pop	ar6
                                   3103 ;	888n.c:380: for (i=0;i<7;i++) {
      000CB0 0E               [12] 3104 	inc	r6
      000CB1 BE 07 00         [24] 3105 	cjne	r6,#0x07,00153$
      000CB4                       3106 00153$:
      000CB4 40 B3            [24] 3107 	jc	00115$
                                   3108 ;	888n.c:385: break;
                                   3109 ;	888n.c:386: case 0:
      000CB6 22               [24] 3110 	ret
      000CB7                       3111 00107$:
                                   3112 ;	888n.c:387: for (i=0;i<7;i++) {
      000CB7 7F 00            [12] 3113 	mov	r7,#0x00
      000CB9                       3114 00117$:
                                   3115 ;	888n.c:388: line(7-i,0,0,7-i,0,7,0);
      000CB9 74 07            [12] 3116 	mov	a,#0x07
      000CBB C3               [12] 3117 	clr	c
      000CBC 9F               [12] 3118 	subb	a,r7
      000CBD FE               [12] 3119 	mov	r6,a
      000CBE 75 26 00         [24] 3120 	mov	_line_PARM_2,#0x00
      000CC1 75 27 00         [24] 3121 	mov	_line_PARM_3,#0x00
      000CC4 8E 28            [24] 3122 	mov	_line_PARM_4,r6
      000CC6 75 29 00         [24] 3123 	mov	_line_PARM_5,#0x00
      000CC9 75 2A 07         [24] 3124 	mov	_line_PARM_6,#0x07
      000CCC 75 2B 00         [24] 3125 	mov	_line_PARM_7,#0x00
      000CCF 8E 82            [24] 3126 	mov	dpl,r6
      000CD1 C0 07            [24] 3127 	push	ar7
      000CD3 12 03 1D         [24] 3128 	lcall	_line
      000CD6 D0 07            [24] 3129 	pop	ar7
                                   3130 ;	888n.c:389: line(0,i+1,0,0,i+1,7,1);
      000CD8 EF               [12] 3131 	mov	a,r7
      000CD9 04               [12] 3132 	inc	a
      000CDA FE               [12] 3133 	mov	r6,a
      000CDB 8E 26            [24] 3134 	mov	_line_PARM_2,r6
      000CDD 75 27 00         [24] 3135 	mov	_line_PARM_3,#0x00
      000CE0 75 28 00         [24] 3136 	mov	_line_PARM_4,#0x00
      000CE3 8E 29            [24] 3137 	mov	_line_PARM_5,r6
      000CE5 75 2A 07         [24] 3138 	mov	_line_PARM_6,#0x07
      000CE8 75 2B 01         [24] 3139 	mov	_line_PARM_7,#0x01
      000CEB 75 82 00         [24] 3140 	mov	dpl,#0x00
      000CEE C0 06            [24] 3141 	push	ar6
      000CF0 12 03 1D         [24] 3142 	lcall	_line
                                   3143 ;	888n.c:390: delay(speed);
      000CF3 85 45 82         [24] 3144 	mov	dpl,_roll_apeak_xy_PARM_2
      000CF6 85 46 83         [24] 3145 	mov	dph,(_roll_apeak_xy_PARM_2 + 1)
      000CF9 12 00 90         [24] 3146 	lcall	_delay
      000CFC D0 06            [24] 3147 	pop	ar6
                                   3148 ;	888n.c:387: for (i=0;i<7;i++) {
      000CFE 8E 07            [24] 3149 	mov	ar7,r6
      000D00 BF 07 00         [24] 3150 	cjne	r7,#0x07,00155$
      000D03                       3151 00155$:
      000D03 40 B4            [24] 3152 	jc	00117$
                                   3153 ;	888n.c:395: }
      000D05 22               [24] 3154 	ret
                                   3155 ;------------------------------------------------------------
                                   3156 ;Allocation info for local variables in function 'roll_3_xy'
                                   3157 ;------------------------------------------------------------
                                   3158 ;speed                     Allocated with name '_roll_3_xy_PARM_2'
                                   3159 ;n                         Allocated to registers r7 
                                   3160 ;i                         Allocated to registers r7 
                                   3161 ;------------------------------------------------------------
                                   3162 ;	888n.c:398: void roll_3_xy(uchar n,uint speed)
                                   3163 ;	-----------------------------------------
                                   3164 ;	 function roll_3_xy
                                   3165 ;	-----------------------------------------
      000D06                       3166 _roll_3_xy:
                                   3167 ;	888n.c:402: switch(n) {
      000D06 E5 82            [12] 3168 	mov	a,dpl
      000D08 FF               [12] 3169 	mov	r7,a
      000D09 24 FC            [12] 3170 	add	a,#0xff - 0x03
      000D0B 50 01            [24] 3171 	jnc	00169$
      000D0D 22               [24] 3172 	ret
      000D0E                       3173 00169$:
      000D0E EF               [12] 3174 	mov	a,r7
      000D0F 2F               [12] 3175 	add	a,r7
      000D10 2F               [12] 3176 	add	a,r7
      000D11 90 0D 15         [24] 3177 	mov	dptr,#00170$
      000D14 73               [24] 3178 	jmp	@a+dptr
      000D15                       3179 00170$:
      000D15 02 0E 27         [24] 3180 	ljmp	00113$
      000D18 02 0D 21         [24] 3181 	ljmp	00101$
      000D1B 02 0D 77         [24] 3182 	ljmp	00105$
      000D1E 02 0D CD         [24] 3183 	ljmp	00109$
                                   3184 ;	888n.c:403: case 1:
      000D21                       3185 00101$:
                                   3186 ;	888n.c:404: for (i=0;i<8;i++) {
      000D21 7F 00            [12] 3187 	mov	r7,#0x00
      000D23                       3188 00119$:
                                   3189 ;	888n.c:405: box_apeak_xy (0,i,0,7,7-i,7,1,1);
      000D23 74 07            [12] 3190 	mov	a,#0x07
      000D25 C3               [12] 3191 	clr	c
      000D26 9F               [12] 3192 	subb	a,r7
      000D27 F5 3C            [12] 3193 	mov	_box_apeak_xy_PARM_5,a
      000D29 8F 39            [24] 3194 	mov	_box_apeak_xy_PARM_2,r7
      000D2B 75 3A 00         [24] 3195 	mov	_box_apeak_xy_PARM_3,#0x00
      000D2E 75 3B 07         [24] 3196 	mov	_box_apeak_xy_PARM_4,#0x07
      000D31 75 3D 07         [24] 3197 	mov	_box_apeak_xy_PARM_6,#0x07
      000D34 75 3E 01         [24] 3198 	mov	_box_apeak_xy_PARM_7,#0x01
      000D37 75 3F 01         [24] 3199 	mov	_box_apeak_xy_PARM_8,#0x01
      000D3A 75 82 00         [24] 3200 	mov	dpl,#0x00
      000D3D C0 07            [24] 3201 	push	ar7
      000D3F 12 08 F9         [24] 3202 	lcall	_box_apeak_xy
                                   3203 ;	888n.c:406: delay(speed);
      000D42 85 47 82         [24] 3204 	mov	dpl,_roll_3_xy_PARM_2
      000D45 85 48 83         [24] 3205 	mov	dph,(_roll_3_xy_PARM_2 + 1)
      000D48 12 00 90         [24] 3206 	lcall	_delay
      000D4B D0 07            [24] 3207 	pop	ar7
                                   3208 ;	888n.c:407: if (i<7) box_apeak_xy (3,3,0,0,i,7,1,0);
      000D4D BF 07 00         [24] 3209 	cjne	r7,#0x07,00171$
      000D50                       3210 00171$:
      000D50 50 1E            [24] 3211 	jnc	00120$
      000D52 75 39 03         [24] 3212 	mov	_box_apeak_xy_PARM_2,#0x03
      000D55 75 3A 00         [24] 3213 	mov	_box_apeak_xy_PARM_3,#0x00
      000D58 75 3B 00         [24] 3214 	mov	_box_apeak_xy_PARM_4,#0x00
      000D5B 8F 3C            [24] 3215 	mov	_box_apeak_xy_PARM_5,r7
      000D5D 75 3D 07         [24] 3216 	mov	_box_apeak_xy_PARM_6,#0x07
      000D60 75 3E 01         [24] 3217 	mov	_box_apeak_xy_PARM_7,#0x01
      000D63 75 3F 00         [24] 3218 	mov	_box_apeak_xy_PARM_8,#0x00
      000D66 75 82 03         [24] 3219 	mov	dpl,#0x03
      000D69 C0 07            [24] 3220 	push	ar7
      000D6B 12 08 F9         [24] 3221 	lcall	_box_apeak_xy
      000D6E D0 07            [24] 3222 	pop	ar7
      000D70                       3223 00120$:
                                   3224 ;	888n.c:404: for (i=0;i<8;i++) {
      000D70 0F               [12] 3225 	inc	r7
      000D71 BF 08 00         [24] 3226 	cjne	r7,#0x08,00173$
      000D74                       3227 00173$:
      000D74 40 AD            [24] 3228 	jc	00119$
                                   3229 ;	888n.c:409: break;
      000D76 22               [24] 3230 	ret
                                   3231 ;	888n.c:410: case 2:
      000D77                       3232 00105$:
                                   3233 ;	888n.c:411: for (i=0;i<8;i++) {
      000D77 7F 00            [12] 3234 	mov	r7,#0x00
      000D79                       3235 00121$:
                                   3236 ;	888n.c:412: box_apeak_xy (7-i,0,0,i,7,7,1,1);
      000D79 74 07            [12] 3237 	mov	a,#0x07
      000D7B C3               [12] 3238 	clr	c
      000D7C 9F               [12] 3239 	subb	a,r7
      000D7D F5 82            [12] 3240 	mov	dpl,a
      000D7F 75 39 00         [24] 3241 	mov	_box_apeak_xy_PARM_2,#0x00
      000D82 75 3A 00         [24] 3242 	mov	_box_apeak_xy_PARM_3,#0x00
      000D85 8F 3B            [24] 3243 	mov	_box_apeak_xy_PARM_4,r7
      000D87 75 3C 07         [24] 3244 	mov	_box_apeak_xy_PARM_5,#0x07
      000D8A 75 3D 07         [24] 3245 	mov	_box_apeak_xy_PARM_6,#0x07
      000D8D 75 3E 01         [24] 3246 	mov	_box_apeak_xy_PARM_7,#0x01
      000D90 75 3F 01         [24] 3247 	mov	_box_apeak_xy_PARM_8,#0x01
      000D93 C0 07            [24] 3248 	push	ar7
      000D95 12 08 F9         [24] 3249 	lcall	_box_apeak_xy
                                   3250 ;	888n.c:413: delay(speed);
      000D98 85 47 82         [24] 3251 	mov	dpl,_roll_3_xy_PARM_2
      000D9B 85 48 83         [24] 3252 	mov	dph,(_roll_3_xy_PARM_2 + 1)
      000D9E 12 00 90         [24] 3253 	lcall	_delay
      000DA1 D0 07            [24] 3254 	pop	ar7
                                   3255 ;	888n.c:414: if (i<7) box_apeak_xy (3,4,0,i,7,7,1,0);
      000DA3 BF 07 00         [24] 3256 	cjne	r7,#0x07,00175$
      000DA6                       3257 00175$:
      000DA6 50 1E            [24] 3258 	jnc	00122$
      000DA8 75 39 04         [24] 3259 	mov	_box_apeak_xy_PARM_2,#0x04
      000DAB 75 3A 00         [24] 3260 	mov	_box_apeak_xy_PARM_3,#0x00
      000DAE 8F 3B            [24] 3261 	mov	_box_apeak_xy_PARM_4,r7
      000DB0 75 3C 07         [24] 3262 	mov	_box_apeak_xy_PARM_5,#0x07
      000DB3 75 3D 07         [24] 3263 	mov	_box_apeak_xy_PARM_6,#0x07
      000DB6 75 3E 01         [24] 3264 	mov	_box_apeak_xy_PARM_7,#0x01
      000DB9 75 3F 00         [24] 3265 	mov	_box_apeak_xy_PARM_8,#0x00
      000DBC 75 82 03         [24] 3266 	mov	dpl,#0x03
      000DBF C0 07            [24] 3267 	push	ar7
      000DC1 12 08 F9         [24] 3268 	lcall	_box_apeak_xy
      000DC4 D0 07            [24] 3269 	pop	ar7
      000DC6                       3270 00122$:
                                   3271 ;	888n.c:411: for (i=0;i<8;i++) {
      000DC6 0F               [12] 3272 	inc	r7
      000DC7 BF 08 00         [24] 3273 	cjne	r7,#0x08,00177$
      000DCA                       3274 00177$:
      000DCA 40 AD            [24] 3275 	jc	00121$
                                   3276 ;	888n.c:416: break;
      000DCC 22               [24] 3277 	ret
                                   3278 ;	888n.c:417: case 3:
      000DCD                       3279 00109$:
                                   3280 ;	888n.c:418: for (i=0;i<8;i++) {
      000DCD 7F 00            [12] 3281 	mov	r7,#0x00
      000DCF                       3282 00123$:
                                   3283 ;	888n.c:419: box_apeak_xy (0,i,0,7,7-i,7,1,1);
      000DCF 74 07            [12] 3284 	mov	a,#0x07
      000DD1 C3               [12] 3285 	clr	c
      000DD2 9F               [12] 3286 	subb	a,r7
      000DD3 F5 3C            [12] 3287 	mov	_box_apeak_xy_PARM_5,a
      000DD5 8F 39            [24] 3288 	mov	_box_apeak_xy_PARM_2,r7
      000DD7 75 3A 00         [24] 3289 	mov	_box_apeak_xy_PARM_3,#0x00
      000DDA 75 3B 07         [24] 3290 	mov	_box_apeak_xy_PARM_4,#0x07
      000DDD 75 3D 07         [24] 3291 	mov	_box_apeak_xy_PARM_6,#0x07
      000DE0 75 3E 01         [24] 3292 	mov	_box_apeak_xy_PARM_7,#0x01
      000DE3 75 3F 01         [24] 3293 	mov	_box_apeak_xy_PARM_8,#0x01
      000DE6 75 82 00         [24] 3294 	mov	dpl,#0x00
      000DE9 C0 07            [24] 3295 	push	ar7
      000DEB 12 08 F9         [24] 3296 	lcall	_box_apeak_xy
                                   3297 ;	888n.c:420: delay(speed);
      000DEE 85 47 82         [24] 3298 	mov	dpl,_roll_3_xy_PARM_2
      000DF1 85 48 83         [24] 3299 	mov	dph,(_roll_3_xy_PARM_2 + 1)
      000DF4 12 00 90         [24] 3300 	lcall	_delay
      000DF7 D0 07            [24] 3301 	pop	ar7
                                   3302 ;	888n.c:421: if (i<7) box_apeak_xy (4,4,0,7,7-i,7,1,0);
      000DF9 BF 07 00         [24] 3303 	cjne	r7,#0x07,00179$
      000DFC                       3304 00179$:
      000DFC 50 22            [24] 3305 	jnc	00124$
      000DFE 74 07            [12] 3306 	mov	a,#0x07
      000E00 C3               [12] 3307 	clr	c
      000E01 9F               [12] 3308 	subb	a,r7
      000E02 F5 3C            [12] 3309 	mov	_box_apeak_xy_PARM_5,a
      000E04 75 39 04         [24] 3310 	mov	_box_apeak_xy_PARM_2,#0x04
      000E07 75 3A 00         [24] 3311 	mov	_box_apeak_xy_PARM_3,#0x00
      000E0A 75 3B 07         [24] 3312 	mov	_box_apeak_xy_PARM_4,#0x07
      000E0D 75 3D 07         [24] 3313 	mov	_box_apeak_xy_PARM_6,#0x07
      000E10 75 3E 01         [24] 3314 	mov	_box_apeak_xy_PARM_7,#0x01
      000E13 75 3F 00         [24] 3315 	mov	_box_apeak_xy_PARM_8,#0x00
      000E16 75 82 04         [24] 3316 	mov	dpl,#0x04
      000E19 C0 07            [24] 3317 	push	ar7
      000E1B 12 08 F9         [24] 3318 	lcall	_box_apeak_xy
      000E1E D0 07            [24] 3319 	pop	ar7
      000E20                       3320 00124$:
                                   3321 ;	888n.c:418: for (i=0;i<8;i++) {
      000E20 0F               [12] 3322 	inc	r7
      000E21 BF 08 00         [24] 3323 	cjne	r7,#0x08,00181$
      000E24                       3324 00181$:
      000E24 40 A9            [24] 3325 	jc	00123$
                                   3326 ;	888n.c:423: break;
                                   3327 ;	888n.c:424: case 0:
      000E26 22               [24] 3328 	ret
      000E27                       3329 00113$:
                                   3330 ;	888n.c:425: for (i=0;i<8;i++) {
      000E27 7F 00            [12] 3331 	mov	r7,#0x00
      000E29                       3332 00125$:
                                   3333 ;	888n.c:426: box_apeak_xy (7-i,0,0,i,7,7,1,1);
      000E29 74 07            [12] 3334 	mov	a,#0x07
      000E2B C3               [12] 3335 	clr	c
      000E2C 9F               [12] 3336 	subb	a,r7
      000E2D F5 82            [12] 3337 	mov	dpl,a
      000E2F 75 39 00         [24] 3338 	mov	_box_apeak_xy_PARM_2,#0x00
      000E32 75 3A 00         [24] 3339 	mov	_box_apeak_xy_PARM_3,#0x00
      000E35 8F 3B            [24] 3340 	mov	_box_apeak_xy_PARM_4,r7
      000E37 75 3C 07         [24] 3341 	mov	_box_apeak_xy_PARM_5,#0x07
      000E3A 75 3D 07         [24] 3342 	mov	_box_apeak_xy_PARM_6,#0x07
      000E3D 75 3E 01         [24] 3343 	mov	_box_apeak_xy_PARM_7,#0x01
      000E40 75 3F 01         [24] 3344 	mov	_box_apeak_xy_PARM_8,#0x01
      000E43 C0 07            [24] 3345 	push	ar7
      000E45 12 08 F9         [24] 3346 	lcall	_box_apeak_xy
                                   3347 ;	888n.c:427: delay(speed);
      000E48 85 47 82         [24] 3348 	mov	dpl,_roll_3_xy_PARM_2
      000E4B 85 48 83         [24] 3349 	mov	dph,(_roll_3_xy_PARM_2 + 1)
      000E4E 12 00 90         [24] 3350 	lcall	_delay
      000E51 D0 07            [24] 3351 	pop	ar7
                                   3352 ;	888n.c:428: if (i<7) box_apeak_xy (4,3,0,7-i,0,7,1,0);
      000E53 BF 07 00         [24] 3353 	cjne	r7,#0x07,00183$
      000E56                       3354 00183$:
      000E56 50 22            [24] 3355 	jnc	00126$
      000E58 74 07            [12] 3356 	mov	a,#0x07
      000E5A C3               [12] 3357 	clr	c
      000E5B 9F               [12] 3358 	subb	a,r7
      000E5C F5 3B            [12] 3359 	mov	_box_apeak_xy_PARM_4,a
      000E5E 75 39 03         [24] 3360 	mov	_box_apeak_xy_PARM_2,#0x03
      000E61 75 3A 00         [24] 3361 	mov	_box_apeak_xy_PARM_3,#0x00
      000E64 75 3C 00         [24] 3362 	mov	_box_apeak_xy_PARM_5,#0x00
      000E67 75 3D 07         [24] 3363 	mov	_box_apeak_xy_PARM_6,#0x07
      000E6A 75 3E 01         [24] 3364 	mov	_box_apeak_xy_PARM_7,#0x01
      000E6D 75 3F 00         [24] 3365 	mov	_box_apeak_xy_PARM_8,#0x00
      000E70 75 82 04         [24] 3366 	mov	dpl,#0x04
      000E73 C0 07            [24] 3367 	push	ar7
      000E75 12 08 F9         [24] 3368 	lcall	_box_apeak_xy
      000E78 D0 07            [24] 3369 	pop	ar7
      000E7A                       3370 00126$:
                                   3371 ;	888n.c:425: for (i=0;i<8;i++) {
      000E7A 0F               [12] 3372 	inc	r7
      000E7B BF 08 00         [24] 3373 	cjne	r7,#0x08,00185$
      000E7E                       3374 00185$:
      000E7E 40 A9            [24] 3375 	jc	00125$
                                   3376 ;	888n.c:433: }
      000E80 22               [24] 3377 	ret
                                   3378 ;------------------------------------------------------------
                                   3379 ;Allocation info for local variables in function 'trans'
                                   3380 ;------------------------------------------------------------
                                   3381 ;speed                     Allocated with name '_trans_PARM_2'
                                   3382 ;z                         Allocated to registers r7 
                                   3383 ;i                         Allocated to registers r4 
                                   3384 ;j                         Allocated to registers r5 
                                   3385 ;------------------------------------------------------------
                                   3386 ;	888n.c:436: void trans(uchar z, uint speed)
                                   3387 ;	-----------------------------------------
                                   3388 ;	 function trans
                                   3389 ;	-----------------------------------------
      000E81                       3390 _trans:
                                   3391 ;	888n.c:440: for (j=0; j<8; j++) {
      000E81 E5 82            [12] 3392 	mov	a,dpl
      000E83 75 F0 08         [24] 3393 	mov	b,#0x08
      000E86 A4               [48] 3394 	mul	ab
      000E87 FE               [12] 3395 	mov	r6,a
      000E88 AF F0            [24] 3396 	mov	r7,b
      000E8A 7D 00            [12] 3397 	mov	r5,#0x00
                                   3398 ;	888n.c:441: for (i=0;i<8;i++)
      000E8C                       3399 00109$:
      000E8C 7C 00            [12] 3400 	mov	r4,#0x00
      000E8E                       3401 00103$:
                                   3402 ;	888n.c:442: display[z][i]>>=1;
      000E8E EE               [12] 3403 	mov	a,r6
      000E8F 24 01            [12] 3404 	add	a,#_display
      000E91 FA               [12] 3405 	mov	r2,a
      000E92 EF               [12] 3406 	mov	a,r7
      000E93 34 00            [12] 3407 	addc	a,#(_display >> 8)
      000E95 FB               [12] 3408 	mov	r3,a
      000E96 EC               [12] 3409 	mov	a,r4
      000E97 2A               [12] 3410 	add	a,r2
      000E98 FA               [12] 3411 	mov	r2,a
      000E99 E4               [12] 3412 	clr	a
      000E9A 3B               [12] 3413 	addc	a,r3
      000E9B FB               [12] 3414 	mov	r3,a
      000E9C EE               [12] 3415 	mov	a,r6
      000E9D 24 01            [12] 3416 	add	a,#_display
      000E9F F8               [12] 3417 	mov	r0,a
      000EA0 EF               [12] 3418 	mov	a,r7
      000EA1 34 00            [12] 3419 	addc	a,#(_display >> 8)
      000EA3 F9               [12] 3420 	mov	r1,a
      000EA4 EC               [12] 3421 	mov	a,r4
      000EA5 28               [12] 3422 	add	a,r0
      000EA6 F5 82            [12] 3423 	mov	dpl,a
      000EA8 E4               [12] 3424 	clr	a
      000EA9 39               [12] 3425 	addc	a,r1
      000EAA F5 83            [12] 3426 	mov	dph,a
      000EAC E0               [24] 3427 	movx	a,@dptr
      000EAD C3               [12] 3428 	clr	c
      000EAE 13               [12] 3429 	rrc	a
      000EAF F9               [12] 3430 	mov	r1,a
      000EB0 8A 82            [24] 3431 	mov	dpl,r2
      000EB2 8B 83            [24] 3432 	mov	dph,r3
      000EB4 F0               [24] 3433 	movx	@dptr,a
                                   3434 ;	888n.c:441: for (i=0;i<8;i++)
      000EB5 0C               [12] 3435 	inc	r4
      000EB6 BC 08 00         [24] 3436 	cjne	r4,#0x08,00120$
      000EB9                       3437 00120$:
      000EB9 40 D3            [24] 3438 	jc	00103$
                                   3439 ;	888n.c:443: delay(speed);
      000EBB 85 49 82         [24] 3440 	mov	dpl,_trans_PARM_2
      000EBE 85 4A 83         [24] 3441 	mov	dph,(_trans_PARM_2 + 1)
      000EC1 C0 07            [24] 3442 	push	ar7
      000EC3 C0 06            [24] 3443 	push	ar6
      000EC5 C0 05            [24] 3444 	push	ar5
      000EC7 12 00 90         [24] 3445 	lcall	_delay
      000ECA D0 05            [24] 3446 	pop	ar5
      000ECC D0 06            [24] 3447 	pop	ar6
      000ECE D0 07            [24] 3448 	pop	ar7
                                   3449 ;	888n.c:440: for (j=0; j<8; j++) {
      000ED0 0D               [12] 3450 	inc	r5
      000ED1 BD 08 00         [24] 3451 	cjne	r5,#0x08,00122$
      000ED4                       3452 00122$:
      000ED4 40 B6            [24] 3453 	jc	00109$
      000ED6 22               [24] 3454 	ret
                                   3455 ;------------------------------------------------------------
                                   3456 ;Allocation info for local variables in function 'tranoutchar'
                                   3457 ;------------------------------------------------------------
                                   3458 ;speed                     Allocated with name '_tranoutchar_PARM_2'
                                   3459 ;c                         Allocated to registers r7 
                                   3460 ;i                         Allocated with name '_tranoutchar_i_1_85'
                                   3461 ;j                         Allocated to registers r2 
                                   3462 ;k                         Allocated with name '_tranoutchar_k_1_85'
                                   3463 ;a                         Allocated with name '_tranoutchar_a_1_85'
                                   3464 ;i2                        Allocated with name '_tranoutchar_i2_1_85'
                                   3465 ;sloc0                     Allocated with name '_tranoutchar_sloc0_1_0'
                                   3466 ;sloc1                     Allocated with name '_tranoutchar_sloc1_1_0'
                                   3467 ;------------------------------------------------------------
                                   3468 ;	888n.c:447: void tranoutchar(uchar c, uint speed)
                                   3469 ;	-----------------------------------------
                                   3470 ;	 function tranoutchar
                                   3471 ;	-----------------------------------------
      000ED7                       3472 _tranoutchar:
      000ED7 AF 82            [24] 3473 	mov	r7,dpl
                                   3474 ;	888n.c:449: uchar i, j, k, a, i2=0;
      000ED9 75 50 00         [24] 3475 	mov	_tranoutchar_i2_1_85,#0x00
                                   3476 ;	888n.c:451: for (i=0; i<8; i++) {
      000EDC EF               [12] 3477 	mov	a,r7
      000EDD 75 F0 08         [24] 3478 	mov	b,#0x08
      000EE0 A4               [48] 3479 	mul	ab
      000EE1 24 5F            [12] 3480 	add	a,#_table_cha
      000EE3 F5 51            [12] 3481 	mov	_tranoutchar_sloc0_1_0,a
      000EE5 74 2A            [12] 3482 	mov	a,#(_table_cha >> 8)
      000EE7 35 F0            [12] 3483 	addc	a,b
      000EE9 F5 52            [12] 3484 	mov	(_tranoutchar_sloc0_1_0 + 1),a
      000EEB 75 4D 00         [24] 3485 	mov	_tranoutchar_i_1_85,#0x00
      000EEE                       3486 00110$:
                                   3487 ;	888n.c:452: if (i<7) box_apeak_xy (i+1,0,0,i+1,7,7,1,1);
      000EEE 74 F9            [12] 3488 	mov	a,#0x100 - 0x07
      000EF0 25 4D            [12] 3489 	add	a,_tranoutchar_i_1_85
      000EF2 40 1D            [24] 3490 	jc	00102$
      000EF4 E5 4D            [12] 3491 	mov	a,_tranoutchar_i_1_85
      000EF6 04               [12] 3492 	inc	a
      000EF7 FB               [12] 3493 	mov	r3,a
      000EF8 75 39 00         [24] 3494 	mov	_box_apeak_xy_PARM_2,#0x00
      000EFB 75 3A 00         [24] 3495 	mov	_box_apeak_xy_PARM_3,#0x00
      000EFE 8B 3B            [24] 3496 	mov	_box_apeak_xy_PARM_4,r3
      000F00 75 3C 07         [24] 3497 	mov	_box_apeak_xy_PARM_5,#0x07
      000F03 75 3D 07         [24] 3498 	mov	_box_apeak_xy_PARM_6,#0x07
      000F06 75 3E 01         [24] 3499 	mov	_box_apeak_xy_PARM_7,#0x01
      000F09 75 3F 01         [24] 3500 	mov	_box_apeak_xy_PARM_8,#0x01
      000F0C 8B 82            [24] 3501 	mov	dpl,r3
      000F0E 12 08 F9         [24] 3502 	lcall	_box_apeak_xy
      000F11                       3503 00102$:
                                   3504 ;	888n.c:453: box_apeak_xy (i2,0,0,i2,7,7,1,0);
      000F11 75 39 00         [24] 3505 	mov	_box_apeak_xy_PARM_2,#0x00
      000F14 75 3A 00         [24] 3506 	mov	_box_apeak_xy_PARM_3,#0x00
      000F17 85 50 3B         [24] 3507 	mov	_box_apeak_xy_PARM_4,_tranoutchar_i2_1_85
      000F1A 75 3C 07         [24] 3508 	mov	_box_apeak_xy_PARM_5,#0x07
      000F1D 75 3D 07         [24] 3509 	mov	_box_apeak_xy_PARM_6,#0x07
      000F20 75 3E 01         [24] 3510 	mov	_box_apeak_xy_PARM_7,#0x01
      000F23 75 3F 00         [24] 3511 	mov	_box_apeak_xy_PARM_8,#0x00
      000F26 85 50 82         [24] 3512 	mov	dpl,_tranoutchar_i2_1_85
      000F29 12 08 F9         [24] 3513 	lcall	_box_apeak_xy
                                   3514 ;	888n.c:454: a=0;
      000F2C 75 4F 00         [24] 3515 	mov	_tranoutchar_a_1_85,#0x00
                                   3516 ;	888n.c:455: i2=i+1;
      000F2F E5 4D            [12] 3517 	mov	a,_tranoutchar_i_1_85
      000F31 04               [12] 3518 	inc	a
      000F32 F5 50            [12] 3519 	mov	_tranoutchar_i2_1_85,a
                                   3520 ;	888n.c:456: for (j=0; j <= i; j++)
      000F34 7A 00            [12] 3521 	mov	r2,#0x00
      000F36                       3522 00106$:
                                   3523 ;	888n.c:457: a |= (1<<j);
      000F36 8A F0            [24] 3524 	mov	b,r2
      000F38 05 F0            [12] 3525 	inc	b
      000F3A 74 01            [12] 3526 	mov	a,#0x01
      000F3C 80 02            [24] 3527 	sjmp	00138$
      000F3E                       3528 00136$:
      000F3E 25 E0            [12] 3529 	add	a,acc
      000F40                       3530 00138$:
      000F40 D5 F0 FB         [24] 3531 	djnz	b,00136$
      000F43 F9               [12] 3532 	mov	r1,a
      000F44 42 4F            [12] 3533 	orl	_tranoutchar_a_1_85,a
                                   3534 ;	888n.c:456: for (j=0; j <= i; j++)
      000F46 0A               [12] 3535 	inc	r2
      000F47 C3               [12] 3536 	clr	c
      000F48 E5 4D            [12] 3537 	mov	a,_tranoutchar_i_1_85
      000F4A 9A               [12] 3538 	subb	a,r2
      000F4B 50 E9            [24] 3539 	jnc	00106$
                                   3540 ;	888n.c:458: for (k=0;k<8;k++) {
      000F4D 75 4E 00         [24] 3541 	mov	_tranoutchar_k_1_85,#0x00
      000F50                       3542 00108$:
                                   3543 ;	888n.c:459: display[k][3]|=table_cha[c][k]&a;
      000F50 E5 4E            [12] 3544 	mov	a,_tranoutchar_k_1_85
      000F52 75 F0 08         [24] 3545 	mov	b,#0x08
      000F55 A4               [48] 3546 	mul	ab
      000F56 F8               [12] 3547 	mov	r0,a
      000F57 A9 F0            [24] 3548 	mov	r1,b
      000F59 24 01            [12] 3549 	add	a,#_display
      000F5B FC               [12] 3550 	mov	r4,a
      000F5C E9               [12] 3551 	mov	a,r1
      000F5D 34 00            [12] 3552 	addc	a,#(_display >> 8)
      000F5F FE               [12] 3553 	mov	r6,a
      000F60 74 03            [12] 3554 	mov	a,#0x03
      000F62 2C               [12] 3555 	add	a,r4
      000F63 FC               [12] 3556 	mov	r4,a
      000F64 E4               [12] 3557 	clr	a
      000F65 3E               [12] 3558 	addc	a,r6
      000F66 FE               [12] 3559 	mov	r6,a
      000F67 E8               [12] 3560 	mov	a,r0
      000F68 24 01            [12] 3561 	add	a,#_display
      000F6A FA               [12] 3562 	mov	r2,a
      000F6B E9               [12] 3563 	mov	a,r1
      000F6C 34 00            [12] 3564 	addc	a,#(_display >> 8)
      000F6E FB               [12] 3565 	mov	r3,a
      000F6F 74 03            [12] 3566 	mov	a,#0x03
      000F71 2A               [12] 3567 	add	a,r2
      000F72 F5 53            [12] 3568 	mov	_tranoutchar_sloc1_1_0,a
      000F74 E4               [12] 3569 	clr	a
      000F75 3B               [12] 3570 	addc	a,r3
      000F76 F5 54            [12] 3571 	mov	(_tranoutchar_sloc1_1_0 + 1),a
      000F78 E5 4E            [12] 3572 	mov	a,_tranoutchar_k_1_85
      000F7A 25 51            [12] 3573 	add	a,_tranoutchar_sloc0_1_0
      000F7C FD               [12] 3574 	mov	r5,a
      000F7D E4               [12] 3575 	clr	a
      000F7E 35 52            [12] 3576 	addc	a,(_tranoutchar_sloc0_1_0 + 1)
      000F80 FF               [12] 3577 	mov	r7,a
      000F81 8D 82            [24] 3578 	mov	dpl,r5
      000F83 8F 83            [24] 3579 	mov	dph,r7
      000F85 E4               [12] 3580 	clr	a
      000F86 93               [24] 3581 	movc	a,@a+dptr
      000F87 FB               [12] 3582 	mov	r3,a
      000F88 E5 4F            [12] 3583 	mov	a,_tranoutchar_a_1_85
      000F8A 52 03            [12] 3584 	anl	ar3,a
      000F8C 85 53 82         [24] 3585 	mov	dpl,_tranoutchar_sloc1_1_0
      000F8F 85 54 83         [24] 3586 	mov	dph,(_tranoutchar_sloc1_1_0 + 1)
      000F92 E0               [24] 3587 	movx	a,@dptr
      000F93 FA               [12] 3588 	mov	r2,a
      000F94 42 03            [12] 3589 	orl	ar3,a
      000F96 8C 82            [24] 3590 	mov	dpl,r4
      000F98 8E 83            [24] 3591 	mov	dph,r6
      000F9A EB               [12] 3592 	mov	a,r3
      000F9B F0               [24] 3593 	movx	@dptr,a
                                   3594 ;	888n.c:460: display[k][4]|=table_cha[c][k]&a;
      000F9C E8               [12] 3595 	mov	a,r0
      000F9D 24 01            [12] 3596 	add	a,#_display
      000F9F FC               [12] 3597 	mov	r4,a
      000FA0 E9               [12] 3598 	mov	a,r1
      000FA1 34 00            [12] 3599 	addc	a,#(_display >> 8)
      000FA3 FE               [12] 3600 	mov	r6,a
      000FA4 74 04            [12] 3601 	mov	a,#0x04
      000FA6 2C               [12] 3602 	add	a,r4
      000FA7 FC               [12] 3603 	mov	r4,a
      000FA8 E4               [12] 3604 	clr	a
      000FA9 3E               [12] 3605 	addc	a,r6
      000FAA FE               [12] 3606 	mov	r6,a
      000FAB E8               [12] 3607 	mov	a,r0
      000FAC 24 01            [12] 3608 	add	a,#_display
      000FAE F8               [12] 3609 	mov	r0,a
      000FAF E9               [12] 3610 	mov	a,r1
      000FB0 34 00            [12] 3611 	addc	a,#(_display >> 8)
      000FB2 F9               [12] 3612 	mov	r1,a
      000FB3 74 04            [12] 3613 	mov	a,#0x04
      000FB5 28               [12] 3614 	add	a,r0
      000FB6 F8               [12] 3615 	mov	r0,a
      000FB7 E4               [12] 3616 	clr	a
      000FB8 39               [12] 3617 	addc	a,r1
      000FB9 F9               [12] 3618 	mov	r1,a
      000FBA 8D 82            [24] 3619 	mov	dpl,r5
      000FBC 8F 83            [24] 3620 	mov	dph,r7
      000FBE E4               [12] 3621 	clr	a
      000FBF 93               [24] 3622 	movc	a,@a+dptr
      000FC0 FD               [12] 3623 	mov	r5,a
      000FC1 E5 4F            [12] 3624 	mov	a,_tranoutchar_a_1_85
      000FC3 52 05            [12] 3625 	anl	ar5,a
      000FC5 88 82            [24] 3626 	mov	dpl,r0
      000FC7 89 83            [24] 3627 	mov	dph,r1
      000FC9 E0               [24] 3628 	movx	a,@dptr
      000FCA F8               [12] 3629 	mov	r0,a
      000FCB 42 05            [12] 3630 	orl	ar5,a
      000FCD 8C 82            [24] 3631 	mov	dpl,r4
      000FCF 8E 83            [24] 3632 	mov	dph,r6
      000FD1 ED               [12] 3633 	mov	a,r5
      000FD2 F0               [24] 3634 	movx	@dptr,a
                                   3635 ;	888n.c:458: for (k=0;k<8;k++) {
      000FD3 05 4E            [12] 3636 	inc	_tranoutchar_k_1_85
      000FD5 74 F8            [12] 3637 	mov	a,#0x100 - 0x08
      000FD7 25 4E            [12] 3638 	add	a,_tranoutchar_k_1_85
      000FD9 40 03            [24] 3639 	jc	00140$
      000FDB 02 0F 50         [24] 3640 	ljmp	00108$
      000FDE                       3641 00140$:
                                   3642 ;	888n.c:462: delay(speed);
      000FDE 85 4B 82         [24] 3643 	mov	dpl,_tranoutchar_PARM_2
      000FE1 85 4C 83         [24] 3644 	mov	dph,(_tranoutchar_PARM_2 + 1)
      000FE4 12 00 90         [24] 3645 	lcall	_delay
                                   3646 ;	888n.c:451: for (i=0; i<8; i++) {
      000FE7 05 4D            [12] 3647 	inc	_tranoutchar_i_1_85
      000FE9 74 F8            [12] 3648 	mov	a,#0x100 - 0x08
      000FEB 25 4D            [12] 3649 	add	a,_tranoutchar_i_1_85
      000FED 40 03            [24] 3650 	jc	00141$
      000FEF 02 0E EE         [24] 3651 	ljmp	00110$
      000FF2                       3652 00141$:
      000FF2 22               [24] 3653 	ret
                                   3654 ;------------------------------------------------------------
                                   3655 ;Allocation info for local variables in function 'transss'
                                   3656 ;------------------------------------------------------------
                                   3657 ;i                         Allocated to registers r7 
                                   3658 ;j                         Allocated to registers r4 
                                   3659 ;------------------------------------------------------------
                                   3660 ;	888n.c:466: void transss()
                                   3661 ;	-----------------------------------------
                                   3662 ;	 function transss
                                   3663 ;	-----------------------------------------
      000FF3                       3664 _transss:
                                   3665 ;	888n.c:470: for (i=0;i<8;i++) 
      000FF3 7F 00            [12] 3666 	mov	r7,#0x00
                                   3667 ;	888n.c:471: for (j=0;j<8;j++) display[i][j]<<=1;
      000FF5                       3668 00109$:
      000FF5 EF               [12] 3669 	mov	a,r7
      000FF6 75 F0 08         [24] 3670 	mov	b,#0x08
      000FF9 A4               [48] 3671 	mul	ab
      000FFA FD               [12] 3672 	mov	r5,a
      000FFB AE F0            [24] 3673 	mov	r6,b
      000FFD 7C 00            [12] 3674 	mov	r4,#0x00
      000FFF                       3675 00103$:
      000FFF ED               [12] 3676 	mov	a,r5
      001000 24 01            [12] 3677 	add	a,#_display
      001002 FA               [12] 3678 	mov	r2,a
      001003 EE               [12] 3679 	mov	a,r6
      001004 34 00            [12] 3680 	addc	a,#(_display >> 8)
      001006 FB               [12] 3681 	mov	r3,a
      001007 EC               [12] 3682 	mov	a,r4
      001008 2A               [12] 3683 	add	a,r2
      001009 FA               [12] 3684 	mov	r2,a
      00100A E4               [12] 3685 	clr	a
      00100B 3B               [12] 3686 	addc	a,r3
      00100C FB               [12] 3687 	mov	r3,a
      00100D ED               [12] 3688 	mov	a,r5
      00100E 24 01            [12] 3689 	add	a,#_display
      001010 F8               [12] 3690 	mov	r0,a
      001011 EE               [12] 3691 	mov	a,r6
      001012 34 00            [12] 3692 	addc	a,#(_display >> 8)
      001014 F9               [12] 3693 	mov	r1,a
      001015 EC               [12] 3694 	mov	a,r4
      001016 28               [12] 3695 	add	a,r0
      001017 F5 82            [12] 3696 	mov	dpl,a
      001019 E4               [12] 3697 	clr	a
      00101A 39               [12] 3698 	addc	a,r1
      00101B F5 83            [12] 3699 	mov	dph,a
      00101D E0               [24] 3700 	movx	a,@dptr
      00101E 25 E0            [12] 3701 	add	a,acc
      001020 F9               [12] 3702 	mov	r1,a
      001021 8A 82            [24] 3703 	mov	dpl,r2
      001023 8B 83            [24] 3704 	mov	dph,r3
      001025 F0               [24] 3705 	movx	@dptr,a
      001026 0C               [12] 3706 	inc	r4
      001027 BC 08 00         [24] 3707 	cjne	r4,#0x08,00120$
      00102A                       3708 00120$:
      00102A 40 D3            [24] 3709 	jc	00103$
                                   3710 ;	888n.c:470: for (i=0;i<8;i++) 
      00102C 0F               [12] 3711 	inc	r7
      00102D BF 08 00         [24] 3712 	cjne	r7,#0x08,00122$
      001030                       3713 00122$:
      001030 40 C3            [24] 3714 	jc	00109$
      001032 22               [24] 3715 	ret
                                   3716 ;------------------------------------------------------------
                                   3717 ;Allocation info for local variables in function 'flash_1'
                                   3718 ;------------------------------------------------------------
                                   3719 ;	888n.c:477: void flash_1()
                                   3720 ;	-----------------------------------------
                                   3721 ;	 function flash_1
                                   3722 ;	-----------------------------------------
      001033                       3723 _flash_1:
                                   3724 ;	888n.c:479: clear(0);
      001033 75 82 00         [24] 3725 	mov	dpl,#0x00
      001036 12 01 3A         [24] 3726 	lcall	_clear
                                   3727 ;	888n.c:480: type(1,0);
      001039 75 08 00         [24] 3728 	mov	_type_PARM_2,#0x00
      00103C 75 82 01         [24] 3729 	mov	dpl,#0x01
      00103F 12 02 9B         [24] 3730 	lcall	_type
                                   3731 ;	888n.c:481: delay(60000);
      001042 90 EA 60         [24] 3732 	mov	dptr,#0xea60
      001045 12 00 90         [24] 3733 	lcall	_delay
                                   3734 ;	888n.c:482: type(2,0);
      001048 75 08 00         [24] 3735 	mov	_type_PARM_2,#0x00
      00104B 75 82 02         [24] 3736 	mov	dpl,#0x02
      00104E 12 02 9B         [24] 3737 	lcall	_type
                                   3738 ;	888n.c:483: delay(60000);
      001051 90 EA 60         [24] 3739 	mov	dptr,#0xea60
      001054 12 00 90         [24] 3740 	lcall	_delay
                                   3741 ;	888n.c:484: type(3,0);
      001057 75 08 00         [24] 3742 	mov	_type_PARM_2,#0x00
      00105A 75 82 03         [24] 3743 	mov	dpl,#0x03
      00105D 12 02 9B         [24] 3744 	lcall	_type
                                   3745 ;	888n.c:485: delay(60000);
      001060 90 EA 60         [24] 3746 	mov	dptr,#0xea60
      001063 12 00 90         [24] 3747 	lcall	_delay
                                   3748 ;	888n.c:486: type(4,0);
      001066 75 08 00         [24] 3749 	mov	_type_PARM_2,#0x00
      001069 75 82 04         [24] 3750 	mov	dpl,#0x04
      00106C 12 02 9B         [24] 3751 	lcall	_type
                                   3752 ;	888n.c:487: delay(60000);
      00106F 90 EA 60         [24] 3753 	mov	dptr,#0xea60
      001072 12 00 90         [24] 3754 	lcall	_delay
                                   3755 ;	888n.c:488: delay(60000);
      001075 90 EA 60         [24] 3756 	mov	dptr,#0xea60
      001078 12 00 90         [24] 3757 	lcall	_delay
                                   3758 ;	888n.c:489: clear(0);
      00107B 75 82 00         [24] 3759 	mov	dpl,#0x00
      00107E 12 01 3A         [24] 3760 	lcall	_clear
                                   3761 ;	888n.c:490: rolldisplay(30000);
      001081 90 75 30         [24] 3762 	mov	dptr,#0x7530
      001084 12 0A 51         [24] 3763 	lcall	_rolldisplay
                                   3764 ;	888n.c:491: type(0,7);
      001087 75 08 07         [24] 3765 	mov	_type_PARM_2,#0x07
      00108A 75 82 00         [24] 3766 	mov	dpl,#0x00
      00108D 12 02 9B         [24] 3767 	lcall	_type
                                   3768 ;	888n.c:492: delay(60000);
      001090 90 EA 60         [24] 3769 	mov	dptr,#0xea60
      001093 12 00 90         [24] 3770 	lcall	_delay
                                   3771 ;	888n.c:493: trailler(6000);
      001096 90 17 70         [24] 3772 	mov	dptr,#0x1770
      001099 12 01 67         [24] 3773 	lcall	_trailler
                                   3774 ;	888n.c:494: delay(60000);
      00109C 90 EA 60         [24] 3775 	mov	dptr,#0xea60
      00109F 02 00 90         [24] 3776 	ljmp	_delay
                                   3777 ;------------------------------------------------------------
                                   3778 ;Allocation info for local variables in function 'flash_2'
                                   3779 ;------------------------------------------------------------
                                   3780 ;i                         Allocated to registers r7 
                                   3781 ;------------------------------------------------------------
                                   3782 ;	888n.c:497: void flash_2()
                                   3783 ;	-----------------------------------------
                                   3784 ;	 function flash_2
                                   3785 ;	-----------------------------------------
      0010A2                       3786 _flash_2:
                                   3787 ;	888n.c:501: for (i=129;i>0;i--) {
      0010A2 7F 81            [12] 3788 	mov	r7,#0x81
      0010A4                       3789 00105$:
                                   3790 ;	888n.c:502: cirp(i-2,0,1);
      0010A4 EF               [12] 3791 	mov	a,r7
      0010A5 24 FE            [12] 3792 	add	a,#0xfe
      0010A7 F5 82            [12] 3793 	mov	dpl,a
      0010A9 75 24 00         [24] 3794 	mov	_cirp_PARM_2,#0x00
      0010AC 75 25 01         [24] 3795 	mov	_cirp_PARM_3,#0x01
      0010AF C0 07            [24] 3796 	push	ar7
      0010B1 12 02 D8         [24] 3797 	lcall	_cirp
                                   3798 ;	888n.c:503: delay(8000);
      0010B4 90 1F 40         [24] 3799 	mov	dptr,#0x1f40
      0010B7 12 00 90         [24] 3800 	lcall	_delay
      0010BA D0 07            [24] 3801 	pop	ar7
                                   3802 ;	888n.c:504: cirp(i-1,0,0);
      0010BC EF               [12] 3803 	mov	a,r7
      0010BD 14               [12] 3804 	dec	a
      0010BE FE               [12] 3805 	mov	r6,a
      0010BF 75 24 00         [24] 3806 	mov	_cirp_PARM_2,#0x00
      0010C2 75 25 00         [24] 3807 	mov	_cirp_PARM_3,#0x00
      0010C5 8E 82            [24] 3808 	mov	dpl,r6
      0010C7 C0 06            [24] 3809 	push	ar6
      0010C9 12 02 D8         [24] 3810 	lcall	_cirp
      0010CC D0 06            [24] 3811 	pop	ar6
                                   3812 ;	888n.c:501: for (i=129;i>0;i--) {
      0010CE 8E 07            [24] 3813 	mov	ar7,r6
      0010D0 EF               [12] 3814 	mov	a,r7
      0010D1 70 D1            [24] 3815 	jnz	00105$
                                   3816 ;	888n.c:507: delay(8000);     
      0010D3 90 1F 40         [24] 3817 	mov	dptr,#0x1f40
      0010D6 12 00 90         [24] 3818 	lcall	_delay
                                   3819 ;	888n.c:509: for (i=0;i<136;i++) {
      0010D9 7F 00            [12] 3820 	mov	r7,#0x00
      0010DB                       3821 00107$:
                                   3822 ;	888n.c:510: cirp(i,1,1);
      0010DB 75 24 01         [24] 3823 	mov	_cirp_PARM_2,#0x01
      0010DE 75 25 01         [24] 3824 	mov	_cirp_PARM_3,#0x01
      0010E1 8F 82            [24] 3825 	mov	dpl,r7
      0010E3 C0 07            [24] 3826 	push	ar7
      0010E5 12 02 D8         [24] 3827 	lcall	_cirp
                                   3828 ;	888n.c:511: delay(8000);
      0010E8 90 1F 40         [24] 3829 	mov	dptr,#0x1f40
      0010EB 12 00 90         [24] 3830 	lcall	_delay
      0010EE D0 07            [24] 3831 	pop	ar7
                                   3832 ;	888n.c:512: cirp(i-8,1,0);
      0010F0 EF               [12] 3833 	mov	a,r7
      0010F1 24 F8            [12] 3834 	add	a,#0xf8
      0010F3 F5 82            [12] 3835 	mov	dpl,a
      0010F5 75 24 01         [24] 3836 	mov	_cirp_PARM_2,#0x01
      0010F8 75 25 00         [24] 3837 	mov	_cirp_PARM_3,#0x00
      0010FB C0 07            [24] 3838 	push	ar7
      0010FD 12 02 D8         [24] 3839 	lcall	_cirp
      001100 D0 07            [24] 3840 	pop	ar7
                                   3841 ;	888n.c:509: for (i=0;i<136;i++) {
      001102 0F               [12] 3842 	inc	r7
      001103 BF 88 00         [24] 3843 	cjne	r7,#0x88,00147$
      001106                       3844 00147$:
      001106 40 D3            [24] 3845 	jc	00107$
                                   3846 ;	888n.c:515: delay(8000);
      001108 90 1F 40         [24] 3847 	mov	dptr,#0x1f40
      00110B 12 00 90         [24] 3848 	lcall	_delay
                                   3849 ;	888n.c:517: for (i=129;i>0;i--) {
      00110E 7F 81            [12] 3850 	mov	r7,#0x81
      001110                       3851 00109$:
                                   3852 ;	888n.c:518: cirp(i-2,0,1);
      001110 EF               [12] 3853 	mov	a,r7
      001111 24 FE            [12] 3854 	add	a,#0xfe
      001113 F5 82            [12] 3855 	mov	dpl,a
      001115 75 24 00         [24] 3856 	mov	_cirp_PARM_2,#0x00
      001118 75 25 01         [24] 3857 	mov	_cirp_PARM_3,#0x01
      00111B C0 07            [24] 3858 	push	ar7
      00111D 12 02 D8         [24] 3859 	lcall	_cirp
                                   3860 ;	888n.c:519: delay(8000);
      001120 90 1F 40         [24] 3861 	mov	dptr,#0x1f40
      001123 12 00 90         [24] 3862 	lcall	_delay
      001126 D0 07            [24] 3863 	pop	ar7
                                   3864 ;	888n.c:517: for (i=129;i>0;i--) {
      001128 DF E6            [24] 3865 	djnz	r7,00109$
                                   3866 ;	888n.c:522: delay(8000);
      00112A 90 1F 40         [24] 3867 	mov	dptr,#0x1f40
      00112D 12 00 90         [24] 3868 	lcall	_delay
                                   3869 ;	888n.c:524: for (i=0;i<128;i++) {
      001130 7F 00            [12] 3870 	mov	r7,#0x00
      001132                       3871 00111$:
                                   3872 ;	888n.c:525: cirp(i-8,1,0);
      001132 EF               [12] 3873 	mov	a,r7
      001133 24 F8            [12] 3874 	add	a,#0xf8
      001135 F5 82            [12] 3875 	mov	dpl,a
      001137 75 24 01         [24] 3876 	mov	_cirp_PARM_2,#0x01
      00113A 75 25 00         [24] 3877 	mov	_cirp_PARM_3,#0x00
      00113D C0 07            [24] 3878 	push	ar7
      00113F 12 02 D8         [24] 3879 	lcall	_cirp
                                   3880 ;	888n.c:526: delay(8000);
      001142 90 1F 40         [24] 3881 	mov	dptr,#0x1f40
      001145 12 00 90         [24] 3882 	lcall	_delay
      001148 D0 07            [24] 3883 	pop	ar7
                                   3884 ;	888n.c:524: for (i=0;i<128;i++) {
      00114A 0F               [12] 3885 	inc	r7
      00114B BF 80 00         [24] 3886 	cjne	r7,#0x80,00151$
      00114E                       3887 00151$:
      00114E 40 E2            [24] 3888 	jc	00111$
                                   3889 ;	888n.c:529: delay(60000);  
      001150 90 EA 60         [24] 3890 	mov	dptr,#0xea60
      001153 02 00 90         [24] 3891 	ljmp	_delay
                                   3892 ;------------------------------------------------------------
                                   3893 ;Allocation info for local variables in function 'flash_3'
                                   3894 ;------------------------------------------------------------
                                   3895 ;i                         Allocated to registers r7 
                                   3896 ;------------------------------------------------------------
                                   3897 ;	888n.c:532: void flash_3()
                                   3898 ;	-----------------------------------------
                                   3899 ;	 function flash_3
                                   3900 ;	-----------------------------------------
      001156                       3901 _flash_3:
                                   3902 ;	888n.c:536: for (i=0;i<8;i++) {
      001156 7F 00            [12] 3903 	mov	r7,#0x00
      001158                       3904 00110$:
                                   3905 ;	888n.c:537: box_apeak_xy(0,i,0,7,i,7,1,1);
      001158 8F 39            [24] 3906 	mov	_box_apeak_xy_PARM_2,r7
      00115A 75 3A 00         [24] 3907 	mov	_box_apeak_xy_PARM_3,#0x00
      00115D 75 3B 07         [24] 3908 	mov	_box_apeak_xy_PARM_4,#0x07
      001160 8F 3C            [24] 3909 	mov	_box_apeak_xy_PARM_5,r7
      001162 75 3D 07         [24] 3910 	mov	_box_apeak_xy_PARM_6,#0x07
      001165 75 3E 01         [24] 3911 	mov	_box_apeak_xy_PARM_7,#0x01
      001168 75 3F 01         [24] 3912 	mov	_box_apeak_xy_PARM_8,#0x01
      00116B 75 82 00         [24] 3913 	mov	dpl,#0x00
      00116E C0 07            [24] 3914 	push	ar7
      001170 12 08 F9         [24] 3915 	lcall	_box_apeak_xy
                                   3916 ;	888n.c:538: delay(20000);
      001173 90 4E 20         [24] 3917 	mov	dptr,#0x4e20
      001176 12 00 90         [24] 3918 	lcall	_delay
      001179 D0 07            [24] 3919 	pop	ar7
                                   3920 ;	888n.c:539: if (i<7) box_apeak_xy(0,i,0,7,i,7,1,0);
      00117B C3               [12] 3921 	clr	c
      00117C EF               [12] 3922 	mov	a,r7
      00117D 64 80            [12] 3923 	xrl	a,#0x80
      00117F 94 87            [12] 3924 	subb	a,#0x87
      001181 50 1D            [24] 3925 	jnc	00111$
      001183 8F 39            [24] 3926 	mov	_box_apeak_xy_PARM_2,r7
      001185 75 3A 00         [24] 3927 	mov	_box_apeak_xy_PARM_3,#0x00
      001188 75 3B 07         [24] 3928 	mov	_box_apeak_xy_PARM_4,#0x07
      00118B 8F 3C            [24] 3929 	mov	_box_apeak_xy_PARM_5,r7
      00118D 75 3D 07         [24] 3930 	mov	_box_apeak_xy_PARM_6,#0x07
      001190 75 3E 01         [24] 3931 	mov	_box_apeak_xy_PARM_7,#0x01
      001193 75 3F 00         [24] 3932 	mov	_box_apeak_xy_PARM_8,#0x00
      001196 75 82 00         [24] 3933 	mov	dpl,#0x00
      001199 C0 07            [24] 3934 	push	ar7
      00119B 12 08 F9         [24] 3935 	lcall	_box_apeak_xy
      00119E D0 07            [24] 3936 	pop	ar7
      0011A0                       3937 00111$:
                                   3938 ;	888n.c:536: for (i=0;i<8;i++) {
      0011A0 0F               [12] 3939 	inc	r7
      0011A1 C3               [12] 3940 	clr	c
      0011A2 EF               [12] 3941 	mov	a,r7
      0011A3 64 80            [12] 3942 	xrl	a,#0x80
      0011A5 94 88            [12] 3943 	subb	a,#0x88
      0011A7 40 AF            [24] 3944 	jc	00110$
                                   3945 ;	888n.c:542: for (i=7; i>=0; i--) {
      0011A9 7F 07            [12] 3946 	mov	r7,#0x07
      0011AB                       3947 00112$:
                                   3948 ;	888n.c:543: box_apeak_xy(0,i,0,7,i,7,1,1);
      0011AB 8F 39            [24] 3949 	mov	_box_apeak_xy_PARM_2,r7
      0011AD 75 3A 00         [24] 3950 	mov	_box_apeak_xy_PARM_3,#0x00
      0011B0 75 3B 07         [24] 3951 	mov	_box_apeak_xy_PARM_4,#0x07
      0011B3 8F 3C            [24] 3952 	mov	_box_apeak_xy_PARM_5,r7
      0011B5 75 3D 07         [24] 3953 	mov	_box_apeak_xy_PARM_6,#0x07
      0011B8 75 3E 01         [24] 3954 	mov	_box_apeak_xy_PARM_7,#0x01
      0011BB 75 3F 01         [24] 3955 	mov	_box_apeak_xy_PARM_8,#0x01
      0011BE 75 82 00         [24] 3956 	mov	dpl,#0x00
      0011C1 C0 07            [24] 3957 	push	ar7
      0011C3 12 08 F9         [24] 3958 	lcall	_box_apeak_xy
                                   3959 ;	888n.c:544: delay(20000);
      0011C6 90 4E 20         [24] 3960 	mov	dptr,#0x4e20
      0011C9 12 00 90         [24] 3961 	lcall	_delay
      0011CC D0 07            [24] 3962 	pop	ar7
                                   3963 ;	888n.c:545: if (i>0) box_apeak_xy(0,i,0,7,i,7,1,0);
      0011CE C3               [12] 3964 	clr	c
      0011CF 74 80            [12] 3965 	mov	a,#(0x00 ^ 0x80)
      0011D1 8F F0            [24] 3966 	mov	b,r7
      0011D3 63 F0 80         [24] 3967 	xrl	b,#0x80
      0011D6 95 F0            [12] 3968 	subb	a,b
      0011D8 50 1D            [24] 3969 	jnc	00113$
      0011DA 8F 39            [24] 3970 	mov	_box_apeak_xy_PARM_2,r7
      0011DC 75 3A 00         [24] 3971 	mov	_box_apeak_xy_PARM_3,#0x00
      0011DF 75 3B 07         [24] 3972 	mov	_box_apeak_xy_PARM_4,#0x07
      0011E2 8F 3C            [24] 3973 	mov	_box_apeak_xy_PARM_5,r7
      0011E4 75 3D 07         [24] 3974 	mov	_box_apeak_xy_PARM_6,#0x07
      0011E7 75 3E 01         [24] 3975 	mov	_box_apeak_xy_PARM_7,#0x01
      0011EA 75 3F 00         [24] 3976 	mov	_box_apeak_xy_PARM_8,#0x00
      0011ED 75 82 00         [24] 3977 	mov	dpl,#0x00
      0011F0 C0 07            [24] 3978 	push	ar7
      0011F2 12 08 F9         [24] 3979 	lcall	_box_apeak_xy
      0011F5 D0 07            [24] 3980 	pop	ar7
      0011F7                       3981 00113$:
                                   3982 ;	888n.c:542: for (i=7; i>=0; i--) {
      0011F7 1F               [12] 3983 	dec	r7
      0011F8 EF               [12] 3984 	mov	a,r7
      0011F9 30 E7 AF         [24] 3985 	jnb	acc.7,00112$
                                   3986 ;	888n.c:548: for (i=0; i<8; i++) {
      0011FC 7F 00            [12] 3987 	mov	r7,#0x00
      0011FE                       3988 00114$:
                                   3989 ;	888n.c:549: box_apeak_xy(0,i,0,7,i,7,1,1);
      0011FE 8F 39            [24] 3990 	mov	_box_apeak_xy_PARM_2,r7
      001200 75 3A 00         [24] 3991 	mov	_box_apeak_xy_PARM_3,#0x00
      001203 75 3B 07         [24] 3992 	mov	_box_apeak_xy_PARM_4,#0x07
      001206 8F 3C            [24] 3993 	mov	_box_apeak_xy_PARM_5,r7
      001208 75 3D 07         [24] 3994 	mov	_box_apeak_xy_PARM_6,#0x07
      00120B 75 3E 01         [24] 3995 	mov	_box_apeak_xy_PARM_7,#0x01
      00120E 75 3F 01         [24] 3996 	mov	_box_apeak_xy_PARM_8,#0x01
      001211 75 82 00         [24] 3997 	mov	dpl,#0x00
      001214 C0 07            [24] 3998 	push	ar7
      001216 12 08 F9         [24] 3999 	lcall	_box_apeak_xy
                                   4000 ;	888n.c:550: delay(20000);
      001219 90 4E 20         [24] 4001 	mov	dptr,#0x4e20
      00121C 12 00 90         [24] 4002 	lcall	_delay
      00121F D0 07            [24] 4003 	pop	ar7
                                   4004 ;	888n.c:551: if (i<7) box_apeak_xy(0,i,0,7,i,7,1,0);
      001221 C3               [12] 4005 	clr	c
      001222 EF               [12] 4006 	mov	a,r7
      001223 64 80            [12] 4007 	xrl	a,#0x80
      001225 94 87            [12] 4008 	subb	a,#0x87
      001227 50 1D            [24] 4009 	jnc	00115$
      001229 8F 39            [24] 4010 	mov	_box_apeak_xy_PARM_2,r7
      00122B 75 3A 00         [24] 4011 	mov	_box_apeak_xy_PARM_3,#0x00
      00122E 75 3B 07         [24] 4012 	mov	_box_apeak_xy_PARM_4,#0x07
      001231 8F 3C            [24] 4013 	mov	_box_apeak_xy_PARM_5,r7
      001233 75 3D 07         [24] 4014 	mov	_box_apeak_xy_PARM_6,#0x07
      001236 75 3E 01         [24] 4015 	mov	_box_apeak_xy_PARM_7,#0x01
      001239 75 3F 00         [24] 4016 	mov	_box_apeak_xy_PARM_8,#0x00
      00123C 75 82 00         [24] 4017 	mov	dpl,#0x00
      00123F C0 07            [24] 4018 	push	ar7
      001241 12 08 F9         [24] 4019 	lcall	_box_apeak_xy
      001244 D0 07            [24] 4020 	pop	ar7
      001246                       4021 00115$:
                                   4022 ;	888n.c:548: for (i=0; i<8; i++) {
      001246 0F               [12] 4023 	inc	r7
      001247 C3               [12] 4024 	clr	c
      001248 EF               [12] 4025 	mov	a,r7
      001249 64 80            [12] 4026 	xrl	a,#0x80
      00124B 94 88            [12] 4027 	subb	a,#0x88
      00124D 40 AF            [24] 4028 	jc	00114$
      00124F 22               [24] 4029 	ret
                                   4030 ;------------------------------------------------------------
                                   4031 ;Allocation info for local variables in function 'flash_4'
                                   4032 ;------------------------------------------------------------
                                   4033 ;i                         Allocated to registers r7 
                                   4034 ;j                         Allocated to registers r7 
                                   4035 ;an                        Allocated with name '_flash_4_an_1_99'
                                   4036 ;------------------------------------------------------------
                                   4037 ;	888n.c:555: void flash_4()
                                   4038 ;	-----------------------------------------
                                   4039 ;	 function flash_4
                                   4040 ;	-----------------------------------------
      001250                       4041 _flash_4:
                                   4042 ;	888n.c:560: for (j=7;j<15;j++) an[j-7]=j;
      001250 7F 07            [12] 4043 	mov	r7,#0x07
      001252                       4044 00124$:
      001252 EF               [12] 4045 	mov	a,r7
      001253 24 F9            [12] 4046 	add	a,#0xf9
      001255 24 55            [12] 4047 	add	a,#_flash_4_an_1_99
      001257 F8               [12] 4048 	mov	r0,a
      001258 A6 07            [24] 4049 	mov	@r0,ar7
      00125A 0F               [12] 4050 	inc	r7
      00125B C3               [12] 4051 	clr	c
      00125C EF               [12] 4052 	mov	a,r7
      00125D 64 80            [12] 4053 	xrl	a,#0x80
      00125F 94 8F            [12] 4054 	subb	a,#0x8f
      001261 40 EF            [24] 4055 	jc	00124$
                                   4056 ;	888n.c:562: for (i=0;i<=16;i++) {
      001263 7F 00            [12] 4057 	mov	r7,#0x00
                                   4058 ;	888n.c:563: for (j=0;j<8;j++)
      001265                       4059 00150$:
      001265 7E 00            [12] 4060 	mov	r6,#0x00
      001267                       4061 00126$:
                                   4062 ;	888n.c:564: if ((an[j]<8) && (an[j]>=0)) line(0,an[j],j,7,an[j],j,1);
      001267 EE               [12] 4063 	mov	a,r6
      001268 24 55            [12] 4064 	add	a,#_flash_4_an_1_99
      00126A F9               [12] 4065 	mov	r1,a
      00126B 87 05            [24] 4066 	mov	ar5,@r1
      00126D C3               [12] 4067 	clr	c
      00126E ED               [12] 4068 	mov	a,r5
      00126F 64 80            [12] 4069 	xrl	a,#0x80
      001271 94 88            [12] 4070 	subb	a,#0x88
      001273 50 20            [24] 4071 	jnc	00127$
      001275 ED               [12] 4072 	mov	a,r5
      001276 20 E7 1C         [24] 4073 	jb	acc.7,00127$
      001279 8D 26            [24] 4074 	mov	_line_PARM_2,r5
      00127B 8E 27            [24] 4075 	mov	_line_PARM_3,r6
      00127D 75 28 07         [24] 4076 	mov	_line_PARM_4,#0x07
      001280 8D 29            [24] 4077 	mov	_line_PARM_5,r5
      001282 8E 2A            [24] 4078 	mov	_line_PARM_6,r6
      001284 75 2B 01         [24] 4079 	mov	_line_PARM_7,#0x01
      001287 75 82 00         [24] 4080 	mov	dpl,#0x00
      00128A C0 07            [24] 4081 	push	ar7
      00128C C0 06            [24] 4082 	push	ar6
      00128E 12 03 1D         [24] 4083 	lcall	_line
      001291 D0 06            [24] 4084 	pop	ar6
      001293 D0 07            [24] 4085 	pop	ar7
      001295                       4086 00127$:
                                   4087 ;	888n.c:563: for (j=0;j<8;j++)
      001295 0E               [12] 4088 	inc	r6
      001296 C3               [12] 4089 	clr	c
      001297 EE               [12] 4090 	mov	a,r6
      001298 64 80            [12] 4091 	xrl	a,#0x80
      00129A 94 88            [12] 4092 	subb	a,#0x88
      00129C 40 C9            [24] 4093 	jc	00126$
                                   4094 ;	888n.c:565: for (j=0;j<8;j++) {
      00129E 7E 00            [12] 4095 	mov	r6,#0x00
      0012A0                       4096 00128$:
                                   4097 ;	888n.c:566: if (((an[j]+1)<8)&(an[j]>=0)) line(0,an[j]+1,j,7,an[j]+1,j,0);
      0012A0 EE               [12] 4098 	mov	a,r6
      0012A1 24 55            [12] 4099 	add	a,#_flash_4_an_1_99
      0012A3 F9               [12] 4100 	mov	r1,a
      0012A4 E7               [12] 4101 	mov	a,@r1
      0012A5 FD               [12] 4102 	mov	r5,a
      0012A6 FB               [12] 4103 	mov	r3,a
      0012A7 33               [12] 4104 	rlc	a
      0012A8 95 E0            [12] 4105 	subb	a,acc
      0012AA FC               [12] 4106 	mov	r4,a
      0012AB 0B               [12] 4107 	inc	r3
      0012AC BB 00 01         [24] 4108 	cjne	r3,#0x00,00238$
      0012AF 0C               [12] 4109 	inc	r4
      0012B0                       4110 00238$:
      0012B0 C3               [12] 4111 	clr	c
      0012B1 EB               [12] 4112 	mov	a,r3
      0012B2 94 08            [12] 4113 	subb	a,#0x08
      0012B4 EC               [12] 4114 	mov	a,r4
      0012B5 64 80            [12] 4115 	xrl	a,#0x80
      0012B7 94 80            [12] 4116 	subb	a,#0x80
      0012B9 E4               [12] 4117 	clr	a
      0012BA 33               [12] 4118 	rlc	a
      0012BB FB               [12] 4119 	mov	r3,a
      0012BC ED               [12] 4120 	mov	a,r5
      0012BD 33               [12] 4121 	rlc	a
      0012BE B3               [12] 4122 	cpl	c
      0012BF 92 01            [24] 4123 	mov	_flash_4_sloc0_1_0,c
      0012C1 E4               [12] 4124 	clr	a
      0012C2 33               [12] 4125 	rlc	a
      0012C3 FC               [12] 4126 	mov	r4,a
      0012C4 5B               [12] 4127 	anl	a,r3
      0012C5 60 1D            [24] 4128 	jz	00129$
      0012C7 0D               [12] 4129 	inc	r5
      0012C8 8D 26            [24] 4130 	mov	_line_PARM_2,r5
      0012CA 8E 27            [24] 4131 	mov	_line_PARM_3,r6
      0012CC 75 28 07         [24] 4132 	mov	_line_PARM_4,#0x07
      0012CF 8D 29            [24] 4133 	mov	_line_PARM_5,r5
      0012D1 8E 2A            [24] 4134 	mov	_line_PARM_6,r6
      0012D3 75 2B 00         [24] 4135 	mov	_line_PARM_7,#0x00
      0012D6 75 82 00         [24] 4136 	mov	dpl,#0x00
      0012D9 C0 07            [24] 4137 	push	ar7
      0012DB C0 06            [24] 4138 	push	ar6
      0012DD 12 03 1D         [24] 4139 	lcall	_line
      0012E0 D0 06            [24] 4140 	pop	ar6
      0012E2 D0 07            [24] 4141 	pop	ar7
      0012E4                       4142 00129$:
                                   4143 ;	888n.c:565: for (j=0;j<8;j++) {
      0012E4 0E               [12] 4144 	inc	r6
      0012E5 C3               [12] 4145 	clr	c
      0012E6 EE               [12] 4146 	mov	a,r6
      0012E7 64 80            [12] 4147 	xrl	a,#0x80
      0012E9 94 88            [12] 4148 	subb	a,#0x88
      0012EB 40 B3            [24] 4149 	jc	00128$
                                   4150 ;	888n.c:569: for (j=0;j<8;j++) {
      0012ED 7E 00            [12] 4151 	mov	r6,#0x00
      0012EF                       4152 00130$:
                                   4153 ;	888n.c:570: if (an[j]>0)
      0012EF EE               [12] 4154 	mov	a,r6
      0012F0 24 55            [12] 4155 	add	a,#_flash_4_an_1_99
      0012F2 F9               [12] 4156 	mov	r1,a
      0012F3 87 05            [24] 4157 	mov	ar5,@r1
      0012F5 C3               [12] 4158 	clr	c
      0012F6 74 80            [12] 4159 	mov	a,#(0x00 ^ 0x80)
      0012F8 8D F0            [24] 4160 	mov	b,r5
      0012FA 63 F0 80         [24] 4161 	xrl	b,#0x80
      0012FD 95 F0            [12] 4162 	subb	a,b
      0012FF 50 03            [24] 4163 	jnc	00131$
                                   4164 ;	888n.c:571: an[j]--;
      001301 ED               [12] 4165 	mov	a,r5
      001302 14               [12] 4166 	dec	a
      001303 F7               [12] 4167 	mov	@r1,a
      001304                       4168 00131$:
                                   4169 ;	888n.c:569: for (j=0;j<8;j++) {
      001304 0E               [12] 4170 	inc	r6
      001305 C3               [12] 4171 	clr	c
      001306 EE               [12] 4172 	mov	a,r6
      001307 64 80            [12] 4173 	xrl	a,#0x80
      001309 94 88            [12] 4174 	subb	a,#0x88
      00130B 40 E2            [24] 4175 	jc	00130$
                                   4176 ;	888n.c:573: delay(15000);
      00130D 90 3A 98         [24] 4177 	mov	dptr,#0x3a98
      001310 C0 07            [24] 4178 	push	ar7
      001312 12 00 90         [24] 4179 	lcall	_delay
      001315 D0 07            [24] 4180 	pop	ar7
                                   4181 ;	888n.c:562: for (i=0;i<=16;i++) {
      001317 0F               [12] 4182 	inc	r7
      001318 C3               [12] 4183 	clr	c
      001319 74 90            [12] 4184 	mov	a,#(0x10 ^ 0x80)
      00131B 8F F0            [24] 4185 	mov	b,r7
      00131D 63 F0 80         [24] 4186 	xrl	b,#0x80
      001320 95 F0            [12] 4187 	subb	a,b
      001322 40 03            [24] 4188 	jc	00243$
      001324 02 12 65         [24] 4189 	ljmp	00150$
      001327                       4190 00243$:
                                   4191 ;	888n.c:576: for (j=0;j<8;j++) an[j]=1-j;
      001327 7F 00            [12] 4192 	mov	r7,#0x00
      001329                       4193 00134$:
      001329 EF               [12] 4194 	mov	a,r7
      00132A 24 55            [12] 4195 	add	a,#_flash_4_an_1_99
      00132C F9               [12] 4196 	mov	r1,a
      00132D 74 01            [12] 4197 	mov	a,#0x01
      00132F C3               [12] 4198 	clr	c
      001330 9F               [12] 4199 	subb	a,r7
      001331 F7               [12] 4200 	mov	@r1,a
      001332 0F               [12] 4201 	inc	r7
      001333 C3               [12] 4202 	clr	c
      001334 EF               [12] 4203 	mov	a,r7
      001335 64 80            [12] 4204 	xrl	a,#0x80
      001337 94 88            [12] 4205 	subb	a,#0x88
      001339 40 EE            [24] 4206 	jc	00134$
                                   4207 ;	888n.c:578: for (i=0;i<=16;i++) {
      00133B 7F 00            [12] 4208 	mov	r7,#0x00
                                   4209 ;	888n.c:579: for (j=0;j<8;j++) if ((an[j]<8)&(an[j]>=0)) line(0,an[j],j,7,an[j],j,1);
      00133D                       4210 00163$:
      00133D 7E 00            [12] 4211 	mov	r6,#0x00
      00133F                       4212 00136$:
      00133F EE               [12] 4213 	mov	a,r6
      001340 24 55            [12] 4214 	add	a,#_flash_4_an_1_99
      001342 F9               [12] 4215 	mov	r1,a
      001343 87 05            [24] 4216 	mov	ar5,@r1
      001345 C3               [12] 4217 	clr	c
      001346 ED               [12] 4218 	mov	a,r5
      001347 64 80            [12] 4219 	xrl	a,#0x80
      001349 94 88            [12] 4220 	subb	a,#0x88
      00134B E4               [12] 4221 	clr	a
      00134C 33               [12] 4222 	rlc	a
      00134D FC               [12] 4223 	mov	r4,a
      00134E ED               [12] 4224 	mov	a,r5
      00134F 33               [12] 4225 	rlc	a
      001350 B3               [12] 4226 	cpl	c
      001351 92 01            [24] 4227 	mov	_flash_4_sloc0_1_0,c
      001353 E4               [12] 4228 	clr	a
      001354 33               [12] 4229 	rlc	a
      001355 FB               [12] 4230 	mov	r3,a
      001356 5C               [12] 4231 	anl	a,r4
      001357 60 1C            [24] 4232 	jz	00137$
      001359 8D 26            [24] 4233 	mov	_line_PARM_2,r5
      00135B 8E 27            [24] 4234 	mov	_line_PARM_3,r6
      00135D 75 28 07         [24] 4235 	mov	_line_PARM_4,#0x07
      001360 8D 29            [24] 4236 	mov	_line_PARM_5,r5
      001362 8E 2A            [24] 4237 	mov	_line_PARM_6,r6
      001364 75 2B 01         [24] 4238 	mov	_line_PARM_7,#0x01
      001367 75 82 00         [24] 4239 	mov	dpl,#0x00
      00136A C0 07            [24] 4240 	push	ar7
      00136C C0 06            [24] 4241 	push	ar6
      00136E 12 03 1D         [24] 4242 	lcall	_line
      001371 D0 06            [24] 4243 	pop	ar6
      001373 D0 07            [24] 4244 	pop	ar7
      001375                       4245 00137$:
      001375 0E               [12] 4246 	inc	r6
      001376 C3               [12] 4247 	clr	c
      001377 EE               [12] 4248 	mov	a,r6
      001378 64 80            [12] 4249 	xrl	a,#0x80
      00137A 94 88            [12] 4250 	subb	a,#0x88
      00137C 40 C1            [24] 4251 	jc	00136$
                                   4252 ;	888n.c:580: for (j=0;j<8;j++) {
      00137E 7E 00            [12] 4253 	mov	r6,#0x00
      001380                       4254 00138$:
                                   4255 ;	888n.c:581: if (((an[j]-1)<7)&(an[j]>0))
      001380 EE               [12] 4256 	mov	a,r6
      001381 24 55            [12] 4257 	add	a,#_flash_4_an_1_99
      001383 F9               [12] 4258 	mov	r1,a
      001384 E7               [12] 4259 	mov	a,@r1
      001385 FD               [12] 4260 	mov	r5,a
      001386 FB               [12] 4261 	mov	r3,a
      001387 33               [12] 4262 	rlc	a
      001388 95 E0            [12] 4263 	subb	a,acc
      00138A FC               [12] 4264 	mov	r4,a
      00138B 1B               [12] 4265 	dec	r3
      00138C BB FF 01         [24] 4266 	cjne	r3,#0xff,00247$
      00138F 1C               [12] 4267 	dec	r4
      001390                       4268 00247$:
      001390 C3               [12] 4269 	clr	c
      001391 EB               [12] 4270 	mov	a,r3
      001392 94 07            [12] 4271 	subb	a,#0x07
      001394 EC               [12] 4272 	mov	a,r4
      001395 64 80            [12] 4273 	xrl	a,#0x80
      001397 94 80            [12] 4274 	subb	a,#0x80
      001399 E4               [12] 4275 	clr	a
      00139A 33               [12] 4276 	rlc	a
      00139B FB               [12] 4277 	mov	r3,a
      00139C C3               [12] 4278 	clr	c
      00139D 74 80            [12] 4279 	mov	a,#(0x00 ^ 0x80)
      00139F 8D F0            [24] 4280 	mov	b,r5
      0013A1 63 F0 80         [24] 4281 	xrl	b,#0x80
      0013A4 95 F0            [12] 4282 	subb	a,b
      0013A6 E4               [12] 4283 	clr	a
      0013A7 33               [12] 4284 	rlc	a
      0013A8 FC               [12] 4285 	mov	r4,a
      0013A9 5B               [12] 4286 	anl	a,r3
      0013AA 60 1D            [24] 4287 	jz	00139$
                                   4288 ;	888n.c:582: line(0,an[j]-1,j,7,an[j]-1,j,0);
      0013AC 1D               [12] 4289 	dec	r5
      0013AD 8D 26            [24] 4290 	mov	_line_PARM_2,r5
      0013AF 8E 27            [24] 4291 	mov	_line_PARM_3,r6
      0013B1 75 28 07         [24] 4292 	mov	_line_PARM_4,#0x07
      0013B4 8D 29            [24] 4293 	mov	_line_PARM_5,r5
      0013B6 8E 2A            [24] 4294 	mov	_line_PARM_6,r6
      0013B8 75 2B 00         [24] 4295 	mov	_line_PARM_7,#0x00
      0013BB 75 82 00         [24] 4296 	mov	dpl,#0x00
      0013BE C0 07            [24] 4297 	push	ar7
      0013C0 C0 06            [24] 4298 	push	ar6
      0013C2 12 03 1D         [24] 4299 	lcall	_line
      0013C5 D0 06            [24] 4300 	pop	ar6
      0013C7 D0 07            [24] 4301 	pop	ar7
      0013C9                       4302 00139$:
                                   4303 ;	888n.c:580: for (j=0;j<8;j++) {
      0013C9 0E               [12] 4304 	inc	r6
      0013CA C3               [12] 4305 	clr	c
      0013CB EE               [12] 4306 	mov	a,r6
      0013CC 64 80            [12] 4307 	xrl	a,#0x80
      0013CE 94 88            [12] 4308 	subb	a,#0x88
      0013D0 40 AE            [24] 4309 	jc	00138$
                                   4310 ;	888n.c:585: for (j=0;j<8;j++) {
      0013D2 7E 00            [12] 4311 	mov	r6,#0x00
      0013D4                       4312 00140$:
                                   4313 ;	888n.c:586: if (an[j]<7) an[j]++;
      0013D4 EE               [12] 4314 	mov	a,r6
      0013D5 24 55            [12] 4315 	add	a,#_flash_4_an_1_99
      0013D7 F9               [12] 4316 	mov	r1,a
      0013D8 87 05            [24] 4317 	mov	ar5,@r1
      0013DA C3               [12] 4318 	clr	c
      0013DB ED               [12] 4319 	mov	a,r5
      0013DC 64 80            [12] 4320 	xrl	a,#0x80
      0013DE 94 87            [12] 4321 	subb	a,#0x87
      0013E0 50 03            [24] 4322 	jnc	00141$
      0013E2 ED               [12] 4323 	mov	a,r5
      0013E3 04               [12] 4324 	inc	a
      0013E4 F7               [12] 4325 	mov	@r1,a
      0013E5                       4326 00141$:
                                   4327 ;	888n.c:585: for (j=0;j<8;j++) {
      0013E5 0E               [12] 4328 	inc	r6
      0013E6 C3               [12] 4329 	clr	c
      0013E7 EE               [12] 4330 	mov	a,r6
      0013E8 64 80            [12] 4331 	xrl	a,#0x80
      0013EA 94 88            [12] 4332 	subb	a,#0x88
      0013EC 40 E6            [24] 4333 	jc	00140$
                                   4334 ;	888n.c:588: delay(15000);
      0013EE 90 3A 98         [24] 4335 	mov	dptr,#0x3a98
      0013F1 C0 07            [24] 4336 	push	ar7
      0013F3 12 00 90         [24] 4337 	lcall	_delay
      0013F6 D0 07            [24] 4338 	pop	ar7
                                   4339 ;	888n.c:578: for (i=0;i<=16;i++) {
      0013F8 0F               [12] 4340 	inc	r7
      0013F9 C3               [12] 4341 	clr	c
      0013FA 74 90            [12] 4342 	mov	a,#(0x10 ^ 0x80)
      0013FC 8F F0            [24] 4343 	mov	b,r7
      0013FE 63 F0 80         [24] 4344 	xrl	b,#0x80
      001401 95 F0            [12] 4345 	subb	a,b
      001403 40 03            [24] 4346 	jc	00252$
      001405 02 13 3D         [24] 4347 	ljmp	00163$
      001408                       4348 00252$:
      001408 22               [24] 4349 	ret
                                   4350 ;------------------------------------------------------------
                                   4351 ;Allocation info for local variables in function 'flash_5'
                                   4352 ;------------------------------------------------------------
                                   4353 ;a                         Allocated to registers 
                                   4354 ;i                         Allocated to registers r7 
                                   4355 ;j                         Allocated to registers r7 
                                   4356 ;an                        Allocated with name '_flash_5_an_1_106'
                                   4357 ;------------------------------------------------------------
                                   4358 ;	888n.c:592: void flash_5()
                                   4359 ;	-----------------------------------------
                                   4360 ;	 function flash_5
                                   4361 ;	-----------------------------------------
      001409                       4362 _flash_5:
                                   4363 ;	888n.c:598: for (j=7;j<11;j++) an[j-7]=j;
      001409 7F 07            [12] 4364 	mov	r7,#0x07
      00140B                       4365 00191$:
      00140B EF               [12] 4366 	mov	a,r7
      00140C 24 F9            [12] 4367 	add	a,#0xf9
      00140E 24 5D            [12] 4368 	add	a,#_flash_5_an_1_106
      001410 F8               [12] 4369 	mov	r0,a
      001411 A6 07            [24] 4370 	mov	@r0,ar7
      001413 0F               [12] 4371 	inc	r7
      001414 C3               [12] 4372 	clr	c
      001415 EF               [12] 4373 	mov	a,r7
      001416 64 80            [12] 4374 	xrl	a,#0x80
      001418 94 8B            [12] 4375 	subb	a,#0x8b
      00141A 40 EF            [24] 4376 	jc	00191$
                                   4377 ;	888n.c:599: while (i--) {
      00141C 7F 08            [12] 4378 	mov	r7,#0x08
      00141E                       4379 00110$:
      00141E 8F 06            [24] 4380 	mov	ar6,r7
      001420 1F               [12] 4381 	dec	r7
      001421 EE               [12] 4382 	mov	a,r6
      001422 70 03            [24] 4383 	jnz	00521$
      001424 02 14 C0         [24] 4384 	ljmp	00112$
      001427                       4385 00521$:
                                   4386 ;	888n.c:600: for (j=0;j<4;j++) {
      001427 7E 00            [12] 4387 	mov	r6,#0x00
      001429                       4388 00193$:
                                   4389 ;	888n.c:601: if (an[j]<8) box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);
      001429 EE               [12] 4390 	mov	a,r6
      00142A 24 5D            [12] 4391 	add	a,#_flash_5_an_1_106
      00142C F9               [12] 4392 	mov	r1,a
      00142D 87 05            [24] 4393 	mov	ar5,@r1
      00142F C3               [12] 4394 	clr	c
      001430 ED               [12] 4395 	mov	a,r5
      001431 64 80            [12] 4396 	xrl	a,#0x80
      001433 94 88            [12] 4397 	subb	a,#0x88
      001435 50 22            [24] 4398 	jnc	00103$
      001437 74 07            [12] 4399 	mov	a,#0x07
      001439 C3               [12] 4400 	clr	c
      00143A 9E               [12] 4401 	subb	a,r6
      00143B FC               [12] 4402 	mov	r4,a
      00143C 8D 39            [24] 4403 	mov	_box_apeak_xy_PARM_2,r5
      00143E 8E 3A            [24] 4404 	mov	_box_apeak_xy_PARM_3,r6
      001440 8C 3B            [24] 4405 	mov	_box_apeak_xy_PARM_4,r4
      001442 8D 3C            [24] 4406 	mov	_box_apeak_xy_PARM_5,r5
      001444 8C 3D            [24] 4407 	mov	_box_apeak_xy_PARM_6,r4
      001446 75 3E 00         [24] 4408 	mov	_box_apeak_xy_PARM_7,#0x00
      001449 75 3F 01         [24] 4409 	mov	_box_apeak_xy_PARM_8,#0x01
      00144C 8E 82            [24] 4410 	mov	dpl,r6
      00144E C0 07            [24] 4411 	push	ar7
      001450 C0 06            [24] 4412 	push	ar6
      001452 12 08 F9         [24] 4413 	lcall	_box_apeak_xy
      001455 D0 06            [24] 4414 	pop	ar6
      001457 D0 07            [24] 4415 	pop	ar7
      001459                       4416 00103$:
                                   4417 ;	888n.c:602: if (an[j]<7) box_apeak_xy(j,an[j]+1,j,7-j,an[j]+1,7-j,0,0);
      001459 EE               [12] 4418 	mov	a,r6
      00145A 24 5D            [12] 4419 	add	a,#_flash_5_an_1_106
      00145C F9               [12] 4420 	mov	r1,a
      00145D 87 05            [24] 4421 	mov	ar5,@r1
      00145F C3               [12] 4422 	clr	c
      001460 ED               [12] 4423 	mov	a,r5
      001461 64 80            [12] 4424 	xrl	a,#0x80
      001463 94 87            [12] 4425 	subb	a,#0x87
      001465 50 23            [24] 4426 	jnc	00194$
      001467 0D               [12] 4427 	inc	r5
      001468 74 07            [12] 4428 	mov	a,#0x07
      00146A C3               [12] 4429 	clr	c
      00146B 9E               [12] 4430 	subb	a,r6
      00146C FC               [12] 4431 	mov	r4,a
      00146D 8D 39            [24] 4432 	mov	_box_apeak_xy_PARM_2,r5
      00146F 8E 3A            [24] 4433 	mov	_box_apeak_xy_PARM_3,r6
      001471 8C 3B            [24] 4434 	mov	_box_apeak_xy_PARM_4,r4
      001473 8D 3C            [24] 4435 	mov	_box_apeak_xy_PARM_5,r5
      001475 8C 3D            [24] 4436 	mov	_box_apeak_xy_PARM_6,r4
      001477 75 3E 00         [24] 4437 	mov	_box_apeak_xy_PARM_7,#0x00
      00147A 75 3F 00         [24] 4438 	mov	_box_apeak_xy_PARM_8,#0x00
      00147D 8E 82            [24] 4439 	mov	dpl,r6
      00147F C0 07            [24] 4440 	push	ar7
      001481 C0 06            [24] 4441 	push	ar6
      001483 12 08 F9         [24] 4442 	lcall	_box_apeak_xy
      001486 D0 06            [24] 4443 	pop	ar6
      001488 D0 07            [24] 4444 	pop	ar7
      00148A                       4445 00194$:
                                   4446 ;	888n.c:600: for (j=0;j<4;j++) {
      00148A 0E               [12] 4447 	inc	r6
      00148B C3               [12] 4448 	clr	c
      00148C EE               [12] 4449 	mov	a,r6
      00148D 64 80            [12] 4450 	xrl	a,#0x80
      00148F 94 84            [12] 4451 	subb	a,#0x84
      001491 40 96            [24] 4452 	jc	00193$
                                   4453 ;	888n.c:604: for (j=0;j<4;j++)
      001493 7E 00            [12] 4454 	mov	r6,#0x00
      001495                       4455 00195$:
                                   4456 ;	888n.c:605: if (an[j]>3) an[j]--;
      001495 EE               [12] 4457 	mov	a,r6
      001496 24 5D            [12] 4458 	add	a,#_flash_5_an_1_106
      001498 F9               [12] 4459 	mov	r1,a
      001499 87 05            [24] 4460 	mov	ar5,@r1
      00149B C3               [12] 4461 	clr	c
      00149C 74 83            [12] 4462 	mov	a,#(0x03 ^ 0x80)
      00149E 8D F0            [24] 4463 	mov	b,r5
      0014A0 63 F0 80         [24] 4464 	xrl	b,#0x80
      0014A3 95 F0            [12] 4465 	subb	a,b
      0014A5 50 03            [24] 4466 	jnc	00196$
      0014A7 ED               [12] 4467 	mov	a,r5
      0014A8 14               [12] 4468 	dec	a
      0014A9 F7               [12] 4469 	mov	@r1,a
      0014AA                       4470 00196$:
                                   4471 ;	888n.c:604: for (j=0;j<4;j++)
      0014AA 0E               [12] 4472 	inc	r6
      0014AB C3               [12] 4473 	clr	c
      0014AC EE               [12] 4474 	mov	a,r6
      0014AD 64 80            [12] 4475 	xrl	a,#0x80
      0014AF 94 84            [12] 4476 	subb	a,#0x84
      0014B1 40 E2            [24] 4477 	jc	00195$
                                   4478 ;	888n.c:606: delay(a);
      0014B3 90 3A 98         [24] 4479 	mov	dptr,#0x3a98
      0014B6 C0 07            [24] 4480 	push	ar7
      0014B8 12 00 90         [24] 4481 	lcall	_delay
      0014BB D0 07            [24] 4482 	pop	ar7
      0014BD 02 14 1E         [24] 4483 	ljmp	00110$
      0014C0                       4484 00112$:
                                   4485 ;	888n.c:611: for (j=0;j<4;j++) an[j]=5-j;
      0014C0 7F 00            [12] 4486 	mov	r7,#0x00
      0014C2                       4487 00197$:
      0014C2 EF               [12] 4488 	mov	a,r7
      0014C3 24 5D            [12] 4489 	add	a,#_flash_5_an_1_106
      0014C5 F9               [12] 4490 	mov	r1,a
      0014C6 74 05            [12] 4491 	mov	a,#0x05
      0014C8 C3               [12] 4492 	clr	c
      0014C9 9F               [12] 4493 	subb	a,r7
      0014CA F7               [12] 4494 	mov	@r1,a
      0014CB 0F               [12] 4495 	inc	r7
      0014CC C3               [12] 4496 	clr	c
      0014CD EF               [12] 4497 	mov	a,r7
      0014CE 64 80            [12] 4498 	xrl	a,#0x80
      0014D0 94 84            [12] 4499 	subb	a,#0x84
      0014D2 40 EE            [24] 4500 	jc	00197$
                                   4501 ;	888n.c:612: while (i--) {
      0014D4 7F 03            [12] 4502 	mov	r7,#0x03
      0014D6                       4503 00122$:
      0014D6 8F 06            [24] 4504 	mov	ar6,r7
      0014D8 1F               [12] 4505 	dec	r7
      0014D9 EE               [12] 4506 	mov	a,r6
      0014DA 70 03            [24] 4507 	jnz	00528$
      0014DC 02 15 78         [24] 4508 	ljmp	00124$
      0014DF                       4509 00528$:
                                   4510 ;	888n.c:613: for (j=1;j<4;j++) {
      0014DF 7E 01            [12] 4511 	mov	r6,#0x01
      0014E1                       4512 00199$:
                                   4513 ;	888n.c:614: if (an[j]<4) box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);
      0014E1 EE               [12] 4514 	mov	a,r6
      0014E2 24 5D            [12] 4515 	add	a,#_flash_5_an_1_106
      0014E4 F9               [12] 4516 	mov	r1,a
      0014E5 87 05            [24] 4517 	mov	ar5,@r1
      0014E7 C3               [12] 4518 	clr	c
      0014E8 ED               [12] 4519 	mov	a,r5
      0014E9 64 80            [12] 4520 	xrl	a,#0x80
      0014EB 94 84            [12] 4521 	subb	a,#0x84
      0014ED 50 22            [24] 4522 	jnc	00115$
      0014EF 74 07            [12] 4523 	mov	a,#0x07
      0014F1 C3               [12] 4524 	clr	c
      0014F2 9E               [12] 4525 	subb	a,r6
      0014F3 FC               [12] 4526 	mov	r4,a
      0014F4 8D 39            [24] 4527 	mov	_box_apeak_xy_PARM_2,r5
      0014F6 8E 3A            [24] 4528 	mov	_box_apeak_xy_PARM_3,r6
      0014F8 8C 3B            [24] 4529 	mov	_box_apeak_xy_PARM_4,r4
      0014FA 8D 3C            [24] 4530 	mov	_box_apeak_xy_PARM_5,r5
      0014FC 8C 3D            [24] 4531 	mov	_box_apeak_xy_PARM_6,r4
      0014FE 75 3E 00         [24] 4532 	mov	_box_apeak_xy_PARM_7,#0x00
      001501 75 3F 01         [24] 4533 	mov	_box_apeak_xy_PARM_8,#0x01
      001504 8E 82            [24] 4534 	mov	dpl,r6
      001506 C0 07            [24] 4535 	push	ar7
      001508 C0 06            [24] 4536 	push	ar6
      00150A 12 08 F9         [24] 4537 	lcall	_box_apeak_xy
      00150D D0 06            [24] 4538 	pop	ar6
      00150F D0 07            [24] 4539 	pop	ar7
      001511                       4540 00115$:
                                   4541 ;	888n.c:615: if (an[j]<3) box_apeak_xy(j,an[j]+1,j,7-j,an[j]+1,7-j,0,0);
      001511 EE               [12] 4542 	mov	a,r6
      001512 24 5D            [12] 4543 	add	a,#_flash_5_an_1_106
      001514 F9               [12] 4544 	mov	r1,a
      001515 87 05            [24] 4545 	mov	ar5,@r1
      001517 C3               [12] 4546 	clr	c
      001518 ED               [12] 4547 	mov	a,r5
      001519 64 80            [12] 4548 	xrl	a,#0x80
      00151B 94 83            [12] 4549 	subb	a,#0x83
      00151D 50 23            [24] 4550 	jnc	00200$
      00151F 0D               [12] 4551 	inc	r5
      001520 74 07            [12] 4552 	mov	a,#0x07
      001522 C3               [12] 4553 	clr	c
      001523 9E               [12] 4554 	subb	a,r6
      001524 FC               [12] 4555 	mov	r4,a
      001525 8D 39            [24] 4556 	mov	_box_apeak_xy_PARM_2,r5
      001527 8E 3A            [24] 4557 	mov	_box_apeak_xy_PARM_3,r6
      001529 8C 3B            [24] 4558 	mov	_box_apeak_xy_PARM_4,r4
      00152B 8D 3C            [24] 4559 	mov	_box_apeak_xy_PARM_5,r5
      00152D 8C 3D            [24] 4560 	mov	_box_apeak_xy_PARM_6,r4
      00152F 75 3E 00         [24] 4561 	mov	_box_apeak_xy_PARM_7,#0x00
      001532 75 3F 00         [24] 4562 	mov	_box_apeak_xy_PARM_8,#0x00
      001535 8E 82            [24] 4563 	mov	dpl,r6
      001537 C0 07            [24] 4564 	push	ar7
      001539 C0 06            [24] 4565 	push	ar6
      00153B 12 08 F9         [24] 4566 	lcall	_box_apeak_xy
      00153E D0 06            [24] 4567 	pop	ar6
      001540 D0 07            [24] 4568 	pop	ar7
      001542                       4569 00200$:
                                   4570 ;	888n.c:613: for (j=1;j<4;j++) {
      001542 0E               [12] 4571 	inc	r6
      001543 C3               [12] 4572 	clr	c
      001544 EE               [12] 4573 	mov	a,r6
      001545 64 80            [12] 4574 	xrl	a,#0x80
      001547 94 84            [12] 4575 	subb	a,#0x84
      001549 40 96            [24] 4576 	jc	00199$
                                   4577 ;	888n.c:617: for (j=0;j<4;j++)
      00154B 7E 00            [12] 4578 	mov	r6,#0x00
      00154D                       4579 00201$:
                                   4580 ;	888n.c:618: if (an[j]>0) an[j]--;
      00154D EE               [12] 4581 	mov	a,r6
      00154E 24 5D            [12] 4582 	add	a,#_flash_5_an_1_106
      001550 F9               [12] 4583 	mov	r1,a
      001551 87 05            [24] 4584 	mov	ar5,@r1
      001553 C3               [12] 4585 	clr	c
      001554 74 80            [12] 4586 	mov	a,#(0x00 ^ 0x80)
      001556 8D F0            [24] 4587 	mov	b,r5
      001558 63 F0 80         [24] 4588 	xrl	b,#0x80
      00155B 95 F0            [12] 4589 	subb	a,b
      00155D 50 03            [24] 4590 	jnc	00202$
      00155F ED               [12] 4591 	mov	a,r5
      001560 14               [12] 4592 	dec	a
      001561 F7               [12] 4593 	mov	@r1,a
      001562                       4594 00202$:
                                   4595 ;	888n.c:617: for (j=0;j<4;j++)
      001562 0E               [12] 4596 	inc	r6
      001563 C3               [12] 4597 	clr	c
      001564 EE               [12] 4598 	mov	a,r6
      001565 64 80            [12] 4599 	xrl	a,#0x80
      001567 94 84            [12] 4600 	subb	a,#0x84
      001569 40 E2            [24] 4601 	jc	00201$
                                   4602 ;	888n.c:619: delay(a);
      00156B 90 3A 98         [24] 4603 	mov	dptr,#0x3a98
      00156E C0 07            [24] 4604 	push	ar7
      001570 12 00 90         [24] 4605 	lcall	_delay
      001573 D0 07            [24] 4606 	pop	ar7
      001575 02 14 D6         [24] 4607 	ljmp	00122$
      001578                       4608 00124$:
                                   4609 ;	888n.c:624: for (j=1;j<4;j++) an[j]=4-j;
      001578 7F 01            [12] 4610 	mov	r7,#0x01
      00157A                       4611 00203$:
      00157A EF               [12] 4612 	mov	a,r7
      00157B 24 5D            [12] 4613 	add	a,#_flash_5_an_1_106
      00157D F9               [12] 4614 	mov	r1,a
      00157E 74 04            [12] 4615 	mov	a,#0x04
      001580 C3               [12] 4616 	clr	c
      001581 9F               [12] 4617 	subb	a,r7
      001582 F7               [12] 4618 	mov	@r1,a
      001583 0F               [12] 4619 	inc	r7
      001584 C3               [12] 4620 	clr	c
      001585 EF               [12] 4621 	mov	a,r7
      001586 64 80            [12] 4622 	xrl	a,#0x80
      001588 94 84            [12] 4623 	subb	a,#0x84
      00158A 40 EE            [24] 4624 	jc	00203$
                                   4625 ;	888n.c:625: while (i--) {
      00158C 7F 03            [12] 4626 	mov	r7,#0x03
      00158E                       4627 00134$:
      00158E 8F 06            [24] 4628 	mov	ar6,r7
      001590 1F               [12] 4629 	dec	r7
      001591 EE               [12] 4630 	mov	a,r6
      001592 70 03            [24] 4631 	jnz	00535$
      001594 02 16 2B         [24] 4632 	ljmp	00136$
      001597                       4633 00535$:
                                   4634 ;	888n.c:626: for (j=1;j<4;j++) {
      001597 7E 01            [12] 4635 	mov	r6,#0x01
      001599                       4636 00205$:
                                   4637 ;	888n.c:627: if (an[j]>=0) box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);
      001599 EE               [12] 4638 	mov	a,r6
      00159A 24 5D            [12] 4639 	add	a,#_flash_5_an_1_106
      00159C F9               [12] 4640 	mov	r1,a
      00159D E7               [12] 4641 	mov	a,@r1
      00159E FD               [12] 4642 	mov	r5,a
      00159F 20 E7 22         [24] 4643 	jb	acc.7,00127$
      0015A2 74 07            [12] 4644 	mov	a,#0x07
      0015A4 C3               [12] 4645 	clr	c
      0015A5 9E               [12] 4646 	subb	a,r6
      0015A6 FC               [12] 4647 	mov	r4,a
      0015A7 8D 39            [24] 4648 	mov	_box_apeak_xy_PARM_2,r5
      0015A9 8E 3A            [24] 4649 	mov	_box_apeak_xy_PARM_3,r6
      0015AB 8C 3B            [24] 4650 	mov	_box_apeak_xy_PARM_4,r4
      0015AD 8D 3C            [24] 4651 	mov	_box_apeak_xy_PARM_5,r5
      0015AF 8C 3D            [24] 4652 	mov	_box_apeak_xy_PARM_6,r4
      0015B1 75 3E 00         [24] 4653 	mov	_box_apeak_xy_PARM_7,#0x00
      0015B4 75 3F 01         [24] 4654 	mov	_box_apeak_xy_PARM_8,#0x01
      0015B7 8E 82            [24] 4655 	mov	dpl,r6
      0015B9 C0 07            [24] 4656 	push	ar7
      0015BB C0 06            [24] 4657 	push	ar6
      0015BD 12 08 F9         [24] 4658 	lcall	_box_apeak_xy
      0015C0 D0 06            [24] 4659 	pop	ar6
      0015C2 D0 07            [24] 4660 	pop	ar7
      0015C4                       4661 00127$:
                                   4662 ;	888n.c:628: if (an[j]>0) box_apeak_xy(j,an[j]-1,j,7-j,an[j]-1,7-j,0,0);
      0015C4 EE               [12] 4663 	mov	a,r6
      0015C5 24 5D            [12] 4664 	add	a,#_flash_5_an_1_106
      0015C7 F9               [12] 4665 	mov	r1,a
      0015C8 87 05            [24] 4666 	mov	ar5,@r1
      0015CA C3               [12] 4667 	clr	c
      0015CB 74 80            [12] 4668 	mov	a,#(0x00 ^ 0x80)
      0015CD 8D F0            [24] 4669 	mov	b,r5
      0015CF 63 F0 80         [24] 4670 	xrl	b,#0x80
      0015D2 95 F0            [12] 4671 	subb	a,b
      0015D4 50 23            [24] 4672 	jnc	00206$
      0015D6 1D               [12] 4673 	dec	r5
      0015D7 74 07            [12] 4674 	mov	a,#0x07
      0015D9 C3               [12] 4675 	clr	c
      0015DA 9E               [12] 4676 	subb	a,r6
      0015DB FC               [12] 4677 	mov	r4,a
      0015DC 8D 39            [24] 4678 	mov	_box_apeak_xy_PARM_2,r5
      0015DE 8E 3A            [24] 4679 	mov	_box_apeak_xy_PARM_3,r6
      0015E0 8C 3B            [24] 4680 	mov	_box_apeak_xy_PARM_4,r4
      0015E2 8D 3C            [24] 4681 	mov	_box_apeak_xy_PARM_5,r5
      0015E4 8C 3D            [24] 4682 	mov	_box_apeak_xy_PARM_6,r4
      0015E6 75 3E 00         [24] 4683 	mov	_box_apeak_xy_PARM_7,#0x00
      0015E9 75 3F 00         [24] 4684 	mov	_box_apeak_xy_PARM_8,#0x00
      0015EC 8E 82            [24] 4685 	mov	dpl,r6
      0015EE C0 07            [24] 4686 	push	ar7
      0015F0 C0 06            [24] 4687 	push	ar6
      0015F2 12 08 F9         [24] 4688 	lcall	_box_apeak_xy
      0015F5 D0 06            [24] 4689 	pop	ar6
      0015F7 D0 07            [24] 4690 	pop	ar7
      0015F9                       4691 00206$:
                                   4692 ;	888n.c:626: for (j=1;j<4;j++) {
      0015F9 0E               [12] 4693 	inc	r6
      0015FA C3               [12] 4694 	clr	c
      0015FB EE               [12] 4695 	mov	a,r6
      0015FC 64 80            [12] 4696 	xrl	a,#0x80
      0015FE 94 84            [12] 4697 	subb	a,#0x84
      001600 40 97            [24] 4698 	jc	00205$
                                   4699 ;	888n.c:630: for (j=1;j<4;j++)
      001602 7E 01            [12] 4700 	mov	r6,#0x01
      001604                       4701 00207$:
                                   4702 ;	888n.c:631: if (an[j]<3) an[j]++;
      001604 EE               [12] 4703 	mov	a,r6
      001605 24 5D            [12] 4704 	add	a,#_flash_5_an_1_106
      001607 F9               [12] 4705 	mov	r1,a
      001608 87 05            [24] 4706 	mov	ar5,@r1
      00160A C3               [12] 4707 	clr	c
      00160B ED               [12] 4708 	mov	a,r5
      00160C 64 80            [12] 4709 	xrl	a,#0x80
      00160E 94 83            [12] 4710 	subb	a,#0x83
      001610 50 03            [24] 4711 	jnc	00208$
      001612 ED               [12] 4712 	mov	a,r5
      001613 04               [12] 4713 	inc	a
      001614 F7               [12] 4714 	mov	@r1,a
      001615                       4715 00208$:
                                   4716 ;	888n.c:630: for (j=1;j<4;j++)
      001615 0E               [12] 4717 	inc	r6
      001616 C3               [12] 4718 	clr	c
      001617 EE               [12] 4719 	mov	a,r6
      001618 64 80            [12] 4720 	xrl	a,#0x80
      00161A 94 84            [12] 4721 	subb	a,#0x84
      00161C 40 E6            [24] 4722 	jc	00207$
                                   4723 ;	888n.c:632: delay(a);
      00161E 90 3A 98         [24] 4724 	mov	dptr,#0x3a98
      001621 C0 07            [24] 4725 	push	ar7
      001623 12 00 90         [24] 4726 	lcall	_delay
      001626 D0 07            [24] 4727 	pop	ar7
      001628 02 15 8E         [24] 4728 	ljmp	00134$
      00162B                       4729 00136$:
                                   4730 ;	888n.c:637: for (j=0;j<4;j++) an[j]=j+1;
      00162B 7F 00            [12] 4731 	mov	r7,#0x00
      00162D                       4732 00209$:
      00162D EF               [12] 4733 	mov	a,r7
      00162E 24 5D            [12] 4734 	add	a,#_flash_5_an_1_106
      001630 F9               [12] 4735 	mov	r1,a
      001631 EF               [12] 4736 	mov	a,r7
      001632 04               [12] 4737 	inc	a
      001633 FE               [12] 4738 	mov	r6,a
      001634 F7               [12] 4739 	mov	@r1,a
      001635 8E 07            [24] 4740 	mov	ar7,r6
      001637 C3               [12] 4741 	clr	c
      001638 EF               [12] 4742 	mov	a,r7
      001639 64 80            [12] 4743 	xrl	a,#0x80
      00163B 94 84            [12] 4744 	subb	a,#0x84
      00163D 40 EE            [24] 4745 	jc	00209$
                                   4746 ;	888n.c:638: while (i--) {
      00163F 7F 03            [12] 4747 	mov	r7,#0x03
      001641                       4748 00144$:
      001641 8F 06            [24] 4749 	mov	ar6,r7
      001643 1F               [12] 4750 	dec	r7
      001644 EE               [12] 4751 	mov	a,r6
      001645 70 03            [24] 4752 	jnz	00542$
      001647 02 16 DE         [24] 4753 	ljmp	00146$
      00164A                       4754 00542$:
                                   4755 ;	888n.c:639: for (j=1;j<4;j++) {
      00164A 7E 01            [12] 4756 	mov	r6,#0x01
      00164C                       4757 00211$:
                                   4758 ;	888n.c:640: if (an[j]>3) box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);
      00164C EE               [12] 4759 	mov	a,r6
      00164D 24 5D            [12] 4760 	add	a,#_flash_5_an_1_106
      00164F F9               [12] 4761 	mov	r1,a
      001650 87 05            [24] 4762 	mov	ar5,@r1
      001652 C3               [12] 4763 	clr	c
      001653 74 83            [12] 4764 	mov	a,#(0x03 ^ 0x80)
      001655 8D F0            [24] 4765 	mov	b,r5
      001657 63 F0 80         [24] 4766 	xrl	b,#0x80
      00165A 95 F0            [12] 4767 	subb	a,b
      00165C 50 22            [24] 4768 	jnc	00139$
      00165E 74 07            [12] 4769 	mov	a,#0x07
      001660 C3               [12] 4770 	clr	c
      001661 9E               [12] 4771 	subb	a,r6
      001662 FC               [12] 4772 	mov	r4,a
      001663 8D 39            [24] 4773 	mov	_box_apeak_xy_PARM_2,r5
      001665 8E 3A            [24] 4774 	mov	_box_apeak_xy_PARM_3,r6
      001667 8C 3B            [24] 4775 	mov	_box_apeak_xy_PARM_4,r4
      001669 8D 3C            [24] 4776 	mov	_box_apeak_xy_PARM_5,r5
      00166B 8C 3D            [24] 4777 	mov	_box_apeak_xy_PARM_6,r4
      00166D 75 3E 00         [24] 4778 	mov	_box_apeak_xy_PARM_7,#0x00
      001670 75 3F 01         [24] 4779 	mov	_box_apeak_xy_PARM_8,#0x01
      001673 8E 82            [24] 4780 	mov	dpl,r6
      001675 C0 07            [24] 4781 	push	ar7
      001677 C0 06            [24] 4782 	push	ar6
      001679 12 08 F9         [24] 4783 	lcall	_box_apeak_xy
      00167C D0 06            [24] 4784 	pop	ar6
      00167E D0 07            [24] 4785 	pop	ar7
      001680                       4786 00139$:
                                   4787 ;	888n.c:641: if (an[j]>3) box_apeak_xy(j,an[j]-1,j,7-j,an[j]-1,7-j,0,0);
      001680 EE               [12] 4788 	mov	a,r6
      001681 24 5D            [12] 4789 	add	a,#_flash_5_an_1_106
      001683 F9               [12] 4790 	mov	r1,a
      001684 87 05            [24] 4791 	mov	ar5,@r1
      001686 C3               [12] 4792 	clr	c
      001687 74 83            [12] 4793 	mov	a,#(0x03 ^ 0x80)
      001689 8D F0            [24] 4794 	mov	b,r5
      00168B 63 F0 80         [24] 4795 	xrl	b,#0x80
      00168E 95 F0            [12] 4796 	subb	a,b
      001690 50 23            [24] 4797 	jnc	00212$
      001692 1D               [12] 4798 	dec	r5
      001693 74 07            [12] 4799 	mov	a,#0x07
      001695 C3               [12] 4800 	clr	c
      001696 9E               [12] 4801 	subb	a,r6
      001697 FC               [12] 4802 	mov	r4,a
      001698 8D 39            [24] 4803 	mov	_box_apeak_xy_PARM_2,r5
      00169A 8E 3A            [24] 4804 	mov	_box_apeak_xy_PARM_3,r6
      00169C 8C 3B            [24] 4805 	mov	_box_apeak_xy_PARM_4,r4
      00169E 8D 3C            [24] 4806 	mov	_box_apeak_xy_PARM_5,r5
      0016A0 8C 3D            [24] 4807 	mov	_box_apeak_xy_PARM_6,r4
      0016A2 75 3E 00         [24] 4808 	mov	_box_apeak_xy_PARM_7,#0x00
      0016A5 75 3F 00         [24] 4809 	mov	_box_apeak_xy_PARM_8,#0x00
      0016A8 8E 82            [24] 4810 	mov	dpl,r6
      0016AA C0 07            [24] 4811 	push	ar7
      0016AC C0 06            [24] 4812 	push	ar6
      0016AE 12 08 F9         [24] 4813 	lcall	_box_apeak_xy
      0016B1 D0 06            [24] 4814 	pop	ar6
      0016B3 D0 07            [24] 4815 	pop	ar7
      0016B5                       4816 00212$:
                                   4817 ;	888n.c:639: for (j=1;j<4;j++) {
      0016B5 0E               [12] 4818 	inc	r6
      0016B6 C3               [12] 4819 	clr	c
      0016B7 EE               [12] 4820 	mov	a,r6
      0016B8 64 80            [12] 4821 	xrl	a,#0x80
      0016BA 94 84            [12] 4822 	subb	a,#0x84
      0016BC 40 8E            [24] 4823 	jc	00211$
                                   4824 ;	888n.c:643: for (j=0;j<4;j++) an[j]++;
      0016BE 7E 00            [12] 4825 	mov	r6,#0x00
      0016C0                       4826 00213$:
      0016C0 EE               [12] 4827 	mov	a,r6
      0016C1 24 5D            [12] 4828 	add	a,#_flash_5_an_1_106
      0016C3 F9               [12] 4829 	mov	r1,a
      0016C4 E7               [12] 4830 	mov	a,@r1
      0016C5 FD               [12] 4831 	mov	r5,a
      0016C6 04               [12] 4832 	inc	a
      0016C7 F7               [12] 4833 	mov	@r1,a
      0016C8 0E               [12] 4834 	inc	r6
      0016C9 C3               [12] 4835 	clr	c
      0016CA EE               [12] 4836 	mov	a,r6
      0016CB 64 80            [12] 4837 	xrl	a,#0x80
      0016CD 94 84            [12] 4838 	subb	a,#0x84
      0016CF 40 EF            [24] 4839 	jc	00213$
                                   4840 ;	888n.c:644: delay(a);
      0016D1 90 3A 98         [24] 4841 	mov	dptr,#0x3a98
      0016D4 C0 07            [24] 4842 	push	ar7
      0016D6 12 00 90         [24] 4843 	lcall	_delay
      0016D9 D0 07            [24] 4844 	pop	ar7
      0016DB 02 16 41         [24] 4845 	ljmp	00144$
      0016DE                       4846 00146$:
                                   4847 ;	888n.c:649: for (j=3;j<6;j++) an[j-2]=j;
      0016DE 7F 03            [12] 4848 	mov	r7,#0x03
      0016E0                       4849 00215$:
      0016E0 EF               [12] 4850 	mov	a,r7
      0016E1 24 FE            [12] 4851 	add	a,#0xfe
      0016E3 24 5D            [12] 4852 	add	a,#_flash_5_an_1_106
      0016E5 F8               [12] 4853 	mov	r0,a
      0016E6 A6 07            [24] 4854 	mov	@r0,ar7
      0016E8 0F               [12] 4855 	inc	r7
      0016E9 C3               [12] 4856 	clr	c
      0016EA EF               [12] 4857 	mov	a,r7
      0016EB 64 80            [12] 4858 	xrl	a,#0x80
      0016ED 94 86            [12] 4859 	subb	a,#0x86
      0016EF 40 EF            [24] 4860 	jc	00215$
                                   4861 ;	888n.c:650: while (i--) {
      0016F1 7F 03            [12] 4862 	mov	r7,#0x03
      0016F3                       4863 00152$:
      0016F3 8F 06            [24] 4864 	mov	ar6,r7
      0016F5 1F               [12] 4865 	dec	r7
      0016F6 EE               [12] 4866 	mov	a,r6
      0016F7 70 03            [24] 4867 	jnz	00548$
      0016F9 02 17 80         [24] 4868 	ljmp	00154$
      0016FC                       4869 00548$:
                                   4870 ;	888n.c:651: for (j=1;j<4;j++) {
      0016FC 7E 01            [12] 4871 	mov	r6,#0x01
      0016FE                       4872 00217$:
                                   4873 ;	888n.c:652: box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);
      0016FE EE               [12] 4874 	mov	a,r6
      0016FF 24 5D            [12] 4875 	add	a,#_flash_5_an_1_106
      001701 F9               [12] 4876 	mov	r1,a
      001702 87 05            [24] 4877 	mov	ar5,@r1
      001704 74 07            [12] 4878 	mov	a,#0x07
      001706 C3               [12] 4879 	clr	c
      001707 9E               [12] 4880 	subb	a,r6
      001708 FC               [12] 4881 	mov	r4,a
      001709 8D 39            [24] 4882 	mov	_box_apeak_xy_PARM_2,r5
      00170B 8E 3A            [24] 4883 	mov	_box_apeak_xy_PARM_3,r6
      00170D 8C 3B            [24] 4884 	mov	_box_apeak_xy_PARM_4,r4
      00170F 8D 3C            [24] 4885 	mov	_box_apeak_xy_PARM_5,r5
      001711 8C 3D            [24] 4886 	mov	_box_apeak_xy_PARM_6,r4
      001713 75 3E 00         [24] 4887 	mov	_box_apeak_xy_PARM_7,#0x00
      001716 75 3F 01         [24] 4888 	mov	_box_apeak_xy_PARM_8,#0x01
      001719 8E 82            [24] 4889 	mov	dpl,r6
      00171B C0 07            [24] 4890 	push	ar7
      00171D C0 06            [24] 4891 	push	ar6
      00171F C0 04            [24] 4892 	push	ar4
      001721 C0 01            [24] 4893 	push	ar1
      001723 12 08 F9         [24] 4894 	lcall	_box_apeak_xy
      001726 D0 01            [24] 4895 	pop	ar1
      001728 D0 04            [24] 4896 	pop	ar4
      00172A D0 06            [24] 4897 	pop	ar6
                                   4898 ;	888n.c:653: box_apeak_xy(j,an[j]+1,j,7-j,an[j]+1,7-j,0,0);
      00172C 87 05            [24] 4899 	mov	ar5,@r1
      00172E 0D               [12] 4900 	inc	r5
      00172F 8D 39            [24] 4901 	mov	_box_apeak_xy_PARM_2,r5
      001731 8E 3A            [24] 4902 	mov	_box_apeak_xy_PARM_3,r6
      001733 8C 3B            [24] 4903 	mov	_box_apeak_xy_PARM_4,r4
      001735 8D 3C            [24] 4904 	mov	_box_apeak_xy_PARM_5,r5
      001737 8C 3D            [24] 4905 	mov	_box_apeak_xy_PARM_6,r4
      001739 75 3E 00         [24] 4906 	mov	_box_apeak_xy_PARM_7,#0x00
      00173C 75 3F 00         [24] 4907 	mov	_box_apeak_xy_PARM_8,#0x00
      00173F 8E 82            [24] 4908 	mov	dpl,r6
      001741 C0 06            [24] 4909 	push	ar6
      001743 12 08 F9         [24] 4910 	lcall	_box_apeak_xy
      001746 D0 06            [24] 4911 	pop	ar6
      001748 D0 07            [24] 4912 	pop	ar7
                                   4913 ;	888n.c:651: for (j=1;j<4;j++) {
      00174A 0E               [12] 4914 	inc	r6
      00174B C3               [12] 4915 	clr	c
      00174C EE               [12] 4916 	mov	a,r6
      00174D 64 80            [12] 4917 	xrl	a,#0x80
      00174F 94 84            [12] 4918 	subb	a,#0x84
      001751 40 AB            [24] 4919 	jc	00217$
                                   4920 ;	888n.c:655: for (j=0;j<4;j++)
      001753 7E 00            [12] 4921 	mov	r6,#0x00
      001755                       4922 00219$:
                                   4923 ;	888n.c:656: if (an[j]>3) an[j]--;
      001755 EE               [12] 4924 	mov	a,r6
      001756 24 5D            [12] 4925 	add	a,#_flash_5_an_1_106
      001758 F9               [12] 4926 	mov	r1,a
      001759 87 05            [24] 4927 	mov	ar5,@r1
      00175B C3               [12] 4928 	clr	c
      00175C 74 83            [12] 4929 	mov	a,#(0x03 ^ 0x80)
      00175E 8D F0            [24] 4930 	mov	b,r5
      001760 63 F0 80         [24] 4931 	xrl	b,#0x80
      001763 95 F0            [12] 4932 	subb	a,b
      001765 50 03            [24] 4933 	jnc	00220$
      001767 ED               [12] 4934 	mov	a,r5
      001768 14               [12] 4935 	dec	a
      001769 F7               [12] 4936 	mov	@r1,a
      00176A                       4937 00220$:
                                   4938 ;	888n.c:655: for (j=0;j<4;j++)
      00176A 0E               [12] 4939 	inc	r6
      00176B C3               [12] 4940 	clr	c
      00176C EE               [12] 4941 	mov	a,r6
      00176D 64 80            [12] 4942 	xrl	a,#0x80
      00176F 94 84            [12] 4943 	subb	a,#0x84
      001771 40 E2            [24] 4944 	jc	00219$
                                   4945 ;	888n.c:657: delay(a);
      001773 90 3A 98         [24] 4946 	mov	dptr,#0x3a98
      001776 C0 07            [24] 4947 	push	ar7
      001778 12 00 90         [24] 4948 	lcall	_delay
      00177B D0 07            [24] 4949 	pop	ar7
      00177D 02 16 F3         [24] 4950 	ljmp	00152$
      001780                       4951 00154$:
                                   4952 ;	888n.c:662: for (j=0;j<4;j++) an[j]=5-j;
      001780 7F 00            [12] 4953 	mov	r7,#0x00
      001782                       4954 00221$:
      001782 EF               [12] 4955 	mov	a,r7
      001783 24 5D            [12] 4956 	add	a,#_flash_5_an_1_106
      001785 F9               [12] 4957 	mov	r1,a
      001786 74 05            [12] 4958 	mov	a,#0x05
      001788 C3               [12] 4959 	clr	c
      001789 9F               [12] 4960 	subb	a,r7
      00178A F7               [12] 4961 	mov	@r1,a
      00178B 0F               [12] 4962 	inc	r7
      00178C C3               [12] 4963 	clr	c
      00178D EF               [12] 4964 	mov	a,r7
      00178E 64 80            [12] 4965 	xrl	a,#0x80
      001790 94 84            [12] 4966 	subb	a,#0x84
      001792 40 EE            [24] 4967 	jc	00221$
                                   4968 ;	888n.c:663: while (i--) {
      001794 7F 03            [12] 4969 	mov	r7,#0x03
      001796                       4970 00164$:
      001796 8F 06            [24] 4971 	mov	ar6,r7
      001798 1F               [12] 4972 	dec	r7
      001799 EE               [12] 4973 	mov	a,r6
      00179A 70 03            [24] 4974 	jnz	00553$
      00179C 02 18 38         [24] 4975 	ljmp	00166$
      00179F                       4976 00553$:
                                   4977 ;	888n.c:664: for (j=1;j<4;j++) {
      00179F 7E 01            [12] 4978 	mov	r6,#0x01
      0017A1                       4979 00223$:
                                   4980 ;	888n.c:665: if (an[j]<4) box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);
      0017A1 EE               [12] 4981 	mov	a,r6
      0017A2 24 5D            [12] 4982 	add	a,#_flash_5_an_1_106
      0017A4 F9               [12] 4983 	mov	r1,a
      0017A5 87 05            [24] 4984 	mov	ar5,@r1
      0017A7 C3               [12] 4985 	clr	c
      0017A8 ED               [12] 4986 	mov	a,r5
      0017A9 64 80            [12] 4987 	xrl	a,#0x80
      0017AB 94 84            [12] 4988 	subb	a,#0x84
      0017AD 50 22            [24] 4989 	jnc	00157$
      0017AF 74 07            [12] 4990 	mov	a,#0x07
      0017B1 C3               [12] 4991 	clr	c
      0017B2 9E               [12] 4992 	subb	a,r6
      0017B3 FC               [12] 4993 	mov	r4,a
      0017B4 8D 39            [24] 4994 	mov	_box_apeak_xy_PARM_2,r5
      0017B6 8E 3A            [24] 4995 	mov	_box_apeak_xy_PARM_3,r6
      0017B8 8C 3B            [24] 4996 	mov	_box_apeak_xy_PARM_4,r4
      0017BA 8D 3C            [24] 4997 	mov	_box_apeak_xy_PARM_5,r5
      0017BC 8C 3D            [24] 4998 	mov	_box_apeak_xy_PARM_6,r4
      0017BE 75 3E 00         [24] 4999 	mov	_box_apeak_xy_PARM_7,#0x00
      0017C1 75 3F 01         [24] 5000 	mov	_box_apeak_xy_PARM_8,#0x01
      0017C4 8E 82            [24] 5001 	mov	dpl,r6
      0017C6 C0 07            [24] 5002 	push	ar7
      0017C8 C0 06            [24] 5003 	push	ar6
      0017CA 12 08 F9         [24] 5004 	lcall	_box_apeak_xy
      0017CD D0 06            [24] 5005 	pop	ar6
      0017CF D0 07            [24] 5006 	pop	ar7
      0017D1                       5007 00157$:
                                   5008 ;	888n.c:666: if (an[j]<3) box_apeak_xy(j,an[j]+1,j,7-j,an[j]+1,7-j,0,0);
      0017D1 EE               [12] 5009 	mov	a,r6
      0017D2 24 5D            [12] 5010 	add	a,#_flash_5_an_1_106
      0017D4 F9               [12] 5011 	mov	r1,a
      0017D5 87 05            [24] 5012 	mov	ar5,@r1
      0017D7 C3               [12] 5013 	clr	c
      0017D8 ED               [12] 5014 	mov	a,r5
      0017D9 64 80            [12] 5015 	xrl	a,#0x80
      0017DB 94 83            [12] 5016 	subb	a,#0x83
      0017DD 50 23            [24] 5017 	jnc	00224$
      0017DF 0D               [12] 5018 	inc	r5
      0017E0 74 07            [12] 5019 	mov	a,#0x07
      0017E2 C3               [12] 5020 	clr	c
      0017E3 9E               [12] 5021 	subb	a,r6
      0017E4 FC               [12] 5022 	mov	r4,a
      0017E5 8D 39            [24] 5023 	mov	_box_apeak_xy_PARM_2,r5
      0017E7 8E 3A            [24] 5024 	mov	_box_apeak_xy_PARM_3,r6
      0017E9 8C 3B            [24] 5025 	mov	_box_apeak_xy_PARM_4,r4
      0017EB 8D 3C            [24] 5026 	mov	_box_apeak_xy_PARM_5,r5
      0017ED 8C 3D            [24] 5027 	mov	_box_apeak_xy_PARM_6,r4
      0017EF 75 3E 00         [24] 5028 	mov	_box_apeak_xy_PARM_7,#0x00
      0017F2 75 3F 00         [24] 5029 	mov	_box_apeak_xy_PARM_8,#0x00
      0017F5 8E 82            [24] 5030 	mov	dpl,r6
      0017F7 C0 07            [24] 5031 	push	ar7
      0017F9 C0 06            [24] 5032 	push	ar6
      0017FB 12 08 F9         [24] 5033 	lcall	_box_apeak_xy
      0017FE D0 06            [24] 5034 	pop	ar6
      001800 D0 07            [24] 5035 	pop	ar7
      001802                       5036 00224$:
                                   5037 ;	888n.c:664: for (j=1;j<4;j++) {
      001802 0E               [12] 5038 	inc	r6
      001803 C3               [12] 5039 	clr	c
      001804 EE               [12] 5040 	mov	a,r6
      001805 64 80            [12] 5041 	xrl	a,#0x80
      001807 94 84            [12] 5042 	subb	a,#0x84
      001809 40 96            [24] 5043 	jc	00223$
                                   5044 ;	888n.c:668: for (j=0;j<4;j++)
      00180B 7E 00            [12] 5045 	mov	r6,#0x00
      00180D                       5046 00225$:
                                   5047 ;	888n.c:669: if (an[j]>0) an[j]--;
      00180D EE               [12] 5048 	mov	a,r6
      00180E 24 5D            [12] 5049 	add	a,#_flash_5_an_1_106
      001810 F9               [12] 5050 	mov	r1,a
      001811 87 05            [24] 5051 	mov	ar5,@r1
      001813 C3               [12] 5052 	clr	c
      001814 74 80            [12] 5053 	mov	a,#(0x00 ^ 0x80)
      001816 8D F0            [24] 5054 	mov	b,r5
      001818 63 F0 80         [24] 5055 	xrl	b,#0x80
      00181B 95 F0            [12] 5056 	subb	a,b
      00181D 50 03            [24] 5057 	jnc	00226$
      00181F ED               [12] 5058 	mov	a,r5
      001820 14               [12] 5059 	dec	a
      001821 F7               [12] 5060 	mov	@r1,a
      001822                       5061 00226$:
                                   5062 ;	888n.c:668: for (j=0;j<4;j++)
      001822 0E               [12] 5063 	inc	r6
      001823 C3               [12] 5064 	clr	c
      001824 EE               [12] 5065 	mov	a,r6
      001825 64 80            [12] 5066 	xrl	a,#0x80
      001827 94 84            [12] 5067 	subb	a,#0x84
      001829 40 E2            [24] 5068 	jc	00225$
                                   5069 ;	888n.c:670: delay(a);
      00182B 90 3A 98         [24] 5070 	mov	dptr,#0x3a98
      00182E C0 07            [24] 5071 	push	ar7
      001830 12 00 90         [24] 5072 	lcall	_delay
      001833 D0 07            [24] 5073 	pop	ar7
      001835 02 17 96         [24] 5074 	ljmp	00164$
      001838                       5075 00166$:
                                   5076 ;	888n.c:675: for (j=0;j<4;j++) an[j]=3-j;
      001838 7F 00            [12] 5077 	mov	r7,#0x00
      00183A                       5078 00227$:
      00183A EF               [12] 5079 	mov	a,r7
      00183B 24 5D            [12] 5080 	add	a,#_flash_5_an_1_106
      00183D F9               [12] 5081 	mov	r1,a
      00183E 74 03            [12] 5082 	mov	a,#0x03
      001840 C3               [12] 5083 	clr	c
      001841 9F               [12] 5084 	subb	a,r7
      001842 F7               [12] 5085 	mov	@r1,a
      001843 0F               [12] 5086 	inc	r7
      001844 C3               [12] 5087 	clr	c
      001845 EF               [12] 5088 	mov	a,r7
      001846 64 80            [12] 5089 	xrl	a,#0x80
      001848 94 84            [12] 5090 	subb	a,#0x84
      00184A 40 EE            [24] 5091 	jc	00227$
                                   5092 ;	888n.c:676: an[0]=2;
      00184C 75 5D 02         [24] 5093 	mov	_flash_5_an_1_106,#0x02
                                   5094 ;	888n.c:677: while (i--) {
      00184F 7F 03            [12] 5095 	mov	r7,#0x03
      001851                       5096 00176$:
      001851 8F 06            [24] 5097 	mov	ar6,r7
      001853 1F               [12] 5098 	dec	r7
      001854 EE               [12] 5099 	mov	a,r6
      001855 70 03            [24] 5100 	jnz	00560$
      001857 02 18 FF         [24] 5101 	ljmp	00178$
      00185A                       5102 00560$:
                                   5103 ;	888n.c:678: for (j=0;j<3;j++) {
      00185A 7E 00            [12] 5104 	mov	r6,#0x00
      00185C                       5105 00229$:
                                   5106 ;	888n.c:679: if (an[j]>=0) box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);
      00185C EE               [12] 5107 	mov	a,r6
      00185D 24 5D            [12] 5108 	add	a,#_flash_5_an_1_106
      00185F F9               [12] 5109 	mov	r1,a
      001860 E7               [12] 5110 	mov	a,@r1
      001861 FD               [12] 5111 	mov	r5,a
      001862 20 E7 22         [24] 5112 	jb	acc.7,00169$
      001865 74 07            [12] 5113 	mov	a,#0x07
      001867 C3               [12] 5114 	clr	c
      001868 9E               [12] 5115 	subb	a,r6
      001869 FC               [12] 5116 	mov	r4,a
      00186A 8D 39            [24] 5117 	mov	_box_apeak_xy_PARM_2,r5
      00186C 8E 3A            [24] 5118 	mov	_box_apeak_xy_PARM_3,r6
      00186E 8C 3B            [24] 5119 	mov	_box_apeak_xy_PARM_4,r4
      001870 8D 3C            [24] 5120 	mov	_box_apeak_xy_PARM_5,r5
      001872 8C 3D            [24] 5121 	mov	_box_apeak_xy_PARM_6,r4
      001874 75 3E 00         [24] 5122 	mov	_box_apeak_xy_PARM_7,#0x00
      001877 75 3F 01         [24] 5123 	mov	_box_apeak_xy_PARM_8,#0x01
      00187A 8E 82            [24] 5124 	mov	dpl,r6
      00187C C0 07            [24] 5125 	push	ar7
      00187E C0 06            [24] 5126 	push	ar6
      001880 12 08 F9         [24] 5127 	lcall	_box_apeak_xy
      001883 D0 06            [24] 5128 	pop	ar6
      001885 D0 07            [24] 5129 	pop	ar7
      001887                       5130 00169$:
                                   5131 ;	888n.c:680: if (an[j]>=0) box_apeak_xy(j,an[j]+1,j,7-j,an[j]+1,7-j,0,0);
      001887 EE               [12] 5132 	mov	a,r6
      001888 24 5D            [12] 5133 	add	a,#_flash_5_an_1_106
      00188A F9               [12] 5134 	mov	r1,a
      00188B E7               [12] 5135 	mov	a,@r1
      00188C FD               [12] 5136 	mov	r5,a
      00188D 20 E7 23         [24] 5137 	jb	acc.7,00230$
      001890 0D               [12] 5138 	inc	r5
      001891 74 07            [12] 5139 	mov	a,#0x07
      001893 C3               [12] 5140 	clr	c
      001894 9E               [12] 5141 	subb	a,r6
      001895 FC               [12] 5142 	mov	r4,a
      001896 8D 39            [24] 5143 	mov	_box_apeak_xy_PARM_2,r5
      001898 8E 3A            [24] 5144 	mov	_box_apeak_xy_PARM_3,r6
      00189A 8C 3B            [24] 5145 	mov	_box_apeak_xy_PARM_4,r4
      00189C 8D 3C            [24] 5146 	mov	_box_apeak_xy_PARM_5,r5
      00189E 8C 3D            [24] 5147 	mov	_box_apeak_xy_PARM_6,r4
      0018A0 75 3E 00         [24] 5148 	mov	_box_apeak_xy_PARM_7,#0x00
      0018A3 75 3F 00         [24] 5149 	mov	_box_apeak_xy_PARM_8,#0x00
      0018A6 8E 82            [24] 5150 	mov	dpl,r6
      0018A8 C0 07            [24] 5151 	push	ar7
      0018AA C0 06            [24] 5152 	push	ar6
      0018AC 12 08 F9         [24] 5153 	lcall	_box_apeak_xy
      0018AF D0 06            [24] 5154 	pop	ar6
      0018B1 D0 07            [24] 5155 	pop	ar7
      0018B3                       5156 00230$:
                                   5157 ;	888n.c:678: for (j=0;j<3;j++) {
      0018B3 0E               [12] 5158 	inc	r6
      0018B4 C3               [12] 5159 	clr	c
      0018B5 EE               [12] 5160 	mov	a,r6
      0018B6 64 80            [12] 5161 	xrl	a,#0x80
      0018B8 94 83            [12] 5162 	subb	a,#0x83
      0018BA 40 A0            [24] 5163 	jc	00229$
                                   5164 ;	888n.c:682: for (j=0;j<4;j++)
      0018BC 7E 00            [12] 5165 	mov	r6,#0x00
      0018BE                       5166 00231$:
                                   5167 ;	888n.c:683: if (j<5-i) an[j]--;
      0018BE EF               [12] 5168 	mov	a,r7
      0018BF FC               [12] 5169 	mov	r4,a
      0018C0 33               [12] 5170 	rlc	a
      0018C1 95 E0            [12] 5171 	subb	a,acc
      0018C3 FD               [12] 5172 	mov	r5,a
      0018C4 74 05            [12] 5173 	mov	a,#0x05
      0018C6 C3               [12] 5174 	clr	c
      0018C7 9C               [12] 5175 	subb	a,r4
      0018C8 FC               [12] 5176 	mov	r4,a
      0018C9 E4               [12] 5177 	clr	a
      0018CA 9D               [12] 5178 	subb	a,r5
      0018CB FD               [12] 5179 	mov	r5,a
      0018CC EE               [12] 5180 	mov	a,r6
      0018CD FA               [12] 5181 	mov	r2,a
      0018CE 33               [12] 5182 	rlc	a
      0018CF 95 E0            [12] 5183 	subb	a,acc
      0018D1 FB               [12] 5184 	mov	r3,a
      0018D2 C3               [12] 5185 	clr	c
      0018D3 EA               [12] 5186 	mov	a,r2
      0018D4 9C               [12] 5187 	subb	a,r4
      0018D5 EB               [12] 5188 	mov	a,r3
      0018D6 64 80            [12] 5189 	xrl	a,#0x80
      0018D8 8D F0            [24] 5190 	mov	b,r5
      0018DA 63 F0 80         [24] 5191 	xrl	b,#0x80
      0018DD 95 F0            [12] 5192 	subb	a,b
      0018DF 50 08            [24] 5193 	jnc	00232$
      0018E1 EE               [12] 5194 	mov	a,r6
      0018E2 24 5D            [12] 5195 	add	a,#_flash_5_an_1_106
      0018E4 F9               [12] 5196 	mov	r1,a
      0018E5 E7               [12] 5197 	mov	a,@r1
      0018E6 FD               [12] 5198 	mov	r5,a
      0018E7 14               [12] 5199 	dec	a
      0018E8 F7               [12] 5200 	mov	@r1,a
      0018E9                       5201 00232$:
                                   5202 ;	888n.c:682: for (j=0;j<4;j++)
      0018E9 0E               [12] 5203 	inc	r6
      0018EA C3               [12] 5204 	clr	c
      0018EB EE               [12] 5205 	mov	a,r6
      0018EC 64 80            [12] 5206 	xrl	a,#0x80
      0018EE 94 84            [12] 5207 	subb	a,#0x84
      0018F0 40 CC            [24] 5208 	jc	00231$
                                   5209 ;	888n.c:684: delay(a);
      0018F2 90 3A 98         [24] 5210 	mov	dptr,#0x3a98
      0018F5 C0 07            [24] 5211 	push	ar7
      0018F7 12 00 90         [24] 5212 	lcall	_delay
      0018FA D0 07            [24] 5213 	pop	ar7
      0018FC 02 18 51         [24] 5214 	ljmp	00176$
      0018FF                       5215 00178$:
                                   5216 ;	888n.c:689: for (j=0;j<4;j++) an[j]=j-2;
      0018FF 7F 00            [12] 5217 	mov	r7,#0x00
      001901                       5218 00233$:
      001901 EF               [12] 5219 	mov	a,r7
      001902 24 5D            [12] 5220 	add	a,#_flash_5_an_1_106
      001904 F9               [12] 5221 	mov	r1,a
      001905 EF               [12] 5222 	mov	a,r7
      001906 24 FE            [12] 5223 	add	a,#0xfe
      001908 F7               [12] 5224 	mov	@r1,a
      001909 0F               [12] 5225 	inc	r7
      00190A C3               [12] 5226 	clr	c
      00190B EF               [12] 5227 	mov	a,r7
      00190C 64 80            [12] 5228 	xrl	a,#0x80
      00190E 94 84            [12] 5229 	subb	a,#0x84
      001910 40 EF            [24] 5230 	jc	00233$
                                   5231 ;	888n.c:690: while (i--) {
      001912 7F 0A            [12] 5232 	mov	r7,#0x0a
      001914                       5233 00188$:
      001914 8F 06            [24] 5234 	mov	ar6,r7
      001916 1F               [12] 5235 	dec	r7
      001917 EE               [12] 5236 	mov	a,r6
      001918 70 01            [24] 5237 	jnz	00567$
      00191A 22               [24] 5238 	ret
      00191B                       5239 00567$:
                                   5240 ;	888n.c:691: for (j=0;j<4;j++) {
      00191B 7E 00            [12] 5241 	mov	r6,#0x00
      00191D                       5242 00235$:
                                   5243 ;	888n.c:692: if (an[j]>=0) box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);
      00191D EE               [12] 5244 	mov	a,r6
      00191E 24 5D            [12] 5245 	add	a,#_flash_5_an_1_106
      001920 F9               [12] 5246 	mov	r1,a
      001921 E7               [12] 5247 	mov	a,@r1
      001922 FD               [12] 5248 	mov	r5,a
      001923 20 E7 22         [24] 5249 	jb	acc.7,00181$
      001926 74 07            [12] 5250 	mov	a,#0x07
      001928 C3               [12] 5251 	clr	c
      001929 9E               [12] 5252 	subb	a,r6
      00192A FC               [12] 5253 	mov	r4,a
      00192B 8D 39            [24] 5254 	mov	_box_apeak_xy_PARM_2,r5
      00192D 8E 3A            [24] 5255 	mov	_box_apeak_xy_PARM_3,r6
      00192F 8C 3B            [24] 5256 	mov	_box_apeak_xy_PARM_4,r4
      001931 8D 3C            [24] 5257 	mov	_box_apeak_xy_PARM_5,r5
      001933 8C 3D            [24] 5258 	mov	_box_apeak_xy_PARM_6,r4
      001935 75 3E 00         [24] 5259 	mov	_box_apeak_xy_PARM_7,#0x00
      001938 75 3F 01         [24] 5260 	mov	_box_apeak_xy_PARM_8,#0x01
      00193B 8E 82            [24] 5261 	mov	dpl,r6
      00193D C0 07            [24] 5262 	push	ar7
      00193F C0 06            [24] 5263 	push	ar6
      001941 12 08 F9         [24] 5264 	lcall	_box_apeak_xy
      001944 D0 06            [24] 5265 	pop	ar6
      001946 D0 07            [24] 5266 	pop	ar7
      001948                       5267 00181$:
                                   5268 ;	888n.c:693: if (an[j]>=0) box_apeak_xy(j,an[j]-1,j,7-j,an[j]-1,7-j,0,0);
      001948 EE               [12] 5269 	mov	a,r6
      001949 24 5D            [12] 5270 	add	a,#_flash_5_an_1_106
      00194B F9               [12] 5271 	mov	r1,a
      00194C E7               [12] 5272 	mov	a,@r1
      00194D FD               [12] 5273 	mov	r5,a
      00194E 20 E7 23         [24] 5274 	jb	acc.7,00236$
      001951 1D               [12] 5275 	dec	r5
      001952 74 07            [12] 5276 	mov	a,#0x07
      001954 C3               [12] 5277 	clr	c
      001955 9E               [12] 5278 	subb	a,r6
      001956 FC               [12] 5279 	mov	r4,a
      001957 8D 39            [24] 5280 	mov	_box_apeak_xy_PARM_2,r5
      001959 8E 3A            [24] 5281 	mov	_box_apeak_xy_PARM_3,r6
      00195B 8C 3B            [24] 5282 	mov	_box_apeak_xy_PARM_4,r4
      00195D 8D 3C            [24] 5283 	mov	_box_apeak_xy_PARM_5,r5
      00195F 8C 3D            [24] 5284 	mov	_box_apeak_xy_PARM_6,r4
      001961 75 3E 00         [24] 5285 	mov	_box_apeak_xy_PARM_7,#0x00
      001964 75 3F 00         [24] 5286 	mov	_box_apeak_xy_PARM_8,#0x00
      001967 8E 82            [24] 5287 	mov	dpl,r6
      001969 C0 07            [24] 5288 	push	ar7
      00196B C0 06            [24] 5289 	push	ar6
      00196D 12 08 F9         [24] 5290 	lcall	_box_apeak_xy
      001970 D0 06            [24] 5291 	pop	ar6
      001972 D0 07            [24] 5292 	pop	ar7
      001974                       5293 00236$:
                                   5294 ;	888n.c:691: for (j=0;j<4;j++) {
      001974 0E               [12] 5295 	inc	r6
      001975 C3               [12] 5296 	clr	c
      001976 EE               [12] 5297 	mov	a,r6
      001977 64 80            [12] 5298 	xrl	a,#0x80
      001979 94 84            [12] 5299 	subb	a,#0x84
      00197B 40 A0            [24] 5300 	jc	00235$
                                   5301 ;	888n.c:695: for (j=0;j<4;j++)
      00197D 7E 00            [12] 5302 	mov	r6,#0x00
      00197F                       5303 00237$:
                                   5304 ;	888n.c:696: if (an[j]<7) an[j]++;
      00197F EE               [12] 5305 	mov	a,r6
      001980 24 5D            [12] 5306 	add	a,#_flash_5_an_1_106
      001982 F9               [12] 5307 	mov	r1,a
      001983 87 05            [24] 5308 	mov	ar5,@r1
      001985 C3               [12] 5309 	clr	c
      001986 ED               [12] 5310 	mov	a,r5
      001987 64 80            [12] 5311 	xrl	a,#0x80
      001989 94 87            [12] 5312 	subb	a,#0x87
      00198B 50 03            [24] 5313 	jnc	00238$
      00198D ED               [12] 5314 	mov	a,r5
      00198E 04               [12] 5315 	inc	a
      00198F F7               [12] 5316 	mov	@r1,a
      001990                       5317 00238$:
                                   5318 ;	888n.c:695: for (j=0;j<4;j++)
      001990 0E               [12] 5319 	inc	r6
      001991 C3               [12] 5320 	clr	c
      001992 EE               [12] 5321 	mov	a,r6
      001993 64 80            [12] 5322 	xrl	a,#0x80
      001995 94 84            [12] 5323 	subb	a,#0x84
      001997 40 E6            [24] 5324 	jc	00237$
                                   5325 ;	888n.c:697: delay(a);
      001999 90 3A 98         [24] 5326 	mov	dptr,#0x3a98
      00199C C0 07            [24] 5327 	push	ar7
      00199E 12 00 90         [24] 5328 	lcall	_delay
      0019A1 D0 07            [24] 5329 	pop	ar7
      0019A3 02 19 14         [24] 5330 	ljmp	00188$
                                   5331 ;------------------------------------------------------------
                                   5332 ;Allocation info for local variables in function 'flash_6'
                                   5333 ;------------------------------------------------------------
                                   5334 ;i                         Allocated with name '_flash_6_i_1_123'
                                   5335 ;j                         Allocated with name '_flash_6_j_1_123'
                                   5336 ;k                         Allocated with name '_flash_6_k_1_123'
                                   5337 ;z                         Allocated to registers r7 
                                   5338 ;------------------------------------------------------------
                                   5339 ;	888n.c:701: void flash_6()
                                   5340 ;	-----------------------------------------
                                   5341 ;	 function flash_6
                                   5342 ;	-----------------------------------------
      0019A6                       5343 _flash_6:
                                   5344 ;	888n.c:705: roll_apeak_yz(1,10000);
      0019A6 75 43 10         [24] 5345 	mov	_roll_apeak_yz_PARM_2,#0x10
      0019A9 75 44 27         [24] 5346 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      0019AC 75 82 01         [24] 5347 	mov	dpl,#0x01
      0019AF 12 0A AC         [24] 5348 	lcall	_roll_apeak_yz
                                   5349 ;	888n.c:706: roll_apeak_yz(2,10000);
      0019B2 75 43 10         [24] 5350 	mov	_roll_apeak_yz_PARM_2,#0x10
      0019B5 75 44 27         [24] 5351 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      0019B8 75 82 02         [24] 5352 	mov	dpl,#0x02
      0019BB 12 0A AC         [24] 5353 	lcall	_roll_apeak_yz
                                   5354 ;	888n.c:707: roll_apeak_yz(3,10000);
      0019BE 75 43 10         [24] 5355 	mov	_roll_apeak_yz_PARM_2,#0x10
      0019C1 75 44 27         [24] 5356 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      0019C4 75 82 03         [24] 5357 	mov	dpl,#0x03
      0019C7 12 0A AC         [24] 5358 	lcall	_roll_apeak_yz
                                   5359 ;	888n.c:708: roll_apeak_yz(0,10000);
      0019CA 75 43 10         [24] 5360 	mov	_roll_apeak_yz_PARM_2,#0x10
      0019CD 75 44 27         [24] 5361 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      0019D0 75 82 00         [24] 5362 	mov	dpl,#0x00
      0019D3 12 0A AC         [24] 5363 	lcall	_roll_apeak_yz
                                   5364 ;	888n.c:709: roll_apeak_yz(1,10000);
      0019D6 75 43 10         [24] 5365 	mov	_roll_apeak_yz_PARM_2,#0x10
      0019D9 75 44 27         [24] 5366 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      0019DC 75 82 01         [24] 5367 	mov	dpl,#0x01
      0019DF 12 0A AC         [24] 5368 	lcall	_roll_apeak_yz
                                   5369 ;	888n.c:710: roll_apeak_yz(2,10000);
      0019E2 75 43 10         [24] 5370 	mov	_roll_apeak_yz_PARM_2,#0x10
      0019E5 75 44 27         [24] 5371 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      0019E8 75 82 02         [24] 5372 	mov	dpl,#0x02
      0019EB 12 0A AC         [24] 5373 	lcall	_roll_apeak_yz
                                   5374 ;	888n.c:711: roll_apeak_yz(3,10000);
      0019EE 75 43 10         [24] 5375 	mov	_roll_apeak_yz_PARM_2,#0x10
      0019F1 75 44 27         [24] 5376 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      0019F4 75 82 03         [24] 5377 	mov	dpl,#0x03
      0019F7 12 0A AC         [24] 5378 	lcall	_roll_apeak_yz
                                   5379 ;	888n.c:713: for (i=0;i<3;i++) {
      0019FA 75 61 00         [24] 5380 	mov	_flash_6_i_1_123,#0x00
                                   5381 ;	888n.c:714: for (j=0;j<8;j++) {
      0019FD                       5382 00124$:
      0019FD E5 61            [12] 5383 	mov	a,_flash_6_i_1_123
      0019FF 75 F0 08         [24] 5384 	mov	b,#0x08
      001A02 A4               [48] 5385 	mul	ab
      001A03 24 7B            [12] 5386 	add	a,#_table_3p
      001A05 FD               [12] 5387 	mov	r5,a
      001A06 74 2B            [12] 5388 	mov	a,#(_table_3p >> 8)
      001A08 35 F0            [12] 5389 	addc	a,b
      001A0A FE               [12] 5390 	mov	r6,a
      001A0B 75 62 00         [24] 5391 	mov	_flash_6_j_1_123,#0x00
                                   5392 ;	888n.c:715: for (k=0;k<8;k++) {
      001A0E                       5393 00122$:
      001A0E E5 62            [12] 5394 	mov	a,_flash_6_j_1_123
      001A10 2D               [12] 5395 	add	a,r5
      001A11 FA               [12] 5396 	mov	r2,a
      001A12 E4               [12] 5397 	clr	a
      001A13 3E               [12] 5398 	addc	a,r6
      001A14 FB               [12] 5399 	mov	r3,a
      001A15 75 63 00         [24] 5400 	mov	_flash_6_k_1_123,#0x00
      001A18                       5401 00111$:
                                   5402 ;	888n.c:716: if ((table_3p[i][j]>>k)&1) {
      001A18 8A 82            [24] 5403 	mov	dpl,r2
      001A1A 8B 83            [24] 5404 	mov	dph,r3
      001A1C E4               [12] 5405 	clr	a
      001A1D 93               [24] 5406 	movc	a,@a+dptr
      001A1E F8               [12] 5407 	mov	r0,a
      001A1F 85 63 F0         [24] 5408 	mov	b,_flash_6_k_1_123
      001A22 05 F0            [12] 5409 	inc	b
      001A24 E8               [12] 5410 	mov	a,r0
      001A25 80 02            [24] 5411 	sjmp	00148$
      001A27                       5412 00147$:
      001A27 C3               [12] 5413 	clr	c
      001A28 13               [12] 5414 	rrc	a
      001A29                       5415 00148$:
      001A29 D5 F0 FB         [24] 5416 	djnz	b,00147$
      001A2C 20 E0 03         [24] 5417 	jb	acc.0,00149$
      001A2F 02 1A BA         [24] 5418 	ljmp	00112$
      001A32                       5419 00149$:
                                   5420 ;	888n.c:717: for (z=1;z<8;z++) {
      001A32 74 07            [12] 5421 	mov	a,#0x07
      001A34 C3               [12] 5422 	clr	c
      001A35 95 63            [12] 5423 	subb	a,_flash_6_k_1_123
      001A37 F8               [12] 5424 	mov	r0,a
      001A38 7F 01            [12] 5425 	mov	r7,#0x01
      001A3A                       5426 00109$:
                                   5427 ;	888n.c:718: point (j,7-k,z,1);
      001A3A 88 08            [24] 5428 	mov	_point_PARM_2,r0
      001A3C 8F 09            [24] 5429 	mov	_point_PARM_3,r7
      001A3E 75 0A 01         [24] 5430 	mov	_point_PARM_4,#0x01
      001A41 85 62 82         [24] 5431 	mov	dpl,_flash_6_j_1_123
      001A44 C0 07            [24] 5432 	push	ar7
      001A46 C0 06            [24] 5433 	push	ar6
      001A48 C0 05            [24] 5434 	push	ar5
      001A4A C0 03            [24] 5435 	push	ar3
      001A4C C0 02            [24] 5436 	push	ar2
      001A4E C0 00            [24] 5437 	push	ar0
      001A50 12 02 21         [24] 5438 	lcall	_point
      001A53 D0 00            [24] 5439 	pop	ar0
      001A55 D0 02            [24] 5440 	pop	ar2
      001A57 D0 03            [24] 5441 	pop	ar3
      001A59 D0 05            [24] 5442 	pop	ar5
      001A5B D0 06            [24] 5443 	pop	ar6
      001A5D D0 07            [24] 5444 	pop	ar7
                                   5445 ;	888n.c:719: if (z-1) point (j,7-k,z-1,0);
      001A5F 8F 01            [24] 5446 	mov	ar1,r7
      001A61 7C 00            [12] 5447 	mov	r4,#0x00
      001A63 19               [12] 5448 	dec	r1
      001A64 B9 FF 01         [24] 5449 	cjne	r1,#0xff,00150$
      001A67 1C               [12] 5450 	dec	r4
      001A68                       5451 00150$:
      001A68 E9               [12] 5452 	mov	a,r1
      001A69 4C               [12] 5453 	orl	a,r4
      001A6A 60 27            [24] 5454 	jz	00102$
      001A6C EF               [12] 5455 	mov	a,r7
      001A6D 14               [12] 5456 	dec	a
      001A6E F5 09            [12] 5457 	mov	_point_PARM_3,a
      001A70 88 08            [24] 5458 	mov	_point_PARM_2,r0
      001A72 75 0A 00         [24] 5459 	mov	_point_PARM_4,#0x00
      001A75 85 62 82         [24] 5460 	mov	dpl,_flash_6_j_1_123
      001A78 C0 07            [24] 5461 	push	ar7
      001A7A C0 06            [24] 5462 	push	ar6
      001A7C C0 05            [24] 5463 	push	ar5
      001A7E C0 03            [24] 5464 	push	ar3
      001A80 C0 02            [24] 5465 	push	ar2
      001A82 C0 00            [24] 5466 	push	ar0
      001A84 12 02 21         [24] 5467 	lcall	_point
      001A87 D0 00            [24] 5468 	pop	ar0
      001A89 D0 02            [24] 5469 	pop	ar2
      001A8B D0 03            [24] 5470 	pop	ar3
      001A8D D0 05            [24] 5471 	pop	ar5
      001A8F D0 06            [24] 5472 	pop	ar6
      001A91 D0 07            [24] 5473 	pop	ar7
      001A93                       5474 00102$:
                                   5475 ;	888n.c:720: delay(5000);
      001A93 90 13 88         [24] 5476 	mov	dptr,#0x1388
      001A96 C0 07            [24] 5477 	push	ar7
      001A98 C0 06            [24] 5478 	push	ar6
      001A9A C0 05            [24] 5479 	push	ar5
      001A9C C0 03            [24] 5480 	push	ar3
      001A9E C0 02            [24] 5481 	push	ar2
      001AA0 C0 00            [24] 5482 	push	ar0
      001AA2 12 00 90         [24] 5483 	lcall	_delay
      001AA5 D0 00            [24] 5484 	pop	ar0
      001AA7 D0 02            [24] 5485 	pop	ar2
      001AA9 D0 03            [24] 5486 	pop	ar3
      001AAB D0 05            [24] 5487 	pop	ar5
      001AAD D0 06            [24] 5488 	pop	ar6
      001AAF D0 07            [24] 5489 	pop	ar7
                                   5490 ;	888n.c:717: for (z=1;z<8;z++) {
      001AB1 0F               [12] 5491 	inc	r7
      001AB2 BF 08 00         [24] 5492 	cjne	r7,#0x08,00152$
      001AB5                       5493 00152$:
      001AB5 50 03            [24] 5494 	jnc	00153$
      001AB7 02 1A 3A         [24] 5495 	ljmp	00109$
      001ABA                       5496 00153$:
      001ABA                       5497 00112$:
                                   5498 ;	888n.c:715: for (k=0;k<8;k++) {
      001ABA 05 63            [12] 5499 	inc	_flash_6_k_1_123
      001ABC 74 F8            [12] 5500 	mov	a,#0x100 - 0x08
      001ABE 25 63            [12] 5501 	add	a,_flash_6_k_1_123
      001AC0 40 03            [24] 5502 	jc	00154$
      001AC2 02 1A 18         [24] 5503 	ljmp	00111$
      001AC5                       5504 00154$:
                                   5505 ;	888n.c:714: for (j=0;j<8;j++) {
      001AC5 05 62            [12] 5506 	inc	_flash_6_j_1_123
      001AC7 74 F8            [12] 5507 	mov	a,#0x100 - 0x08
      001AC9 25 62            [12] 5508 	add	a,_flash_6_j_1_123
      001ACB 40 03            [24] 5509 	jc	00155$
      001ACD 02 1A 0E         [24] 5510 	ljmp	00122$
      001AD0                       5511 00155$:
                                   5512 ;	888n.c:725: trans(7,15000);
      001AD0 75 49 98         [24] 5513 	mov	_trans_PARM_2,#0x98
      001AD3 75 4A 3A         [24] 5514 	mov	(_trans_PARM_2 + 1),#0x3a
      001AD6 75 82 07         [24] 5515 	mov	dpl,#0x07
      001AD9 12 0E 81         [24] 5516 	lcall	_trans
                                   5517 ;	888n.c:713: for (i=0;i<3;i++) {
      001ADC 05 61            [12] 5518 	inc	_flash_6_i_1_123
      001ADE 74 FD            [12] 5519 	mov	a,#0x100 - 0x03
      001AE0 25 61            [12] 5520 	add	a,_flash_6_i_1_123
      001AE2 40 03            [24] 5521 	jc	00156$
      001AE4 02 19 FD         [24] 5522 	ljmp	00124$
      001AE7                       5523 00156$:
      001AE7 22               [24] 5524 	ret
                                   5525 ;------------------------------------------------------------
                                   5526 ;Allocation info for local variables in function 'flash_7'
                                   5527 ;------------------------------------------------------------
                                   5528 ;i                         Allocated to registers r7 
                                   5529 ;a                         Allocated to registers 
                                   5530 ;------------------------------------------------------------
                                   5531 ;	888n.c:729: void flash_7()
                                   5532 ;	-----------------------------------------
                                   5533 ;	 function flash_7
                                   5534 ;	-----------------------------------------
      001AE8                       5535 _flash_7:
                                   5536 ;	888n.c:734: roll_apeak_yz(0,10000);
      001AE8 75 43 10         [24] 5537 	mov	_roll_apeak_yz_PARM_2,#0x10
      001AEB 75 44 27         [24] 5538 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001AEE 75 82 00         [24] 5539 	mov	dpl,#0x00
      001AF1 12 0A AC         [24] 5540 	lcall	_roll_apeak_yz
                                   5541 ;	888n.c:735: roll_apeak_yz(1,10000);
      001AF4 75 43 10         [24] 5542 	mov	_roll_apeak_yz_PARM_2,#0x10
      001AF7 75 44 27         [24] 5543 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001AFA 75 82 01         [24] 5544 	mov	dpl,#0x01
      001AFD 12 0A AC         [24] 5545 	lcall	_roll_apeak_yz
                                   5546 ;	888n.c:736: roll_apeak_yz(2,10000);
      001B00 75 43 10         [24] 5547 	mov	_roll_apeak_yz_PARM_2,#0x10
      001B03 75 44 27         [24] 5548 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001B06 75 82 02         [24] 5549 	mov	dpl,#0x02
      001B09 12 0A AC         [24] 5550 	lcall	_roll_apeak_yz
                                   5551 ;	888n.c:737: roll_apeak_yz(3,10000);
      001B0C 75 43 10         [24] 5552 	mov	_roll_apeak_yz_PARM_2,#0x10
      001B0F 75 44 27         [24] 5553 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001B12 75 82 03         [24] 5554 	mov	dpl,#0x03
      001B15 12 0A AC         [24] 5555 	lcall	_roll_apeak_yz
                                   5556 ;	888n.c:738: roll_apeak_yz(0,10000);
      001B18 75 43 10         [24] 5557 	mov	_roll_apeak_yz_PARM_2,#0x10
      001B1B 75 44 27         [24] 5558 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001B1E 75 82 00         [24] 5559 	mov	dpl,#0x00
      001B21 12 0A AC         [24] 5560 	lcall	_roll_apeak_yz
                                   5561 ;	888n.c:739: roll_apeak_yz(1,10000);
      001B24 75 43 10         [24] 5562 	mov	_roll_apeak_yz_PARM_2,#0x10
      001B27 75 44 27         [24] 5563 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001B2A 75 82 01         [24] 5564 	mov	dpl,#0x01
      001B2D 12 0A AC         [24] 5565 	lcall	_roll_apeak_yz
                                   5566 ;	888n.c:740: roll_apeak_yz(2,10000);
      001B30 75 43 10         [24] 5567 	mov	_roll_apeak_yz_PARM_2,#0x10
      001B33 75 44 27         [24] 5568 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001B36 75 82 02         [24] 5569 	mov	dpl,#0x02
      001B39 12 0A AC         [24] 5570 	lcall	_roll_apeak_yz
                                   5571 ;	888n.c:741: roll_apeak_yz(3,10000);
      001B3C 75 43 10         [24] 5572 	mov	_roll_apeak_yz_PARM_2,#0x10
      001B3F 75 44 27         [24] 5573 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001B42 75 82 03         [24] 5574 	mov	dpl,#0x03
      001B45 12 0A AC         [24] 5575 	lcall	_roll_apeak_yz
                                   5576 ;	888n.c:742: roll_apeak_yz(0,10000);
      001B48 75 43 10         [24] 5577 	mov	_roll_apeak_yz_PARM_2,#0x10
      001B4B 75 44 27         [24] 5578 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001B4E 75 82 00         [24] 5579 	mov	dpl,#0x00
      001B51 12 0A AC         [24] 5580 	lcall	_roll_apeak_yz
                                   5581 ;	888n.c:743: roll_apeak_yz(1,10000);
      001B54 75 43 10         [24] 5582 	mov	_roll_apeak_yz_PARM_2,#0x10
      001B57 75 44 27         [24] 5583 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001B5A 75 82 01         [24] 5584 	mov	dpl,#0x01
      001B5D 12 0A AC         [24] 5585 	lcall	_roll_apeak_yz
                                   5586 ;	888n.c:744: roll_apeak_yz(2,10000);
      001B60 75 43 10         [24] 5587 	mov	_roll_apeak_yz_PARM_2,#0x10
      001B63 75 44 27         [24] 5588 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001B66 75 82 02         [24] 5589 	mov	dpl,#0x02
      001B69 12 0A AC         [24] 5590 	lcall	_roll_apeak_yz
                                   5591 ;	888n.c:745: roll_apeak_xy(0,10000);
      001B6C 75 45 10         [24] 5592 	mov	_roll_apeak_xy_PARM_2,#0x10
      001B6F 75 46 27         [24] 5593 	mov	(_roll_apeak_xy_PARM_2 + 1),#0x27
      001B72 75 82 00         [24] 5594 	mov	dpl,#0x00
      001B75 12 0B B7         [24] 5595 	lcall	_roll_apeak_xy
                                   5596 ;	888n.c:746: roll_apeak_xy(1,10000);
      001B78 75 45 10         [24] 5597 	mov	_roll_apeak_xy_PARM_2,#0x10
      001B7B 75 46 27         [24] 5598 	mov	(_roll_apeak_xy_PARM_2 + 1),#0x27
      001B7E 75 82 01         [24] 5599 	mov	dpl,#0x01
      001B81 12 0B B7         [24] 5600 	lcall	_roll_apeak_xy
                                   5601 ;	888n.c:747: roll_apeak_xy(2,10000);
      001B84 75 45 10         [24] 5602 	mov	_roll_apeak_xy_PARM_2,#0x10
      001B87 75 46 27         [24] 5603 	mov	(_roll_apeak_xy_PARM_2 + 1),#0x27
      001B8A 75 82 02         [24] 5604 	mov	dpl,#0x02
      001B8D 12 0B B7         [24] 5605 	lcall	_roll_apeak_xy
                                   5606 ;	888n.c:748: roll_apeak_xy(3,10000);
      001B90 75 45 10         [24] 5607 	mov	_roll_apeak_xy_PARM_2,#0x10
      001B93 75 46 27         [24] 5608 	mov	(_roll_apeak_xy_PARM_2 + 1),#0x27
      001B96 75 82 03         [24] 5609 	mov	dpl,#0x03
      001B99 12 0B B7         [24] 5610 	lcall	_roll_apeak_xy
                                   5611 ;	888n.c:749: roll_apeak_xy(0,10000);
      001B9C 75 45 10         [24] 5612 	mov	_roll_apeak_xy_PARM_2,#0x10
      001B9F 75 46 27         [24] 5613 	mov	(_roll_apeak_xy_PARM_2 + 1),#0x27
      001BA2 75 82 00         [24] 5614 	mov	dpl,#0x00
      001BA5 12 0B B7         [24] 5615 	lcall	_roll_apeak_xy
                                   5616 ;	888n.c:750: roll_apeak_xy(1,10000);
      001BA8 75 45 10         [24] 5617 	mov	_roll_apeak_xy_PARM_2,#0x10
      001BAB 75 46 27         [24] 5618 	mov	(_roll_apeak_xy_PARM_2 + 1),#0x27
      001BAE 75 82 01         [24] 5619 	mov	dpl,#0x01
      001BB1 12 0B B7         [24] 5620 	lcall	_roll_apeak_xy
                                   5621 ;	888n.c:751: roll_apeak_xy(2,10000);
      001BB4 75 45 10         [24] 5622 	mov	_roll_apeak_xy_PARM_2,#0x10
      001BB7 75 46 27         [24] 5623 	mov	(_roll_apeak_xy_PARM_2 + 1),#0x27
      001BBA 75 82 02         [24] 5624 	mov	dpl,#0x02
      001BBD 12 0B B7         [24] 5625 	lcall	_roll_apeak_xy
                                   5626 ;	888n.c:752: roll_apeak_xy(3,10000);
      001BC0 75 45 10         [24] 5627 	mov	_roll_apeak_xy_PARM_2,#0x10
      001BC3 75 46 27         [24] 5628 	mov	(_roll_apeak_xy_PARM_2 + 1),#0x27
      001BC6 75 82 03         [24] 5629 	mov	dpl,#0x03
      001BC9 12 0B B7         [24] 5630 	lcall	_roll_apeak_xy
                                   5631 ;	888n.c:754: for (i=0;i<8;i++) {
      001BCC 7F 00            [12] 5632 	mov	r7,#0x00
      001BCE                       5633 00103$:
                                   5634 ;	888n.c:755: box_apeak_xy (0,i,0,7-i,i,7,1,1);
      001BCE 74 07            [12] 5635 	mov	a,#0x07
      001BD0 C3               [12] 5636 	clr	c
      001BD1 9F               [12] 5637 	subb	a,r7
      001BD2 F5 3B            [12] 5638 	mov	_box_apeak_xy_PARM_4,a
      001BD4 8F 39            [24] 5639 	mov	_box_apeak_xy_PARM_2,r7
      001BD6 75 3A 00         [24] 5640 	mov	_box_apeak_xy_PARM_3,#0x00
      001BD9 8F 3C            [24] 5641 	mov	_box_apeak_xy_PARM_5,r7
      001BDB 75 3D 07         [24] 5642 	mov	_box_apeak_xy_PARM_6,#0x07
      001BDE 75 3E 01         [24] 5643 	mov	_box_apeak_xy_PARM_7,#0x01
      001BE1 75 3F 01         [24] 5644 	mov	_box_apeak_xy_PARM_8,#0x01
      001BE4 75 82 00         [24] 5645 	mov	dpl,#0x00
      001BE7 C0 07            [24] 5646 	push	ar7
      001BE9 12 08 F9         [24] 5647 	lcall	_box_apeak_xy
                                   5648 ;	888n.c:756: delay(a);
      001BEC 90 0B B8         [24] 5649 	mov	dptr,#0x0bb8
      001BEF 12 00 90         [24] 5650 	lcall	_delay
      001BF2 D0 07            [24] 5651 	pop	ar7
                                   5652 ;	888n.c:754: for (i=0;i<8;i++) {
      001BF4 0F               [12] 5653 	inc	r7
      001BF5 BF 08 00         [24] 5654 	cjne	r7,#0x08,00123$
      001BF8                       5655 00123$:
      001BF8 40 D4            [24] 5656 	jc	00103$
                                   5657 ;	888n.c:759: delay(30000);
      001BFA 90 75 30         [24] 5658 	mov	dptr,#0x7530
      001BFD 12 00 90         [24] 5659 	lcall	_delay
                                   5660 ;	888n.c:760: roll_3_xy(0,a);
      001C00 75 47 B8         [24] 5661 	mov	_roll_3_xy_PARM_2,#0xb8
      001C03 75 48 0B         [24] 5662 	mov	(_roll_3_xy_PARM_2 + 1),#0x0b
      001C06 75 82 00         [24] 5663 	mov	dpl,#0x00
      001C09 12 0D 06         [24] 5664 	lcall	_roll_3_xy
                                   5665 ;	888n.c:761: delay(30000);
      001C0C 90 75 30         [24] 5666 	mov	dptr,#0x7530
      001C0F 12 00 90         [24] 5667 	lcall	_delay
                                   5668 ;	888n.c:762: roll_3_xy(1,a);
      001C12 75 47 B8         [24] 5669 	mov	_roll_3_xy_PARM_2,#0xb8
      001C15 75 48 0B         [24] 5670 	mov	(_roll_3_xy_PARM_2 + 1),#0x0b
      001C18 75 82 01         [24] 5671 	mov	dpl,#0x01
      001C1B 12 0D 06         [24] 5672 	lcall	_roll_3_xy
                                   5673 ;	888n.c:763: delay(30000);
      001C1E 90 75 30         [24] 5674 	mov	dptr,#0x7530
      001C21 12 00 90         [24] 5675 	lcall	_delay
                                   5676 ;	888n.c:764: roll_3_xy(2,a);
      001C24 75 47 B8         [24] 5677 	mov	_roll_3_xy_PARM_2,#0xb8
      001C27 75 48 0B         [24] 5678 	mov	(_roll_3_xy_PARM_2 + 1),#0x0b
      001C2A 75 82 02         [24] 5679 	mov	dpl,#0x02
      001C2D 12 0D 06         [24] 5680 	lcall	_roll_3_xy
                                   5681 ;	888n.c:765: delay(30000);
      001C30 90 75 30         [24] 5682 	mov	dptr,#0x7530
      001C33 12 00 90         [24] 5683 	lcall	_delay
                                   5684 ;	888n.c:766: roll_3_xy(3,a);
      001C36 75 47 B8         [24] 5685 	mov	_roll_3_xy_PARM_2,#0xb8
      001C39 75 48 0B         [24] 5686 	mov	(_roll_3_xy_PARM_2 + 1),#0x0b
      001C3C 75 82 03         [24] 5687 	mov	dpl,#0x03
      001C3F 12 0D 06         [24] 5688 	lcall	_roll_3_xy
                                   5689 ;	888n.c:767: delay(30000);
      001C42 90 75 30         [24] 5690 	mov	dptr,#0x7530
      001C45 12 00 90         [24] 5691 	lcall	_delay
                                   5692 ;	888n.c:768: roll_3_xy(0,a);
      001C48 75 47 B8         [24] 5693 	mov	_roll_3_xy_PARM_2,#0xb8
      001C4B 75 48 0B         [24] 5694 	mov	(_roll_3_xy_PARM_2 + 1),#0x0b
      001C4E 75 82 00         [24] 5695 	mov	dpl,#0x00
      001C51 12 0D 06         [24] 5696 	lcall	_roll_3_xy
                                   5697 ;	888n.c:769: delay(30000);
      001C54 90 75 30         [24] 5698 	mov	dptr,#0x7530
      001C57 12 00 90         [24] 5699 	lcall	_delay
                                   5700 ;	888n.c:770: roll_3_xy(1,a);
      001C5A 75 47 B8         [24] 5701 	mov	_roll_3_xy_PARM_2,#0xb8
      001C5D 75 48 0B         [24] 5702 	mov	(_roll_3_xy_PARM_2 + 1),#0x0b
      001C60 75 82 01         [24] 5703 	mov	dpl,#0x01
      001C63 12 0D 06         [24] 5704 	lcall	_roll_3_xy
                                   5705 ;	888n.c:771: delay(30000);
      001C66 90 75 30         [24] 5706 	mov	dptr,#0x7530
      001C69 12 00 90         [24] 5707 	lcall	_delay
                                   5708 ;	888n.c:772: roll_3_xy(2,a);
      001C6C 75 47 B8         [24] 5709 	mov	_roll_3_xy_PARM_2,#0xb8
      001C6F 75 48 0B         [24] 5710 	mov	(_roll_3_xy_PARM_2 + 1),#0x0b
      001C72 75 82 02         [24] 5711 	mov	dpl,#0x02
      001C75 12 0D 06         [24] 5712 	lcall	_roll_3_xy
                                   5713 ;	888n.c:773: delay(30000);
      001C78 90 75 30         [24] 5714 	mov	dptr,#0x7530
      001C7B 12 00 90         [24] 5715 	lcall	_delay
                                   5716 ;	888n.c:774: roll_3_xy(3,a);
      001C7E 75 47 B8         [24] 5717 	mov	_roll_3_xy_PARM_2,#0xb8
      001C81 75 48 0B         [24] 5718 	mov	(_roll_3_xy_PARM_2 + 1),#0x0b
      001C84 75 82 03         [24] 5719 	mov	dpl,#0x03
      001C87 12 0D 06         [24] 5720 	lcall	_roll_3_xy
                                   5721 ;	888n.c:775: for (i=7;i>0;i--) {
      001C8A 7F 07            [12] 5722 	mov	r7,#0x07
      001C8C                       5723 00105$:
                                   5724 ;	888n.c:776: box_apeak_xy(i,0,0,i,7,7,1,0);
      001C8C 75 39 00         [24] 5725 	mov	_box_apeak_xy_PARM_2,#0x00
      001C8F 75 3A 00         [24] 5726 	mov	_box_apeak_xy_PARM_3,#0x00
      001C92 8F 3B            [24] 5727 	mov	_box_apeak_xy_PARM_4,r7
      001C94 75 3C 07         [24] 5728 	mov	_box_apeak_xy_PARM_5,#0x07
      001C97 75 3D 07         [24] 5729 	mov	_box_apeak_xy_PARM_6,#0x07
      001C9A 75 3E 01         [24] 5730 	mov	_box_apeak_xy_PARM_7,#0x01
      001C9D 75 3F 00         [24] 5731 	mov	_box_apeak_xy_PARM_8,#0x00
      001CA0 8F 82            [24] 5732 	mov	dpl,r7
      001CA2 C0 07            [24] 5733 	push	ar7
      001CA4 12 08 F9         [24] 5734 	lcall	_box_apeak_xy
                                   5735 ;	888n.c:777: delay(a);
      001CA7 90 0B B8         [24] 5736 	mov	dptr,#0x0bb8
      001CAA 12 00 90         [24] 5737 	lcall	_delay
      001CAD D0 07            [24] 5738 	pop	ar7
                                   5739 ;	888n.c:775: for (i=7;i>0;i--) {
      001CAF DF DB            [24] 5740 	djnz	r7,00105$
      001CB1 22               [24] 5741 	ret
                                   5742 ;------------------------------------------------------------
                                   5743 ;Allocation info for local variables in function 'flash_8'
                                   5744 ;------------------------------------------------------------
                                   5745 ;i                         Allocated to registers r7 
                                   5746 ;------------------------------------------------------------
                                   5747 ;	888n.c:781: void flash_8()
                                   5748 ;	-----------------------------------------
                                   5749 ;	 function flash_8
                                   5750 ;	-----------------------------------------
      001CB2                       5751 _flash_8:
                                   5752 ;	888n.c:785: for (i=5;i<8;i++) {
      001CB2 7F 05            [12] 5753 	mov	r7,#0x05
      001CB4                       5754 00102$:
                                   5755 ;	888n.c:786: tranoutchar(i,10000);
      001CB4 75 4B 10         [24] 5756 	mov	_tranoutchar_PARM_2,#0x10
      001CB7 75 4C 27         [24] 5757 	mov	(_tranoutchar_PARM_2 + 1),#0x27
      001CBA 8F 82            [24] 5758 	mov	dpl,r7
      001CBC C0 07            [24] 5759 	push	ar7
      001CBE 12 0E D7         [24] 5760 	lcall	_tranoutchar
                                   5761 ;	888n.c:787: delay(60000);
      001CC1 90 EA 60         [24] 5762 	mov	dptr,#0xea60
      001CC4 12 00 90         [24] 5763 	lcall	_delay
                                   5764 ;	888n.c:788: delay(60000);
      001CC7 90 EA 60         [24] 5765 	mov	dptr,#0xea60
      001CCA 12 00 90         [24] 5766 	lcall	_delay
      001CCD D0 07            [24] 5767 	pop	ar7
                                   5768 ;	888n.c:785: for (i=5;i<8;i++) {
      001CCF 0F               [12] 5769 	inc	r7
      001CD0 BF 08 00         [24] 5770 	cjne	r7,#0x08,00110$
      001CD3                       5771 00110$:
      001CD3 40 DF            [24] 5772 	jc	00102$
      001CD5 22               [24] 5773 	ret
                                   5774 ;------------------------------------------------------------
                                   5775 ;Allocation info for local variables in function 'flash_9'
                                   5776 ;------------------------------------------------------------
                                   5777 ;i                         Allocated with name '_flash_9_i_1_134'
                                   5778 ;j                         Allocated with name '_flash_9_j_1_134'
                                   5779 ;an                        Allocated with name '_flash_9_an_1_134'
                                   5780 ;x                         Allocated to registers r2 
                                   5781 ;y                         Allocated with name '_flash_9_y_1_134'
                                   5782 ;t                         Allocated to registers r4 
                                   5783 ;x1                        Allocated to registers r5 
                                   5784 ;y1                        Allocated to registers r7 
                                   5785 ;sloc0                     Allocated with name '_flash_9_sloc0_1_0'
                                   5786 ;sloc1                     Allocated with name '_flash_9_sloc1_1_0'
                                   5787 ;sloc2                     Allocated with name '_flash_9_sloc2_1_0'
                                   5788 ;------------------------------------------------------------
                                   5789 ;	888n.c:792: void flash_9()
                                   5790 ;	-----------------------------------------
                                   5791 ;	 function flash_9
                                   5792 ;	-----------------------------------------
      001CD6                       5793 _flash_9:
                                   5794 ;	888n.c:797: for (i=0;i<8;i++) {
      001CD6 7F 00            [12] 5795 	mov	r7,#0x00
      001CD8                       5796 00126$:
                                   5797 ;	888n.c:798: box_apeak_xy (i,0,0,i,7,7,1,1);
      001CD8 75 39 00         [24] 5798 	mov	_box_apeak_xy_PARM_2,#0x00
      001CDB 75 3A 00         [24] 5799 	mov	_box_apeak_xy_PARM_3,#0x00
      001CDE 8F 3B            [24] 5800 	mov	_box_apeak_xy_PARM_4,r7
      001CE0 75 3C 07         [24] 5801 	mov	_box_apeak_xy_PARM_5,#0x07
      001CE3 75 3D 07         [24] 5802 	mov	_box_apeak_xy_PARM_6,#0x07
      001CE6 75 3E 01         [24] 5803 	mov	_box_apeak_xy_PARM_7,#0x01
      001CE9 75 3F 01         [24] 5804 	mov	_box_apeak_xy_PARM_8,#0x01
      001CEC 8F 82            [24] 5805 	mov	dpl,r7
      001CEE C0 07            [24] 5806 	push	ar7
      001CF0 12 08 F9         [24] 5807 	lcall	_box_apeak_xy
      001CF3 D0 07            [24] 5808 	pop	ar7
                                   5809 ;	888n.c:799: if (i) box_apeak_xy (i-1,0,0,i-1,7,7,1,0);
      001CF5 EF               [12] 5810 	mov	a,r7
      001CF6 60 20            [24] 5811 	jz	00102$
      001CF8 EF               [12] 5812 	mov	a,r7
      001CF9 14               [12] 5813 	dec	a
      001CFA FE               [12] 5814 	mov	r6,a
      001CFB 75 39 00         [24] 5815 	mov	_box_apeak_xy_PARM_2,#0x00
      001CFE 75 3A 00         [24] 5816 	mov	_box_apeak_xy_PARM_3,#0x00
      001D01 8E 3B            [24] 5817 	mov	_box_apeak_xy_PARM_4,r6
      001D03 75 3C 07         [24] 5818 	mov	_box_apeak_xy_PARM_5,#0x07
      001D06 75 3D 07         [24] 5819 	mov	_box_apeak_xy_PARM_6,#0x07
      001D09 75 3E 01         [24] 5820 	mov	_box_apeak_xy_PARM_7,#0x01
      001D0C 75 3F 00         [24] 5821 	mov	_box_apeak_xy_PARM_8,#0x00
      001D0F 8E 82            [24] 5822 	mov	dpl,r6
      001D11 C0 07            [24] 5823 	push	ar7
      001D13 12 08 F9         [24] 5824 	lcall	_box_apeak_xy
      001D16 D0 07            [24] 5825 	pop	ar7
      001D18                       5826 00102$:
                                   5827 ;	888n.c:800: delay(10000);
      001D18 90 27 10         [24] 5828 	mov	dptr,#0x2710
      001D1B C0 07            [24] 5829 	push	ar7
      001D1D 12 00 90         [24] 5830 	lcall	_delay
      001D20 D0 07            [24] 5831 	pop	ar7
                                   5832 ;	888n.c:797: for (i=0;i<8;i++) {
      001D22 0F               [12] 5833 	inc	r7
      001D23 C3               [12] 5834 	clr	c
      001D24 EF               [12] 5835 	mov	a,r7
      001D25 64 80            [12] 5836 	xrl	a,#0x80
      001D27 94 88            [12] 5837 	subb	a,#0x88
      001D29 40 AD            [24] 5838 	jc	00126$
                                   5839 ;	888n.c:803: roll_apeak_xy(3,10000);
      001D2B 75 45 10         [24] 5840 	mov	_roll_apeak_xy_PARM_2,#0x10
      001D2E 75 46 27         [24] 5841 	mov	(_roll_apeak_xy_PARM_2 + 1),#0x27
      001D31 75 82 03         [24] 5842 	mov	dpl,#0x03
      001D34 12 0B B7         [24] 5843 	lcall	_roll_apeak_xy
                                   5844 ;	888n.c:804: roll_apeak_xy(0,10000);
      001D37 75 45 10         [24] 5845 	mov	_roll_apeak_xy_PARM_2,#0x10
      001D3A 75 46 27         [24] 5846 	mov	(_roll_apeak_xy_PARM_2 + 1),#0x27
      001D3D 75 82 00         [24] 5847 	mov	dpl,#0x00
      001D40 12 0B B7         [24] 5848 	lcall	_roll_apeak_xy
                                   5849 ;	888n.c:805: roll_apeak_xy(1,10000);
      001D43 75 45 10         [24] 5850 	mov	_roll_apeak_xy_PARM_2,#0x10
      001D46 75 46 27         [24] 5851 	mov	(_roll_apeak_xy_PARM_2 + 1),#0x27
      001D49 75 82 01         [24] 5852 	mov	dpl,#0x01
      001D4C 12 0B B7         [24] 5853 	lcall	_roll_apeak_xy
                                   5854 ;	888n.c:807: for (i=0;i<7;i++) {
      001D4F 7F 00            [12] 5855 	mov	r7,#0x00
      001D51                       5856 00128$:
                                   5857 ;	888n.c:808: line(6-i,6-i,0,6-i,6-i,7,1);
      001D51 74 06            [12] 5858 	mov	a,#0x06
      001D53 C3               [12] 5859 	clr	c
      001D54 9F               [12] 5860 	subb	a,r7
      001D55 FE               [12] 5861 	mov	r6,a
      001D56 8E 26            [24] 5862 	mov	_line_PARM_2,r6
      001D58 75 27 00         [24] 5863 	mov	_line_PARM_3,#0x00
      001D5B 8E 28            [24] 5864 	mov	_line_PARM_4,r6
      001D5D 8E 29            [24] 5865 	mov	_line_PARM_5,r6
      001D5F 75 2A 07         [24] 5866 	mov	_line_PARM_6,#0x07
      001D62 75 2B 01         [24] 5867 	mov	_line_PARM_7,#0x01
      001D65 8E 82            [24] 5868 	mov	dpl,r6
      001D67 C0 07            [24] 5869 	push	ar7
      001D69 12 03 1D         [24] 5870 	lcall	_line
      001D6C D0 07            [24] 5871 	pop	ar7
                                   5872 ;	888n.c:809: line(i,7,0,i,7,7,0);
      001D6E 75 26 07         [24] 5873 	mov	_line_PARM_2,#0x07
      001D71 75 27 00         [24] 5874 	mov	_line_PARM_3,#0x00
      001D74 8F 28            [24] 5875 	mov	_line_PARM_4,r7
      001D76 75 29 07         [24] 5876 	mov	_line_PARM_5,#0x07
      001D79 75 2A 07         [24] 5877 	mov	_line_PARM_6,#0x07
      001D7C 75 2B 00         [24] 5878 	mov	_line_PARM_7,#0x00
      001D7F 8F 82            [24] 5879 	mov	dpl,r7
      001D81 C0 07            [24] 5880 	push	ar7
      001D83 12 03 1D         [24] 5881 	lcall	_line
                                   5882 ;	888n.c:810: delay(10000);
      001D86 90 27 10         [24] 5883 	mov	dptr,#0x2710
      001D89 12 00 90         [24] 5884 	lcall	_delay
      001D8C D0 07            [24] 5885 	pop	ar7
                                   5886 ;	888n.c:807: for (i=0;i<7;i++) {
      001D8E 0F               [12] 5887 	inc	r7
      001D8F C3               [12] 5888 	clr	c
      001D90 EF               [12] 5889 	mov	a,r7
      001D91 64 80            [12] 5890 	xrl	a,#0x80
      001D93 94 87            [12] 5891 	subb	a,#0x87
      001D95 40 BA            [24] 5892 	jc	00128$
                                   5893 ;	888n.c:813: for (i=0;i<8;i++) an[i]=14;
      001D97 7F 00            [12] 5894 	mov	r7,#0x00
      001D99                       5895 00130$:
      001D99 EF               [12] 5896 	mov	a,r7
      001D9A 24 66            [12] 5897 	add	a,#_flash_9_an_1_134
      001D9C F8               [12] 5898 	mov	r0,a
      001D9D 76 0E            [12] 5899 	mov	@r0,#0x0e
      001D9F 0F               [12] 5900 	inc	r7
      001DA0 C3               [12] 5901 	clr	c
      001DA1 EF               [12] 5902 	mov	a,r7
      001DA2 64 80            [12] 5903 	xrl	a,#0x80
      001DA4 94 88            [12] 5904 	subb	a,#0x88
      001DA6 40 F1            [24] 5905 	jc	00130$
                                   5906 ;	888n.c:815: for (i=0;i<85;i++) {
      001DA8 75 64 00         [24] 5907 	mov	_flash_9_i_1_134,#0x00
      001DAB                       5908 00136$:
                                   5909 ;	888n.c:816: clear(0);
      001DAB 75 82 00         [24] 5910 	mov	dpl,#0x00
      001DAE 12 01 3A         [24] 5911 	lcall	_clear
                                   5912 ;	888n.c:817: for (j=0;j<8;j++) {
      001DB1 7E 00            [12] 5913 	mov	r6,#0x00
      001DB3                       5914 00132$:
                                   5915 ;	888n.c:818: t=an[j]%28;
      001DB3 EE               [12] 5916 	mov	a,r6
      001DB4 24 66            [12] 5917 	add	a,#_flash_9_an_1_134
      001DB6 F9               [12] 5918 	mov	r1,a
      001DB7 87 05            [24] 5919 	mov	ar5,@r1
      001DB9 75 F0 1C         [24] 5920 	mov	b,#0x1c
      001DBC ED               [12] 5921 	mov	a,r5
      001DBD 84               [48] 5922 	div	ab
                                   5923 ;	888n.c:819: x=dat2[t]>>5;
      001DBE E5 F0            [12] 5924 	mov	a,b
      001DC0 90 2B 47         [24] 5925 	mov	dptr,#_dat2
      001DC3 93               [24] 5926 	movc	a,@a+dptr
      001DC4 FB               [12] 5927 	mov	r3,a
      001DC5 C4               [12] 5928 	swap	a
      001DC6 03               [12] 5929 	rr	a
      001DC7 54 07            [12] 5930 	anl	a,#0x07
      001DC9 FA               [12] 5931 	mov	r2,a
                                   5932 ;	888n.c:820: y=(dat2[t]>>2)&0x07;
      001DCA EB               [12] 5933 	mov	a,r3
      001DCB 03               [12] 5934 	rr	a
      001DCC 03               [12] 5935 	rr	a
      001DCD 54 3F            [12] 5936 	anl	a,#0x3f
      001DCF FB               [12] 5937 	mov	r3,a
      001DD0 74 07            [12] 5938 	mov	a,#0x07
      001DD2 5B               [12] 5939 	anl	a,r3
      001DD3 F5 6E            [12] 5940 	mov	_flash_9_y_1_134,a
                                   5941 ;	888n.c:821: t=(an[j]-14)%28;
      001DD5 7F 00            [12] 5942 	mov	r7,#0x00
      001DD7 ED               [12] 5943 	mov	a,r5
      001DD8 24 F2            [12] 5944 	add	a,#0xf2
      001DDA F5 82            [12] 5945 	mov	dpl,a
      001DDC EF               [12] 5946 	mov	a,r7
      001DDD 34 FF            [12] 5947 	addc	a,#0xff
      001DDF F5 83            [12] 5948 	mov	dph,a
      001DE1 75 08 1C         [24] 5949 	mov	__modsint_PARM_2,#0x1c
                                   5950 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      001DE4 8F 09            [24] 5951 	mov	(__modsint_PARM_2 + 1),r7
      001DE6 C0 06            [24] 5952 	push	ar6
      001DE8 C0 02            [24] 5953 	push	ar2
      001DEA 12 29 ED         [24] 5954 	lcall	__modsint
      001DED AD 82            [24] 5955 	mov	r5,dpl
      001DEF D0 02            [24] 5956 	pop	ar2
      001DF1 D0 06            [24] 5957 	pop	ar6
      001DF3 8D 04            [24] 5958 	mov	ar4,r5
                                   5959 ;	888n.c:822: x1=dat2[t]>>5;
      001DF5 EC               [12] 5960 	mov	a,r4
      001DF6 90 2B 47         [24] 5961 	mov	dptr,#_dat2
      001DF9 93               [24] 5962 	movc	a,@a+dptr
      001DFA FF               [12] 5963 	mov	r7,a
      001DFB C4               [12] 5964 	swap	a
      001DFC 03               [12] 5965 	rr	a
      001DFD 54 07            [12] 5966 	anl	a,#0x07
      001DFF FD               [12] 5967 	mov	r5,a
                                   5968 ;	888n.c:823: y1=(dat2[t]>>2)&0x07;
      001E00 EF               [12] 5969 	mov	a,r7
      001E01 03               [12] 5970 	rr	a
      001E02 03               [12] 5971 	rr	a
      001E03 54 3F            [12] 5972 	anl	a,#0x3f
      001E05 FF               [12] 5973 	mov	r7,a
      001E06 53 07 07         [24] 5974 	anl	ar7,#0x07
                                   5975 ;	888n.c:824: line(x,y,j,x1,y1,j,1);
      001E09 85 6E 26         [24] 5976 	mov	_line_PARM_2,_flash_9_y_1_134
      001E0C 8E 27            [24] 5977 	mov	_line_PARM_3,r6
      001E0E 8D 28            [24] 5978 	mov	_line_PARM_4,r5
      001E10 8F 29            [24] 5979 	mov	_line_PARM_5,r7
      001E12 8E 2A            [24] 5980 	mov	_line_PARM_6,r6
      001E14 75 2B 01         [24] 5981 	mov	_line_PARM_7,#0x01
      001E17 8A 82            [24] 5982 	mov	dpl,r2
      001E19 C0 06            [24] 5983 	push	ar6
      001E1B 12 03 1D         [24] 5984 	lcall	_line
      001E1E D0 06            [24] 5985 	pop	ar6
                                   5986 ;	888n.c:817: for (j=0;j<8;j++) {
      001E20 0E               [12] 5987 	inc	r6
      001E21 BE 08 00         [24] 5988 	cjne	r6,#0x08,00309$
      001E24                       5989 00309$:
      001E24 40 8D            [24] 5990 	jc	00132$
                                   5991 ;	888n.c:826: for (j=0;j<8;j++) {
      001E26 75 65 00         [24] 5992 	mov	_flash_9_j_1_134,#0x00
      001E29                       5993 00134$:
                                   5994 ;	888n.c:827: if ((i>j)&(j>i-71))
      001E29 E5 64            [12] 5995 	mov	a,_flash_9_i_1_134
      001E2B F5 6F            [12] 5996 	mov	_flash_9_sloc0_1_0,a
      001E2D 33               [12] 5997 	rlc	a
      001E2E 95 E0            [12] 5998 	subb	a,acc
      001E30 F5 70            [12] 5999 	mov	(_flash_9_sloc0_1_0 + 1),a
      001E32 85 65 71         [24] 6000 	mov	_flash_9_sloc1_1_0,_flash_9_j_1_134
      001E35 75 72 00         [24] 6001 	mov	(_flash_9_sloc1_1_0 + 1),#0x00
      001E38 C3               [12] 6002 	clr	c
      001E39 E5 71            [12] 6003 	mov	a,_flash_9_sloc1_1_0
      001E3B 95 6F            [12] 6004 	subb	a,_flash_9_sloc0_1_0
      001E3D E5 72            [12] 6005 	mov	a,(_flash_9_sloc1_1_0 + 1)
      001E3F 64 80            [12] 6006 	xrl	a,#0x80
      001E41 85 70 F0         [24] 6007 	mov	b,(_flash_9_sloc0_1_0 + 1)
      001E44 63 F0 80         [24] 6008 	xrl	b,#0x80
      001E47 95 F0            [12] 6009 	subb	a,b
      001E49 E4               [12] 6010 	clr	a
      001E4A 33               [12] 6011 	rlc	a
      001E4B F5 73            [12] 6012 	mov	_flash_9_sloc2_1_0,a
      001E4D E5 6F            [12] 6013 	mov	a,_flash_9_sloc0_1_0
      001E4F 24 B9            [12] 6014 	add	a,#0xb9
      001E51 F5 6F            [12] 6015 	mov	_flash_9_sloc0_1_0,a
      001E53 E5 70            [12] 6016 	mov	a,(_flash_9_sloc0_1_0 + 1)
      001E55 34 FF            [12] 6017 	addc	a,#0xff
      001E57 F5 70            [12] 6018 	mov	(_flash_9_sloc0_1_0 + 1),a
      001E59 C3               [12] 6019 	clr	c
      001E5A E5 6F            [12] 6020 	mov	a,_flash_9_sloc0_1_0
      001E5C 95 71            [12] 6021 	subb	a,_flash_9_sloc1_1_0
      001E5E E5 70            [12] 6022 	mov	a,(_flash_9_sloc0_1_0 + 1)
      001E60 64 80            [12] 6023 	xrl	a,#0x80
      001E62 85 72 F0         [24] 6024 	mov	b,(_flash_9_sloc1_1_0 + 1)
      001E65 63 F0 80         [24] 6025 	xrl	b,#0x80
      001E68 95 F0            [12] 6026 	subb	a,b
      001E6A E4               [12] 6027 	clr	a
      001E6B 33               [12] 6028 	rlc	a
      001E6C FE               [12] 6029 	mov	r6,a
      001E6D 55 73            [12] 6030 	anl	a,_flash_9_sloc2_1_0
      001E6F 60 09            [24] 6031 	jz	00135$
                                   6032 ;	888n.c:828: an[j]++;
      001E71 E5 65            [12] 6033 	mov	a,_flash_9_j_1_134
      001E73 24 66            [12] 6034 	add	a,#_flash_9_an_1_134
      001E75 F9               [12] 6035 	mov	r1,a
      001E76 E7               [12] 6036 	mov	a,@r1
      001E77 FE               [12] 6037 	mov	r6,a
      001E78 04               [12] 6038 	inc	a
      001E79 F7               [12] 6039 	mov	@r1,a
      001E7A                       6040 00135$:
                                   6041 ;	888n.c:826: for (j=0;j<8;j++) {
      001E7A 05 65            [12] 6042 	inc	_flash_9_j_1_134
      001E7C 74 F8            [12] 6043 	mov	a,#0x100 - 0x08
      001E7E 25 65            [12] 6044 	add	a,_flash_9_j_1_134
      001E80 50 A7            [24] 6045 	jnc	00134$
                                   6046 ;	888n.c:830: delay(5000);
      001E82 90 13 88         [24] 6047 	mov	dptr,#0x1388
      001E85 12 00 90         [24] 6048 	lcall	_delay
                                   6049 ;	888n.c:815: for (i=0;i<85;i++) {
      001E88 05 64            [12] 6050 	inc	_flash_9_i_1_134
      001E8A C3               [12] 6051 	clr	c
      001E8B E5 64            [12] 6052 	mov	a,_flash_9_i_1_134
      001E8D 64 80            [12] 6053 	xrl	a,#0x80
      001E8F 94 D5            [12] 6054 	subb	a,#0xd5
      001E91 50 03            [24] 6055 	jnc	00313$
      001E93 02 1D AB         [24] 6056 	ljmp	00136$
      001E96                       6057 00313$:
                                   6058 ;	888n.c:833: for (i=0;i<85;i++) {
      001E96 75 64 00         [24] 6059 	mov	_flash_9_i_1_134,#0x00
      001E99                       6060 00142$:
                                   6061 ;	888n.c:834: clear(0);
      001E99 75 82 00         [24] 6062 	mov	dpl,#0x00
      001E9C 12 01 3A         [24] 6063 	lcall	_clear
                                   6064 ;	888n.c:835: for (j=0;j<8;j++) {
      001E9F 75 65 00         [24] 6065 	mov	_flash_9_j_1_134,#0x00
      001EA2                       6066 00138$:
                                   6067 ;	888n.c:836: t=an[j]%28;
      001EA2 E5 65            [12] 6068 	mov	a,_flash_9_j_1_134
      001EA4 24 66            [12] 6069 	add	a,#_flash_9_an_1_134
      001EA6 F9               [12] 6070 	mov	r1,a
      001EA7 87 73            [24] 6071 	mov	_flash_9_sloc2_1_0,@r1
      001EA9 75 F0 1C         [24] 6072 	mov	b,#0x1c
      001EAC E5 73            [12] 6073 	mov	a,_flash_9_sloc2_1_0
      001EAE 84               [48] 6074 	div	ab
                                   6075 ;	888n.c:837: x=dat2[t]>>5;
      001EAF E5 F0            [12] 6076 	mov	a,b
      001EB1 90 2B 47         [24] 6077 	mov	dptr,#_dat2
      001EB4 93               [24] 6078 	movc	a,@a+dptr
      001EB5 FE               [12] 6079 	mov	r6,a
      001EB6 C4               [12] 6080 	swap	a
      001EB7 03               [12] 6081 	rr	a
      001EB8 54 07            [12] 6082 	anl	a,#0x07
      001EBA FA               [12] 6083 	mov	r2,a
                                   6084 ;	888n.c:838: y=(dat2[t]>>2)&0x07;
      001EBB EE               [12] 6085 	mov	a,r6
      001EBC 03               [12] 6086 	rr	a
      001EBD 03               [12] 6087 	rr	a
      001EBE 54 3F            [12] 6088 	anl	a,#0x3f
      001EC0 FE               [12] 6089 	mov	r6,a
      001EC1 74 07            [12] 6090 	mov	a,#0x07
      001EC3 5E               [12] 6091 	anl	a,r6
      001EC4 F5 6E            [12] 6092 	mov	_flash_9_y_1_134,a
                                   6093 ;	888n.c:839: t=(an[j]-14)%28;
      001EC6 AB 73            [24] 6094 	mov	r3,_flash_9_sloc2_1_0
      001EC8 7E 00            [12] 6095 	mov	r6,#0x00
      001ECA EB               [12] 6096 	mov	a,r3
      001ECB 24 F2            [12] 6097 	add	a,#0xf2
      001ECD F5 82            [12] 6098 	mov	dpl,a
      001ECF EE               [12] 6099 	mov	a,r6
      001ED0 34 FF            [12] 6100 	addc	a,#0xff
      001ED2 F5 83            [12] 6101 	mov	dph,a
      001ED4 75 08 1C         [24] 6102 	mov	__modsint_PARM_2,#0x1c
                                   6103 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      001ED7 8E 09            [24] 6104 	mov	(__modsint_PARM_2 + 1),r6
      001ED9 C0 02            [24] 6105 	push	ar2
      001EDB 12 29 ED         [24] 6106 	lcall	__modsint
      001EDE AB 82            [24] 6107 	mov	r3,dpl
      001EE0 D0 02            [24] 6108 	pop	ar2
      001EE2 8B 04            [24] 6109 	mov	ar4,r3
                                   6110 ;	888n.c:840: x1=dat2[t]>>5;
      001EE4 EC               [12] 6111 	mov	a,r4
      001EE5 90 2B 47         [24] 6112 	mov	dptr,#_dat2
      001EE8 93               [24] 6113 	movc	a,@a+dptr
      001EE9 FE               [12] 6114 	mov	r6,a
      001EEA C4               [12] 6115 	swap	a
      001EEB 03               [12] 6116 	rr	a
      001EEC 54 07            [12] 6117 	anl	a,#0x07
      001EEE FD               [12] 6118 	mov	r5,a
                                   6119 ;	888n.c:841: y1=(dat2[t]>>2)&0x07;
      001EEF EE               [12] 6120 	mov	a,r6
      001EF0 03               [12] 6121 	rr	a
      001EF1 03               [12] 6122 	rr	a
      001EF2 54 3F            [12] 6123 	anl	a,#0x3f
      001EF4 FE               [12] 6124 	mov	r6,a
      001EF5 74 07            [12] 6125 	mov	a,#0x07
      001EF7 5E               [12] 6126 	anl	a,r6
      001EF8 FF               [12] 6127 	mov	r7,a
                                   6128 ;	888n.c:842: line(x,y,j,x1,y1,j,1);
      001EF9 85 6E 26         [24] 6129 	mov	_line_PARM_2,_flash_9_y_1_134
      001EFC 85 65 27         [24] 6130 	mov	_line_PARM_3,_flash_9_j_1_134
      001EFF 8D 28            [24] 6131 	mov	_line_PARM_4,r5
      001F01 8F 29            [24] 6132 	mov	_line_PARM_5,r7
      001F03 85 65 2A         [24] 6133 	mov	_line_PARM_6,_flash_9_j_1_134
      001F06 75 2B 01         [24] 6134 	mov	_line_PARM_7,#0x01
      001F09 8A 82            [24] 6135 	mov	dpl,r2
      001F0B 12 03 1D         [24] 6136 	lcall	_line
                                   6137 ;	888n.c:835: for (j=0;j<8;j++) {
      001F0E 05 65            [12] 6138 	inc	_flash_9_j_1_134
      001F10 74 F8            [12] 6139 	mov	a,#0x100 - 0x08
      001F12 25 65            [12] 6140 	add	a,_flash_9_j_1_134
      001F14 50 8C            [24] 6141 	jnc	00138$
                                   6142 ;	888n.c:844: for (j=0;j<8;j++) {
      001F16 75 65 00         [24] 6143 	mov	_flash_9_j_1_134,#0x00
      001F19                       6144 00140$:
                                   6145 ;	888n.c:845: if ((i>j)&(j>i-71))
      001F19 E5 64            [12] 6146 	mov	a,_flash_9_i_1_134
      001F1B F5 71            [12] 6147 	mov	_flash_9_sloc1_1_0,a
      001F1D 33               [12] 6148 	rlc	a
      001F1E 95 E0            [12] 6149 	subb	a,acc
      001F20 F5 72            [12] 6150 	mov	(_flash_9_sloc1_1_0 + 1),a
      001F22 85 65 6F         [24] 6151 	mov	_flash_9_sloc0_1_0,_flash_9_j_1_134
      001F25 75 70 00         [24] 6152 	mov	(_flash_9_sloc0_1_0 + 1),#0x00
      001F28 C3               [12] 6153 	clr	c
      001F29 E5 6F            [12] 6154 	mov	a,_flash_9_sloc0_1_0
      001F2B 95 71            [12] 6155 	subb	a,_flash_9_sloc1_1_0
      001F2D E5 70            [12] 6156 	mov	a,(_flash_9_sloc0_1_0 + 1)
      001F2F 64 80            [12] 6157 	xrl	a,#0x80
      001F31 85 72 F0         [24] 6158 	mov	b,(_flash_9_sloc1_1_0 + 1)
      001F34 63 F0 80         [24] 6159 	xrl	b,#0x80
      001F37 95 F0            [12] 6160 	subb	a,b
      001F39 E4               [12] 6161 	clr	a
      001F3A 33               [12] 6162 	rlc	a
      001F3B F5 73            [12] 6163 	mov	_flash_9_sloc2_1_0,a
      001F3D E5 71            [12] 6164 	mov	a,_flash_9_sloc1_1_0
      001F3F 24 B9            [12] 6165 	add	a,#0xb9
      001F41 FB               [12] 6166 	mov	r3,a
      001F42 E5 72            [12] 6167 	mov	a,(_flash_9_sloc1_1_0 + 1)
      001F44 34 FF            [12] 6168 	addc	a,#0xff
      001F46 FE               [12] 6169 	mov	r6,a
      001F47 C3               [12] 6170 	clr	c
      001F48 EB               [12] 6171 	mov	a,r3
      001F49 95 6F            [12] 6172 	subb	a,_flash_9_sloc0_1_0
      001F4B EE               [12] 6173 	mov	a,r6
      001F4C 64 80            [12] 6174 	xrl	a,#0x80
      001F4E 85 70 F0         [24] 6175 	mov	b,(_flash_9_sloc0_1_0 + 1)
      001F51 63 F0 80         [24] 6176 	xrl	b,#0x80
      001F54 95 F0            [12] 6177 	subb	a,b
      001F56 E4               [12] 6178 	clr	a
      001F57 33               [12] 6179 	rlc	a
      001F58 FB               [12] 6180 	mov	r3,a
      001F59 55 73            [12] 6181 	anl	a,_flash_9_sloc2_1_0
      001F5B 60 09            [24] 6182 	jz	00141$
                                   6183 ;	888n.c:846: an[j]--;
      001F5D E5 65            [12] 6184 	mov	a,_flash_9_j_1_134
      001F5F 24 66            [12] 6185 	add	a,#_flash_9_an_1_134
      001F61 F9               [12] 6186 	mov	r1,a
      001F62 E7               [12] 6187 	mov	a,@r1
      001F63 FE               [12] 6188 	mov	r6,a
      001F64 14               [12] 6189 	dec	a
      001F65 F7               [12] 6190 	mov	@r1,a
      001F66                       6191 00141$:
                                   6192 ;	888n.c:844: for (j=0;j<8;j++) {
      001F66 05 65            [12] 6193 	inc	_flash_9_j_1_134
      001F68 74 F8            [12] 6194 	mov	a,#0x100 - 0x08
      001F6A 25 65            [12] 6195 	add	a,_flash_9_j_1_134
      001F6C 50 AB            [24] 6196 	jnc	00140$
                                   6197 ;	888n.c:848: delay(5000);
      001F6E 90 13 88         [24] 6198 	mov	dptr,#0x1388
      001F71 12 00 90         [24] 6199 	lcall	_delay
                                   6200 ;	888n.c:833: for (i=0;i<85;i++) {
      001F74 05 64            [12] 6201 	inc	_flash_9_i_1_134
      001F76 C3               [12] 6202 	clr	c
      001F77 E5 64            [12] 6203 	mov	a,_flash_9_i_1_134
      001F79 64 80            [12] 6204 	xrl	a,#0x80
      001F7B 94 D5            [12] 6205 	subb	a,#0xd5
      001F7D 50 03            [24] 6206 	jnc	00317$
      001F7F 02 1E 99         [24] 6207 	ljmp	00142$
      001F82                       6208 00317$:
                                   6209 ;	888n.c:851: for (i=0;i<29;i++) {
      001F82 75 64 00         [24] 6210 	mov	_flash_9_i_1_134,#0x00
      001F85                       6211 00144$:
                                   6212 ;	888n.c:852: clear(0);
      001F85 75 82 00         [24] 6213 	mov	dpl,#0x00
      001F88 12 01 3A         [24] 6214 	lcall	_clear
                                   6215 ;	888n.c:854: t=an[0]%28;
      001F8B 75 F0 1C         [24] 6216 	mov	b,#0x1c
      001F8E E5 66            [12] 6217 	mov	a,_flash_9_an_1_134
      001F90 84               [48] 6218 	div	ab
                                   6219 ;	888n.c:855: x=dat2[t]>>5;
      001F91 E5 F0            [12] 6220 	mov	a,b
      001F93 90 2B 47         [24] 6221 	mov	dptr,#_dat2
      001F96 93               [24] 6222 	movc	a,@a+dptr
      001F97 FB               [12] 6223 	mov	r3,a
      001F98 C4               [12] 6224 	swap	a
      001F99 03               [12] 6225 	rr	a
      001F9A 54 07            [12] 6226 	anl	a,#0x07
      001F9C FA               [12] 6227 	mov	r2,a
                                   6228 ;	888n.c:856: y=(dat2[t]>>2)&0x07;
      001F9D EB               [12] 6229 	mov	a,r3
      001F9E 03               [12] 6230 	rr	a
      001F9F 03               [12] 6231 	rr	a
      001FA0 54 3F            [12] 6232 	anl	a,#0x3f
      001FA2 FB               [12] 6233 	mov	r3,a
      001FA3 74 07            [12] 6234 	mov	a,#0x07
      001FA5 5B               [12] 6235 	anl	a,r3
      001FA6 F5 6E            [12] 6236 	mov	_flash_9_y_1_134,a
                                   6237 ;	888n.c:857: t=(an[0]-14)%28;
      001FA8 AB 66            [24] 6238 	mov	r3,_flash_9_an_1_134
      001FAA 7E 00            [12] 6239 	mov	r6,#0x00
      001FAC EB               [12] 6240 	mov	a,r3
      001FAD 24 F2            [12] 6241 	add	a,#0xf2
      001FAF F5 82            [12] 6242 	mov	dpl,a
      001FB1 EE               [12] 6243 	mov	a,r6
      001FB2 34 FF            [12] 6244 	addc	a,#0xff
      001FB4 F5 83            [12] 6245 	mov	dph,a
      001FB6 75 08 1C         [24] 6246 	mov	__modsint_PARM_2,#0x1c
                                   6247 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      001FB9 8E 09            [24] 6248 	mov	(__modsint_PARM_2 + 1),r6
      001FBB C0 02            [24] 6249 	push	ar2
      001FBD 12 29 ED         [24] 6250 	lcall	__modsint
      001FC0 AB 82            [24] 6251 	mov	r3,dpl
      001FC2 D0 02            [24] 6252 	pop	ar2
      001FC4 8B 04            [24] 6253 	mov	ar4,r3
                                   6254 ;	888n.c:858: x1=dat2[t]>>5;
      001FC6 EC               [12] 6255 	mov	a,r4
      001FC7 90 2B 47         [24] 6256 	mov	dptr,#_dat2
      001FCA 93               [24] 6257 	movc	a,@a+dptr
      001FCB FE               [12] 6258 	mov	r6,a
      001FCC C4               [12] 6259 	swap	a
      001FCD 03               [12] 6260 	rr	a
      001FCE 54 07            [12] 6261 	anl	a,#0x07
      001FD0 FD               [12] 6262 	mov	r5,a
                                   6263 ;	888n.c:859: y1=(dat2[t]>>2)&0x07;
      001FD1 EE               [12] 6264 	mov	a,r6
      001FD2 03               [12] 6265 	rr	a
      001FD3 03               [12] 6266 	rr	a
      001FD4 54 3F            [12] 6267 	anl	a,#0x3f
      001FD6 FE               [12] 6268 	mov	r6,a
      001FD7 74 07            [12] 6269 	mov	a,#0x07
      001FD9 5E               [12] 6270 	anl	a,r6
      001FDA FF               [12] 6271 	mov	r7,a
                                   6272 ;	888n.c:860: box_apeak_xy(x,y,0,x1,y1,7,0,1);
      001FDB 85 6E 39         [24] 6273 	mov	_box_apeak_xy_PARM_2,_flash_9_y_1_134
      001FDE 75 3A 00         [24] 6274 	mov	_box_apeak_xy_PARM_3,#0x00
      001FE1 8D 3B            [24] 6275 	mov	_box_apeak_xy_PARM_4,r5
      001FE3 8F 3C            [24] 6276 	mov	_box_apeak_xy_PARM_5,r7
      001FE5 75 3D 07         [24] 6277 	mov	_box_apeak_xy_PARM_6,#0x07
      001FE8 75 3E 00         [24] 6278 	mov	_box_apeak_xy_PARM_7,#0x00
      001FEB 75 3F 01         [24] 6279 	mov	_box_apeak_xy_PARM_8,#0x01
      001FEE 8A 82            [24] 6280 	mov	dpl,r2
      001FF0 C0 07            [24] 6281 	push	ar7
      001FF2 C0 05            [24] 6282 	push	ar5
      001FF4 C0 02            [24] 6283 	push	ar2
      001FF6 12 08 F9         [24] 6284 	lcall	_box_apeak_xy
      001FF9 D0 02            [24] 6285 	pop	ar2
      001FFB D0 05            [24] 6286 	pop	ar5
      001FFD D0 07            [24] 6287 	pop	ar7
                                   6288 ;	888n.c:861: box_apeak_xy(x,y,1,x1,y1,6,0,1);
      001FFF 85 6E 39         [24] 6289 	mov	_box_apeak_xy_PARM_2,_flash_9_y_1_134
      002002 75 3A 01         [24] 6290 	mov	_box_apeak_xy_PARM_3,#0x01
      002005 8D 3B            [24] 6291 	mov	_box_apeak_xy_PARM_4,r5
      002007 8F 3C            [24] 6292 	mov	_box_apeak_xy_PARM_5,r7
      002009 75 3D 06         [24] 6293 	mov	_box_apeak_xy_PARM_6,#0x06
      00200C 75 3E 00         [24] 6294 	mov	_box_apeak_xy_PARM_7,#0x00
      00200F 75 3F 01         [24] 6295 	mov	_box_apeak_xy_PARM_8,#0x01
      002012 8A 82            [24] 6296 	mov	dpl,r2
      002014 12 08 F9         [24] 6297 	lcall	_box_apeak_xy
                                   6298 ;	888n.c:862: an[0]++; 
      002017 E5 66            [12] 6299 	mov	a,_flash_9_an_1_134
      002019 04               [12] 6300 	inc	a
      00201A F5 66            [12] 6301 	mov	_flash_9_an_1_134,a
                                   6302 ;	888n.c:863: delay(5000);
      00201C 90 13 88         [24] 6303 	mov	dptr,#0x1388
      00201F 12 00 90         [24] 6304 	lcall	_delay
                                   6305 ;	888n.c:851: for (i=0;i<29;i++) {
      002022 05 64            [12] 6306 	inc	_flash_9_i_1_134
      002024 C3               [12] 6307 	clr	c
      002025 E5 64            [12] 6308 	mov	a,_flash_9_i_1_134
      002027 64 80            [12] 6309 	xrl	a,#0x80
      002029 94 9D            [12] 6310 	subb	a,#0x9d
      00202B 50 03            [24] 6311 	jnc	00318$
      00202D 02 1F 85         [24] 6312 	ljmp	00144$
      002030                       6313 00318$:
                                   6314 ;	888n.c:866: for (i=0;i<16;i++) {
      002030 7F 00            [12] 6315 	mov	r7,#0x00
      002032                       6316 00146$:
                                   6317 ;	888n.c:867: clear(0);
      002032 75 82 00         [24] 6318 	mov	dpl,#0x00
      002035 C0 07            [24] 6319 	push	ar7
      002037 12 01 3A         [24] 6320 	lcall	_clear
                                   6321 ;	888n.c:869: t=an[0]%28;
      00203A 75 F0 1C         [24] 6322 	mov	b,#0x1c
      00203D E5 66            [12] 6323 	mov	a,_flash_9_an_1_134
      00203F 84               [48] 6324 	div	ab
                                   6325 ;	888n.c:870: x=dat2[t]>>5;
      002040 E5 F0            [12] 6326 	mov	a,b
      002042 90 2B 47         [24] 6327 	mov	dptr,#_dat2
      002045 93               [24] 6328 	movc	a,@a+dptr
      002046 FE               [12] 6329 	mov	r6,a
      002047 C4               [12] 6330 	swap	a
      002048 03               [12] 6331 	rr	a
      002049 54 07            [12] 6332 	anl	a,#0x07
      00204B FA               [12] 6333 	mov	r2,a
                                   6334 ;	888n.c:871: y=(dat2[t]>>2)&0x07;
      00204C EE               [12] 6335 	mov	a,r6
      00204D 03               [12] 6336 	rr	a
      00204E 03               [12] 6337 	rr	a
      00204F 54 3F            [12] 6338 	anl	a,#0x3f
      002051 FE               [12] 6339 	mov	r6,a
      002052 74 07            [12] 6340 	mov	a,#0x07
      002054 5E               [12] 6341 	anl	a,r6
      002055 F5 6E            [12] 6342 	mov	_flash_9_y_1_134,a
                                   6343 ;	888n.c:872: t=(an[0]-14)%28;
      002057 AD 66            [24] 6344 	mov	r5,_flash_9_an_1_134
      002059 7E 00            [12] 6345 	mov	r6,#0x00
      00205B ED               [12] 6346 	mov	a,r5
      00205C 24 F2            [12] 6347 	add	a,#0xf2
      00205E F5 82            [12] 6348 	mov	dpl,a
      002060 EE               [12] 6349 	mov	a,r6
      002061 34 FF            [12] 6350 	addc	a,#0xff
      002063 F5 83            [12] 6351 	mov	dph,a
      002065 75 08 1C         [24] 6352 	mov	__modsint_PARM_2,#0x1c
                                   6353 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      002068 8E 09            [24] 6354 	mov	(__modsint_PARM_2 + 1),r6
      00206A C0 02            [24] 6355 	push	ar2
      00206C 12 29 ED         [24] 6356 	lcall	__modsint
      00206F AD 82            [24] 6357 	mov	r5,dpl
      002071 D0 02            [24] 6358 	pop	ar2
      002073 8D 04            [24] 6359 	mov	ar4,r5
                                   6360 ;	888n.c:873: x1=dat2[t]>>5;
      002075 EC               [12] 6361 	mov	a,r4
      002076 90 2B 47         [24] 6362 	mov	dptr,#_dat2
      002079 93               [24] 6363 	movc	a,@a+dptr
      00207A FE               [12] 6364 	mov	r6,a
      00207B C4               [12] 6365 	swap	a
      00207C 03               [12] 6366 	rr	a
      00207D 54 07            [12] 6367 	anl	a,#0x07
      00207F F5 3B            [12] 6368 	mov	_box_apeak_xy_PARM_4,a
                                   6369 ;	888n.c:874: y1=(dat2[t]>>2)&0x07;
      002081 EE               [12] 6370 	mov	a,r6
      002082 03               [12] 6371 	rr	a
      002083 03               [12] 6372 	rr	a
      002084 54 3F            [12] 6373 	anl	a,#0x3f
      002086 FE               [12] 6374 	mov	r6,a
      002087 74 07            [12] 6375 	mov	a,#0x07
      002089 5E               [12] 6376 	anl	a,r6
      00208A F5 3C            [12] 6377 	mov	_box_apeak_xy_PARM_5,a
                                   6378 ;	888n.c:875: box_apeak_xy(x,y,0,x1,y1,7,1,1);
      00208C 85 6E 39         [24] 6379 	mov	_box_apeak_xy_PARM_2,_flash_9_y_1_134
      00208F 75 3A 00         [24] 6380 	mov	_box_apeak_xy_PARM_3,#0x00
      002092 75 3D 07         [24] 6381 	mov	_box_apeak_xy_PARM_6,#0x07
      002095 75 3E 01         [24] 6382 	mov	_box_apeak_xy_PARM_7,#0x01
      002098 75 3F 01         [24] 6383 	mov	_box_apeak_xy_PARM_8,#0x01
      00209B 8A 82            [24] 6384 	mov	dpl,r2
      00209D 12 08 F9         [24] 6385 	lcall	_box_apeak_xy
                                   6386 ;	888n.c:876: an[0]--; 
      0020A0 E5 66            [12] 6387 	mov	a,_flash_9_an_1_134
      0020A2 14               [12] 6388 	dec	a
      0020A3 F5 66            [12] 6389 	mov	_flash_9_an_1_134,a
                                   6390 ;	888n.c:877: delay(5000);
      0020A5 90 13 88         [24] 6391 	mov	dptr,#0x1388
      0020A8 12 00 90         [24] 6392 	lcall	_delay
      0020AB D0 07            [24] 6393 	pop	ar7
                                   6394 ;	888n.c:866: for (i=0;i<16;i++) {
      0020AD 0F               [12] 6395 	inc	r7
      0020AE C3               [12] 6396 	clr	c
      0020AF EF               [12] 6397 	mov	a,r7
      0020B0 64 80            [12] 6398 	xrl	a,#0x80
      0020B2 94 90            [12] 6399 	subb	a,#0x90
      0020B4 50 03            [24] 6400 	jnc	00319$
      0020B6 02 20 32         [24] 6401 	ljmp	00146$
      0020B9                       6402 00319$:
                                   6403 ;	888n.c:880: for (i=0;i<8;i++) {
      0020B9 7F 00            [12] 6404 	mov	r7,#0x00
      0020BB                       6405 00148$:
                                   6406 ;	888n.c:881: line(i,i,0,0,0,i,0);
      0020BB 8F 26            [24] 6407 	mov	_line_PARM_2,r7
      0020BD 75 27 00         [24] 6408 	mov	_line_PARM_3,#0x00
      0020C0 75 28 00         [24] 6409 	mov	_line_PARM_4,#0x00
      0020C3 75 29 00         [24] 6410 	mov	_line_PARM_5,#0x00
      0020C6 8F 2A            [24] 6411 	mov	_line_PARM_6,r7
      0020C8 75 2B 00         [24] 6412 	mov	_line_PARM_7,#0x00
      0020CB 8F 82            [24] 6413 	mov	dpl,r7
      0020CD C0 07            [24] 6414 	push	ar7
      0020CF 12 03 1D         [24] 6415 	lcall	_line
                                   6416 ;	888n.c:882: delay(5000);
      0020D2 90 13 88         [24] 6417 	mov	dptr,#0x1388
      0020D5 12 00 90         [24] 6418 	lcall	_delay
      0020D8 D0 07            [24] 6419 	pop	ar7
                                   6420 ;	888n.c:880: for (i=0;i<8;i++) {
      0020DA 0F               [12] 6421 	inc	r7
      0020DB C3               [12] 6422 	clr	c
      0020DC EF               [12] 6423 	mov	a,r7
      0020DD 64 80            [12] 6424 	xrl	a,#0x80
      0020DF 94 88            [12] 6425 	subb	a,#0x88
      0020E1 40 D8            [24] 6426 	jc	00148$
                                   6427 ;	888n.c:885: for (i=1;i<7;i++) {
      0020E3 7F 01            [12] 6428 	mov	r7,#0x01
      0020E5                       6429 00150$:
                                   6430 ;	888n.c:886: line(i,i,7,7,7,i,0);
      0020E5 8F 26            [24] 6431 	mov	_line_PARM_2,r7
      0020E7 75 27 07         [24] 6432 	mov	_line_PARM_3,#0x07
      0020EA 75 28 07         [24] 6433 	mov	_line_PARM_4,#0x07
      0020ED 75 29 07         [24] 6434 	mov	_line_PARM_5,#0x07
      0020F0 8F 2A            [24] 6435 	mov	_line_PARM_6,r7
      0020F2 75 2B 00         [24] 6436 	mov	_line_PARM_7,#0x00
      0020F5 8F 82            [24] 6437 	mov	dpl,r7
      0020F7 C0 07            [24] 6438 	push	ar7
      0020F9 12 03 1D         [24] 6439 	lcall	_line
                                   6440 ;	888n.c:887: delay(5000);
      0020FC 90 13 88         [24] 6441 	mov	dptr,#0x1388
      0020FF 12 00 90         [24] 6442 	lcall	_delay
      002102 D0 07            [24] 6443 	pop	ar7
                                   6444 ;	888n.c:885: for (i=1;i<7;i++) {
      002104 0F               [12] 6445 	inc	r7
      002105 C3               [12] 6446 	clr	c
      002106 EF               [12] 6447 	mov	a,r7
      002107 64 80            [12] 6448 	xrl	a,#0x80
      002109 94 87            [12] 6449 	subb	a,#0x87
      00210B 40 D8            [24] 6450 	jc	00150$
                                   6451 ;	888n.c:890: for (i=1;i<8;i++) {
      00210D 7F 01            [12] 6452 	mov	r7,#0x01
      00210F                       6453 00152$:
                                   6454 ;	888n.c:891: clear(0);
      00210F 75 82 00         [24] 6455 	mov	dpl,#0x00
      002112 C0 07            [24] 6456 	push	ar7
      002114 12 01 3A         [24] 6457 	lcall	_clear
      002117 D0 07            [24] 6458 	pop	ar7
                                   6459 ;	888n.c:892: box(7,7,7,7-i,7-i,7-i,0,1);
      002119 74 07            [12] 6460 	mov	a,#0x07
      00211B C3               [12] 6461 	clr	c
      00211C 9F               [12] 6462 	subb	a,r7
      00211D FE               [12] 6463 	mov	r6,a
      00211E 75 2F 07         [24] 6464 	mov	_box_PARM_2,#0x07
      002121 75 30 07         [24] 6465 	mov	_box_PARM_3,#0x07
      002124 8E 31            [24] 6466 	mov	_box_PARM_4,r6
      002126 8E 32            [24] 6467 	mov	_box_PARM_5,r6
      002128 8E 33            [24] 6468 	mov	_box_PARM_6,r6
      00212A 75 34 00         [24] 6469 	mov	_box_PARM_7,#0x00
      00212D 75 35 01         [24] 6470 	mov	_box_PARM_8,#0x01
      002130 75 82 07         [24] 6471 	mov	dpl,#0x07
      002133 C0 07            [24] 6472 	push	ar7
      002135 12 04 C3         [24] 6473 	lcall	_box
                                   6474 ;	888n.c:893: delay(10000);
      002138 90 27 10         [24] 6475 	mov	dptr,#0x2710
      00213B 12 00 90         [24] 6476 	lcall	_delay
      00213E D0 07            [24] 6477 	pop	ar7
                                   6478 ;	888n.c:890: for (i=1;i<8;i++) {
      002140 0F               [12] 6479 	inc	r7
      002141 C3               [12] 6480 	clr	c
      002142 EF               [12] 6481 	mov	a,r7
      002143 64 80            [12] 6482 	xrl	a,#0x80
      002145 94 88            [12] 6483 	subb	a,#0x88
      002147 40 C6            [24] 6484 	jc	00152$
                                   6485 ;	888n.c:896: for (i=1;i<7;i++) {
      002149 7F 01            [12] 6486 	mov	r7,#0x01
      00214B                       6487 00154$:
                                   6488 ;	888n.c:897: clear(0);
      00214B 75 82 00         [24] 6489 	mov	dpl,#0x00
      00214E C0 07            [24] 6490 	push	ar7
      002150 12 01 3A         [24] 6491 	lcall	_clear
      002153 D0 07            [24] 6492 	pop	ar7
                                   6493 ;	888n.c:898: box(0,0,0,7-i,7-i,7-i,0,1);
      002155 74 07            [12] 6494 	mov	a,#0x07
      002157 C3               [12] 6495 	clr	c
      002158 9F               [12] 6496 	subb	a,r7
      002159 FE               [12] 6497 	mov	r6,a
      00215A 75 2F 00         [24] 6498 	mov	_box_PARM_2,#0x00
      00215D 75 30 00         [24] 6499 	mov	_box_PARM_3,#0x00
      002160 8E 31            [24] 6500 	mov	_box_PARM_4,r6
      002162 8E 32            [24] 6501 	mov	_box_PARM_5,r6
      002164 8E 33            [24] 6502 	mov	_box_PARM_6,r6
      002166 75 34 00         [24] 6503 	mov	_box_PARM_7,#0x00
      002169 75 35 01         [24] 6504 	mov	_box_PARM_8,#0x01
      00216C 75 82 00         [24] 6505 	mov	dpl,#0x00
      00216F C0 07            [24] 6506 	push	ar7
      002171 12 04 C3         [24] 6507 	lcall	_box
                                   6508 ;	888n.c:899: delay(10000);
      002174 90 27 10         [24] 6509 	mov	dptr,#0x2710
      002177 12 00 90         [24] 6510 	lcall	_delay
      00217A D0 07            [24] 6511 	pop	ar7
                                   6512 ;	888n.c:896: for (i=1;i<7;i++) {
      00217C 0F               [12] 6513 	inc	r7
      00217D C3               [12] 6514 	clr	c
      00217E EF               [12] 6515 	mov	a,r7
      00217F 64 80            [12] 6516 	xrl	a,#0x80
      002181 94 87            [12] 6517 	subb	a,#0x87
      002183 40 C6            [24] 6518 	jc	00154$
                                   6519 ;	888n.c:902: for (i=1;i<8;i++) {
      002185 7F 01            [12] 6520 	mov	r7,#0x01
      002187                       6521 00156$:
                                   6522 ;	888n.c:903: clear(0);
      002187 75 82 00         [24] 6523 	mov	dpl,#0x00
      00218A C0 07            [24] 6524 	push	ar7
      00218C 12 01 3A         [24] 6525 	lcall	_clear
      00218F D0 07            [24] 6526 	pop	ar7
                                   6527 ;	888n.c:904: box(0,0,0,i,i,i,0,1);
      002191 75 2F 00         [24] 6528 	mov	_box_PARM_2,#0x00
      002194 75 30 00         [24] 6529 	mov	_box_PARM_3,#0x00
      002197 8F 31            [24] 6530 	mov	_box_PARM_4,r7
      002199 8F 32            [24] 6531 	mov	_box_PARM_5,r7
      00219B 8F 33            [24] 6532 	mov	_box_PARM_6,r7
      00219D 75 34 00         [24] 6533 	mov	_box_PARM_7,#0x00
      0021A0 75 35 01         [24] 6534 	mov	_box_PARM_8,#0x01
      0021A3 75 82 00         [24] 6535 	mov	dpl,#0x00
      0021A6 C0 07            [24] 6536 	push	ar7
      0021A8 12 04 C3         [24] 6537 	lcall	_box
                                   6538 ;	888n.c:905: delay(10000);
      0021AB 90 27 10         [24] 6539 	mov	dptr,#0x2710
      0021AE 12 00 90         [24] 6540 	lcall	_delay
      0021B1 D0 07            [24] 6541 	pop	ar7
                                   6542 ;	888n.c:902: for (i=1;i<8;i++) {
      0021B3 0F               [12] 6543 	inc	r7
      0021B4 C3               [12] 6544 	clr	c
      0021B5 EF               [12] 6545 	mov	a,r7
      0021B6 64 80            [12] 6546 	xrl	a,#0x80
      0021B8 94 88            [12] 6547 	subb	a,#0x88
      0021BA 40 CB            [24] 6548 	jc	00156$
                                   6549 ;	888n.c:908: for (i=1;i<7;i++) {
      0021BC 7F 01            [12] 6550 	mov	r7,#0x01
      0021BE                       6551 00158$:
                                   6552 ;	888n.c:909: clear(0);
      0021BE 75 82 00         [24] 6553 	mov	dpl,#0x00
      0021C1 C0 07            [24] 6554 	push	ar7
      0021C3 12 01 3A         [24] 6555 	lcall	_clear
      0021C6 D0 07            [24] 6556 	pop	ar7
                                   6557 ;	888n.c:910: box(7,0,0,i,7-i,7-i,0,1);
      0021C8 74 07            [12] 6558 	mov	a,#0x07
      0021CA C3               [12] 6559 	clr	c
      0021CB 9F               [12] 6560 	subb	a,r7
      0021CC FE               [12] 6561 	mov	r6,a
      0021CD 75 2F 00         [24] 6562 	mov	_box_PARM_2,#0x00
      0021D0 75 30 00         [24] 6563 	mov	_box_PARM_3,#0x00
      0021D3 8F 31            [24] 6564 	mov	_box_PARM_4,r7
      0021D5 8E 32            [24] 6565 	mov	_box_PARM_5,r6
      0021D7 8E 33            [24] 6566 	mov	_box_PARM_6,r6
      0021D9 75 34 00         [24] 6567 	mov	_box_PARM_7,#0x00
      0021DC 75 35 01         [24] 6568 	mov	_box_PARM_8,#0x01
      0021DF 75 82 07         [24] 6569 	mov	dpl,#0x07
      0021E2 C0 07            [24] 6570 	push	ar7
      0021E4 12 04 C3         [24] 6571 	lcall	_box
                                   6572 ;	888n.c:911: delay(10000);
      0021E7 90 27 10         [24] 6573 	mov	dptr,#0x2710
      0021EA 12 00 90         [24] 6574 	lcall	_delay
      0021ED D0 07            [24] 6575 	pop	ar7
                                   6576 ;	888n.c:908: for (i=1;i<7;i++) {
      0021EF 0F               [12] 6577 	inc	r7
      0021F0 C3               [12] 6578 	clr	c
      0021F1 EF               [12] 6579 	mov	a,r7
      0021F2 64 80            [12] 6580 	xrl	a,#0x80
      0021F4 94 87            [12] 6581 	subb	a,#0x87
      0021F6 40 C6            [24] 6582 	jc	00158$
                                   6583 ;	888n.c:914: for (i=1;i<8;i++) {
      0021F8 7F 01            [12] 6584 	mov	r7,#0x01
      0021FA                       6585 00160$:
                                   6586 ;	888n.c:915: box(7,0,0,7-i,i,i,1,1);
      0021FA 74 07            [12] 6587 	mov	a,#0x07
      0021FC C3               [12] 6588 	clr	c
      0021FD 9F               [12] 6589 	subb	a,r7
      0021FE F5 31            [12] 6590 	mov	_box_PARM_4,a
      002200 75 2F 00         [24] 6591 	mov	_box_PARM_2,#0x00
      002203 75 30 00         [24] 6592 	mov	_box_PARM_3,#0x00
      002206 8F 32            [24] 6593 	mov	_box_PARM_5,r7
      002208 8F 33            [24] 6594 	mov	_box_PARM_6,r7
      00220A 75 34 01         [24] 6595 	mov	_box_PARM_7,#0x01
      00220D 75 35 01         [24] 6596 	mov	_box_PARM_8,#0x01
      002210 75 82 07         [24] 6597 	mov	dpl,#0x07
      002213 C0 07            [24] 6598 	push	ar7
      002215 12 04 C3         [24] 6599 	lcall	_box
                                   6600 ;	888n.c:916: delay(10000);
      002218 90 27 10         [24] 6601 	mov	dptr,#0x2710
      00221B 12 00 90         [24] 6602 	lcall	_delay
      00221E D0 07            [24] 6603 	pop	ar7
                                   6604 ;	888n.c:914: for (i=1;i<8;i++) {
      002220 0F               [12] 6605 	inc	r7
      002221 C3               [12] 6606 	clr	c
      002222 EF               [12] 6607 	mov	a,r7
      002223 64 80            [12] 6608 	xrl	a,#0x80
      002225 94 88            [12] 6609 	subb	a,#0x88
      002227 40 D1            [24] 6610 	jc	00160$
                                   6611 ;	888n.c:919: for (i=1;i<7;i++) {
      002229 7F 01            [12] 6612 	mov	r7,#0x01
      00222B                       6613 00162$:
                                   6614 ;	888n.c:920: clear(0);
      00222B 75 82 00         [24] 6615 	mov	dpl,#0x00
      00222E C0 07            [24] 6616 	push	ar7
      002230 12 01 3A         [24] 6617 	lcall	_clear
      002233 D0 07            [24] 6618 	pop	ar7
                                   6619 ;	888n.c:921: box(0,7,7,7-i,i,i,1,1);
      002235 74 07            [12] 6620 	mov	a,#0x07
      002237 C3               [12] 6621 	clr	c
      002238 9F               [12] 6622 	subb	a,r7
      002239 F5 31            [12] 6623 	mov	_box_PARM_4,a
      00223B 75 2F 07         [24] 6624 	mov	_box_PARM_2,#0x07
      00223E 75 30 07         [24] 6625 	mov	_box_PARM_3,#0x07
      002241 8F 32            [24] 6626 	mov	_box_PARM_5,r7
      002243 8F 33            [24] 6627 	mov	_box_PARM_6,r7
      002245 75 34 01         [24] 6628 	mov	_box_PARM_7,#0x01
      002248 75 35 01         [24] 6629 	mov	_box_PARM_8,#0x01
      00224B 75 82 00         [24] 6630 	mov	dpl,#0x00
      00224E C0 07            [24] 6631 	push	ar7
      002250 12 04 C3         [24] 6632 	lcall	_box
                                   6633 ;	888n.c:922: delay(10000);
      002253 90 27 10         [24] 6634 	mov	dptr,#0x2710
      002256 12 00 90         [24] 6635 	lcall	_delay
      002259 D0 07            [24] 6636 	pop	ar7
                                   6637 ;	888n.c:919: for (i=1;i<7;i++) {
      00225B 0F               [12] 6638 	inc	r7
      00225C C3               [12] 6639 	clr	c
      00225D EF               [12] 6640 	mov	a,r7
      00225E 64 80            [12] 6641 	xrl	a,#0x80
      002260 94 87            [12] 6642 	subb	a,#0x87
      002262 40 C7            [24] 6643 	jc	00162$
      002264 22               [24] 6644 	ret
                                   6645 ;------------------------------------------------------------
                                   6646 ;Allocation info for local variables in function 'flash_10'
                                   6647 ;------------------------------------------------------------
                                   6648 ;i                         Allocated with name '_flash_10_i_1_153'
                                   6649 ;j                         Allocated to registers r6 
                                   6650 ;an                        Allocated with name '_flash_10_an_1_153'
                                   6651 ;x                         Allocated to registers r3 
                                   6652 ;y                         Allocated to registers r4 
                                   6653 ;t                         Allocated to registers r5 
                                   6654 ;------------------------------------------------------------
                                   6655 ;	888n.c:926: void flash_10()
                                   6656 ;	-----------------------------------------
                                   6657 ;	 function flash_10
                                   6658 ;	-----------------------------------------
      002265                       6659 _flash_10:
                                   6660 ;	888n.c:930: for (i=1;i<7;i++) {
      002265 7F 01            [12] 6661 	mov	r7,#0x01
      002267                       6662 00116$:
                                   6663 ;	888n.c:931: clear(0);
      002267 75 82 00         [24] 6664 	mov	dpl,#0x00
      00226A C0 07            [24] 6665 	push	ar7
      00226C 12 01 3A         [24] 6666 	lcall	_clear
                                   6667 ;	888n.c:932: box(0,6,6,1,7,7,1,1);
      00226F 75 2F 06         [24] 6668 	mov	_box_PARM_2,#0x06
      002272 75 30 06         [24] 6669 	mov	_box_PARM_3,#0x06
      002275 75 31 01         [24] 6670 	mov	_box_PARM_4,#0x01
      002278 75 32 07         [24] 6671 	mov	_box_PARM_5,#0x07
      00227B 75 33 07         [24] 6672 	mov	_box_PARM_6,#0x07
      00227E 75 34 01         [24] 6673 	mov	_box_PARM_7,#0x01
      002281 75 35 01         [24] 6674 	mov	_box_PARM_8,#0x01
      002284 75 82 00         [24] 6675 	mov	dpl,#0x00
      002287 12 04 C3         [24] 6676 	lcall	_box
      00228A D0 07            [24] 6677 	pop	ar7
                                   6678 ;	888n.c:933: box(i,6,6-i,i+1,7,7-i,1,1);
      00228C 74 06            [12] 6679 	mov	a,#0x06
      00228E C3               [12] 6680 	clr	c
      00228F 9F               [12] 6681 	subb	a,r7
      002290 FE               [12] 6682 	mov	r6,a
      002291 EF               [12] 6683 	mov	a,r7
      002292 04               [12] 6684 	inc	a
      002293 FD               [12] 6685 	mov	r5,a
      002294 74 07            [12] 6686 	mov	a,#0x07
      002296 C3               [12] 6687 	clr	c
      002297 9F               [12] 6688 	subb	a,r7
      002298 FC               [12] 6689 	mov	r4,a
      002299 75 2F 06         [24] 6690 	mov	_box_PARM_2,#0x06
      00229C 8E 30            [24] 6691 	mov	_box_PARM_3,r6
      00229E 8D 31            [24] 6692 	mov	_box_PARM_4,r5
      0022A0 75 32 07         [24] 6693 	mov	_box_PARM_5,#0x07
      0022A3 8C 33            [24] 6694 	mov	_box_PARM_6,r4
      0022A5 75 34 01         [24] 6695 	mov	_box_PARM_7,#0x01
      0022A8 75 35 01         [24] 6696 	mov	_box_PARM_8,#0x01
      0022AB 8F 82            [24] 6697 	mov	dpl,r7
      0022AD C0 07            [24] 6698 	push	ar7
      0022AF C0 06            [24] 6699 	push	ar6
      0022B1 C0 05            [24] 6700 	push	ar5
      0022B3 C0 04            [24] 6701 	push	ar4
      0022B5 12 04 C3         [24] 6702 	lcall	_box
      0022B8 D0 04            [24] 6703 	pop	ar4
      0022BA D0 05            [24] 6704 	pop	ar5
      0022BC D0 06            [24] 6705 	pop	ar6
      0022BE D0 07            [24] 6706 	pop	ar7
                                   6707 ;	888n.c:934: box(i,6,6,i+1,7,7,1,1);
      0022C0 75 2F 06         [24] 6708 	mov	_box_PARM_2,#0x06
      0022C3 75 30 06         [24] 6709 	mov	_box_PARM_3,#0x06
      0022C6 8D 31            [24] 6710 	mov	_box_PARM_4,r5
      0022C8 75 32 07         [24] 6711 	mov	_box_PARM_5,#0x07
      0022CB 75 33 07         [24] 6712 	mov	_box_PARM_6,#0x07
      0022CE 75 34 01         [24] 6713 	mov	_box_PARM_7,#0x01
      0022D1 75 35 01         [24] 6714 	mov	_box_PARM_8,#0x01
      0022D4 8F 82            [24] 6715 	mov	dpl,r7
      0022D6 C0 07            [24] 6716 	push	ar7
      0022D8 C0 06            [24] 6717 	push	ar6
      0022DA C0 05            [24] 6718 	push	ar5
      0022DC C0 04            [24] 6719 	push	ar4
      0022DE 12 04 C3         [24] 6720 	lcall	_box
      0022E1 D0 04            [24] 6721 	pop	ar4
      0022E3 D0 05            [24] 6722 	pop	ar5
      0022E5 D0 06            [24] 6723 	pop	ar6
                                   6724 ;	888n.c:935: box(0,6,6-i,1,7,7-i,1,1);
      0022E7 75 2F 06         [24] 6725 	mov	_box_PARM_2,#0x06
      0022EA 8E 30            [24] 6726 	mov	_box_PARM_3,r6
      0022EC 75 31 01         [24] 6727 	mov	_box_PARM_4,#0x01
      0022EF 75 32 07         [24] 6728 	mov	_box_PARM_5,#0x07
      0022F2 8C 33            [24] 6729 	mov	_box_PARM_6,r4
      0022F4 75 34 01         [24] 6730 	mov	_box_PARM_7,#0x01
      0022F7 75 35 01         [24] 6731 	mov	_box_PARM_8,#0x01
      0022FA 75 82 00         [24] 6732 	mov	dpl,#0x00
      0022FD C0 06            [24] 6733 	push	ar6
      0022FF C0 05            [24] 6734 	push	ar5
      002301 C0 04            [24] 6735 	push	ar4
      002303 12 04 C3         [24] 6736 	lcall	_box
      002306 D0 04            [24] 6737 	pop	ar4
      002308 D0 05            [24] 6738 	pop	ar5
      00230A D0 06            [24] 6739 	pop	ar6
                                   6740 ;	888n.c:936: box(0,6-i,6,1,7-i,7,1,1);
      00230C 8E 2F            [24] 6741 	mov	_box_PARM_2,r6
      00230E 75 30 06         [24] 6742 	mov	_box_PARM_3,#0x06
      002311 75 31 01         [24] 6743 	mov	_box_PARM_4,#0x01
      002314 8C 32            [24] 6744 	mov	_box_PARM_5,r4
      002316 75 33 07         [24] 6745 	mov	_box_PARM_6,#0x07
      002319 75 34 01         [24] 6746 	mov	_box_PARM_7,#0x01
      00231C 75 35 01         [24] 6747 	mov	_box_PARM_8,#0x01
      00231F 75 82 00         [24] 6748 	mov	dpl,#0x00
      002322 C0 06            [24] 6749 	push	ar6
      002324 C0 05            [24] 6750 	push	ar5
      002326 C0 04            [24] 6751 	push	ar4
      002328 12 04 C3         [24] 6752 	lcall	_box
      00232B D0 04            [24] 6753 	pop	ar4
      00232D D0 05            [24] 6754 	pop	ar5
      00232F D0 06            [24] 6755 	pop	ar6
      002331 D0 07            [24] 6756 	pop	ar7
                                   6757 ;	888n.c:937: box(i,6-i,6-i,i+1,7-i,7-i,1,1);
      002333 8E 2F            [24] 6758 	mov	_box_PARM_2,r6
      002335 8E 30            [24] 6759 	mov	_box_PARM_3,r6
      002337 8D 31            [24] 6760 	mov	_box_PARM_4,r5
      002339 8C 32            [24] 6761 	mov	_box_PARM_5,r4
      00233B 8C 33            [24] 6762 	mov	_box_PARM_6,r4
      00233D 75 34 01         [24] 6763 	mov	_box_PARM_7,#0x01
      002340 75 35 01         [24] 6764 	mov	_box_PARM_8,#0x01
      002343 8F 82            [24] 6765 	mov	dpl,r7
      002345 C0 07            [24] 6766 	push	ar7
      002347 C0 06            [24] 6767 	push	ar6
      002349 C0 05            [24] 6768 	push	ar5
      00234B C0 04            [24] 6769 	push	ar4
      00234D 12 04 C3         [24] 6770 	lcall	_box
      002350 D0 04            [24] 6771 	pop	ar4
      002352 D0 05            [24] 6772 	pop	ar5
      002354 D0 06            [24] 6773 	pop	ar6
      002356 D0 07            [24] 6774 	pop	ar7
                                   6775 ;	888n.c:938: box(i,6-i,6,i+1,7-i,7,1,1);
      002358 8E 2F            [24] 6776 	mov	_box_PARM_2,r6
      00235A 75 30 06         [24] 6777 	mov	_box_PARM_3,#0x06
      00235D 8D 31            [24] 6778 	mov	_box_PARM_4,r5
      00235F 8C 32            [24] 6779 	mov	_box_PARM_5,r4
      002361 75 33 07         [24] 6780 	mov	_box_PARM_6,#0x07
      002364 75 34 01         [24] 6781 	mov	_box_PARM_7,#0x01
      002367 75 35 01         [24] 6782 	mov	_box_PARM_8,#0x01
      00236A 8F 82            [24] 6783 	mov	dpl,r7
      00236C C0 06            [24] 6784 	push	ar6
      00236E C0 05            [24] 6785 	push	ar5
      002370 C0 04            [24] 6786 	push	ar4
      002372 12 04 C3         [24] 6787 	lcall	_box
      002375 D0 04            [24] 6788 	pop	ar4
      002377 D0 05            [24] 6789 	pop	ar5
      002379 D0 06            [24] 6790 	pop	ar6
                                   6791 ;	888n.c:939: box(0,6-i,6-i,1,7-i,7-i,1,1);
      00237B 8E 2F            [24] 6792 	mov	_box_PARM_2,r6
      00237D 8E 30            [24] 6793 	mov	_box_PARM_3,r6
      00237F 75 31 01         [24] 6794 	mov	_box_PARM_4,#0x01
      002382 8C 32            [24] 6795 	mov	_box_PARM_5,r4
      002384 8C 33            [24] 6796 	mov	_box_PARM_6,r4
      002386 75 34 01         [24] 6797 	mov	_box_PARM_7,#0x01
      002389 75 35 01         [24] 6798 	mov	_box_PARM_8,#0x01
      00238C 75 82 00         [24] 6799 	mov	dpl,#0x00
      00238F C0 05            [24] 6800 	push	ar5
      002391 12 04 C3         [24] 6801 	lcall	_box
                                   6802 ;	888n.c:940: delay(30000);
      002394 90 75 30         [24] 6803 	mov	dptr,#0x7530
      002397 12 00 90         [24] 6804 	lcall	_delay
      00239A D0 05            [24] 6805 	pop	ar5
                                   6806 ;	888n.c:930: for (i=1;i<7;i++) {
      00239C 8D 07            [24] 6807 	mov	ar7,r5
      00239E BF 07 00         [24] 6808 	cjne	r7,#0x07,00252$
      0023A1                       6809 00252$:
      0023A1 50 03            [24] 6810 	jnc	00253$
      0023A3 02 22 67         [24] 6811 	ljmp	00116$
      0023A6                       6812 00253$:
                                   6813 ;	888n.c:943: for (i=0;i<4;i++) an[i]=6*i;
      0023A6 7F 00            [12] 6814 	mov	r7,#0x00
      0023A8                       6815 00118$:
      0023A8 EF               [12] 6816 	mov	a,r7
      0023A9 24 75            [12] 6817 	add	a,#_flash_10_an_1_153
      0023AB F9               [12] 6818 	mov	r1,a
      0023AC EF               [12] 6819 	mov	a,r7
      0023AD 75 F0 06         [24] 6820 	mov	b,#0x06
      0023B0 A4               [48] 6821 	mul	ab
      0023B1 F7               [12] 6822 	mov	@r1,a
      0023B2 0F               [12] 6823 	inc	r7
      0023B3 BF 04 00         [24] 6824 	cjne	r7,#0x04,00254$
      0023B6                       6825 00254$:
      0023B6 40 F0            [24] 6826 	jc	00118$
                                   6827 ;	888n.c:945: for (i=0;i<35;i++) {
      0023B8 75 74 00         [24] 6828 	mov	_flash_10_i_1_153,#0x00
      0023BB                       6829 00124$:
                                   6830 ;	888n.c:946: clear(0);
      0023BB 75 82 00         [24] 6831 	mov	dpl,#0x00
      0023BE 12 01 3A         [24] 6832 	lcall	_clear
                                   6833 ;	888n.c:947: for(j=0;j<4;j++) {
      0023C1 7E 00            [12] 6834 	mov	r6,#0x00
      0023C3                       6835 00120$:
                                   6836 ;	888n.c:948: t=an[j]%24;
      0023C3 EE               [12] 6837 	mov	a,r6
      0023C4 24 75            [12] 6838 	add	a,#_flash_10_an_1_153
      0023C6 F9               [12] 6839 	mov	r1,a
      0023C7 87 05            [24] 6840 	mov	ar5,@r1
      0023C9 75 F0 18         [24] 6841 	mov	b,#0x18
      0023CC ED               [12] 6842 	mov	a,r5
      0023CD 84               [48] 6843 	div	ab
                                   6844 ;	888n.c:949: x=dat3[t]>>4;
      0023CE E5 F0            [12] 6845 	mov	a,b
      0023D0 90 2B 63         [24] 6846 	mov	dptr,#_dat3
      0023D3 93               [24] 6847 	movc	a,@a+dptr
      0023D4 FC               [12] 6848 	mov	r4,a
      0023D5 C4               [12] 6849 	swap	a
      0023D6 54 0F            [12] 6850 	anl	a,#0x0f
      0023D8 FB               [12] 6851 	mov	r3,a
                                   6852 ;	888n.c:950: y=dat3[t]&0x0f;
      0023D9 53 04 0F         [24] 6853 	anl	ar4,#0x0f
                                   6854 ;	888n.c:951: box(x,y,0,x+1,y+1,1,1,1);
      0023DC EB               [12] 6855 	mov	a,r3
      0023DD 04               [12] 6856 	inc	a
      0023DE FA               [12] 6857 	mov	r2,a
      0023DF EC               [12] 6858 	mov	a,r4
      0023E0 04               [12] 6859 	inc	a
      0023E1 FF               [12] 6860 	mov	r7,a
      0023E2 8C 2F            [24] 6861 	mov	_box_PARM_2,r4
      0023E4 75 30 00         [24] 6862 	mov	_box_PARM_3,#0x00
      0023E7 8A 31            [24] 6863 	mov	_box_PARM_4,r2
      0023E9 8F 32            [24] 6864 	mov	_box_PARM_5,r7
      0023EB 75 33 01         [24] 6865 	mov	_box_PARM_6,#0x01
      0023EE 75 34 01         [24] 6866 	mov	_box_PARM_7,#0x01
      0023F1 75 35 01         [24] 6867 	mov	_box_PARM_8,#0x01
      0023F4 8B 82            [24] 6868 	mov	dpl,r3
      0023F6 C0 07            [24] 6869 	push	ar7
      0023F8 C0 06            [24] 6870 	push	ar6
      0023FA C0 04            [24] 6871 	push	ar4
      0023FC C0 03            [24] 6872 	push	ar3
      0023FE C0 02            [24] 6873 	push	ar2
      002400 12 04 C3         [24] 6874 	lcall	_box
      002403 D0 02            [24] 6875 	pop	ar2
      002405 D0 03            [24] 6876 	pop	ar3
      002407 D0 04            [24] 6877 	pop	ar4
      002409 D0 06            [24] 6878 	pop	ar6
      00240B D0 07            [24] 6879 	pop	ar7
                                   6880 ;	888n.c:952: box(x,y,6,x+1,y+1,7,1,1);
      00240D 8C 2F            [24] 6881 	mov	_box_PARM_2,r4
      00240F 75 30 06         [24] 6882 	mov	_box_PARM_3,#0x06
      002412 8A 31            [24] 6883 	mov	_box_PARM_4,r2
      002414 8F 32            [24] 6884 	mov	_box_PARM_5,r7
      002416 75 33 07         [24] 6885 	mov	_box_PARM_6,#0x07
      002419 75 34 01         [24] 6886 	mov	_box_PARM_7,#0x01
      00241C 75 35 01         [24] 6887 	mov	_box_PARM_8,#0x01
      00241F 8B 82            [24] 6888 	mov	dpl,r3
      002421 C0 06            [24] 6889 	push	ar6
      002423 12 04 C3         [24] 6890 	lcall	_box
      002426 D0 06            [24] 6891 	pop	ar6
                                   6892 ;	888n.c:947: for(j=0;j<4;j++) {
      002428 0E               [12] 6893 	inc	r6
      002429 BE 04 00         [24] 6894 	cjne	r6,#0x04,00256$
      00242C                       6895 00256$:
      00242C 40 95            [24] 6896 	jc	00120$
                                   6897 ;	888n.c:954: for (j=0;j<4;j++) an[j]++; 
      00242E 7F 00            [12] 6898 	mov	r7,#0x00
      002430                       6899 00122$:
      002430 EF               [12] 6900 	mov	a,r7
      002431 24 75            [12] 6901 	add	a,#_flash_10_an_1_153
      002433 F9               [12] 6902 	mov	r1,a
      002434 E7               [12] 6903 	mov	a,@r1
      002435 FE               [12] 6904 	mov	r6,a
      002436 04               [12] 6905 	inc	a
      002437 F7               [12] 6906 	mov	@r1,a
      002438 0F               [12] 6907 	inc	r7
      002439 BF 04 00         [24] 6908 	cjne	r7,#0x04,00258$
      00243C                       6909 00258$:
      00243C 40 F2            [24] 6910 	jc	00122$
                                   6911 ;	888n.c:955: delay(10000);
      00243E 90 27 10         [24] 6912 	mov	dptr,#0x2710
      002441 12 00 90         [24] 6913 	lcall	_delay
                                   6914 ;	888n.c:945: for (i=0;i<35;i++) {
      002444 05 74            [12] 6915 	inc	_flash_10_i_1_153
      002446 74 DD            [12] 6916 	mov	a,#0x100 - 0x23
      002448 25 74            [12] 6917 	add	a,_flash_10_i_1_153
      00244A 40 03            [24] 6918 	jc	00260$
      00244C 02 23 BB         [24] 6919 	ljmp	00124$
      00244F                       6920 00260$:
                                   6921 ;	888n.c:958: for (i=0;i<35;i++) {
      00244F 75 74 00         [24] 6922 	mov	_flash_10_i_1_153,#0x00
      002452                       6923 00130$:
                                   6924 ;	888n.c:959: clear(0);
      002452 75 82 00         [24] 6925 	mov	dpl,#0x00
      002455 12 01 3A         [24] 6926 	lcall	_clear
                                   6927 ;	888n.c:960: for(j=0;j<4;j++) {
      002458 7E 00            [12] 6928 	mov	r6,#0x00
      00245A                       6929 00126$:
                                   6930 ;	888n.c:961: t=an[j]%24;
      00245A EE               [12] 6931 	mov	a,r6
      00245B 24 75            [12] 6932 	add	a,#_flash_10_an_1_153
      00245D F9               [12] 6933 	mov	r1,a
      00245E 87 02            [24] 6934 	mov	ar2,@r1
      002460 75 F0 18         [24] 6935 	mov	b,#0x18
      002463 EA               [12] 6936 	mov	a,r2
      002464 84               [48] 6937 	div	ab
                                   6938 ;	888n.c:962: x=dat3[t]>>4;
      002465 E5 F0            [12] 6939 	mov	a,b
      002467 90 2B 63         [24] 6940 	mov	dptr,#_dat3
      00246A 93               [24] 6941 	movc	a,@a+dptr
      00246B FA               [12] 6942 	mov	r2,a
      00246C C4               [12] 6943 	swap	a
      00246D 54 0F            [12] 6944 	anl	a,#0x0f
      00246F FB               [12] 6945 	mov	r3,a
                                   6946 ;	888n.c:963: y=dat3[t]&0x0f;
      002470 74 0F            [12] 6947 	mov	a,#0x0f
      002472 5A               [12] 6948 	anl	a,r2
      002473 FC               [12] 6949 	mov	r4,a
                                   6950 ;	888n.c:964: box(x,y,0,x+1,y+1,1,1,1);
      002474 EB               [12] 6951 	mov	a,r3
      002475 04               [12] 6952 	inc	a
      002476 FA               [12] 6953 	mov	r2,a
      002477 EC               [12] 6954 	mov	a,r4
      002478 04               [12] 6955 	inc	a
      002479 FF               [12] 6956 	mov	r7,a
      00247A 8C 2F            [24] 6957 	mov	_box_PARM_2,r4
      00247C 75 30 00         [24] 6958 	mov	_box_PARM_3,#0x00
      00247F 8A 31            [24] 6959 	mov	_box_PARM_4,r2
      002481 8F 32            [24] 6960 	mov	_box_PARM_5,r7
      002483 75 33 01         [24] 6961 	mov	_box_PARM_6,#0x01
      002486 75 34 01         [24] 6962 	mov	_box_PARM_7,#0x01
      002489 75 35 01         [24] 6963 	mov	_box_PARM_8,#0x01
      00248C 8B 82            [24] 6964 	mov	dpl,r3
      00248E C0 07            [24] 6965 	push	ar7
      002490 C0 06            [24] 6966 	push	ar6
      002492 C0 04            [24] 6967 	push	ar4
      002494 C0 03            [24] 6968 	push	ar3
      002496 C0 02            [24] 6969 	push	ar2
      002498 12 04 C3         [24] 6970 	lcall	_box
      00249B D0 02            [24] 6971 	pop	ar2
      00249D D0 03            [24] 6972 	pop	ar3
      00249F D0 04            [24] 6973 	pop	ar4
      0024A1 D0 06            [24] 6974 	pop	ar6
      0024A3 D0 07            [24] 6975 	pop	ar7
                                   6976 ;	888n.c:965: box(x,y,6,x+1,y+1,7,1,1);
      0024A5 8C 2F            [24] 6977 	mov	_box_PARM_2,r4
      0024A7 75 30 06         [24] 6978 	mov	_box_PARM_3,#0x06
      0024AA 8A 31            [24] 6979 	mov	_box_PARM_4,r2
      0024AC 8F 32            [24] 6980 	mov	_box_PARM_5,r7
      0024AE 75 33 07         [24] 6981 	mov	_box_PARM_6,#0x07
      0024B1 75 34 01         [24] 6982 	mov	_box_PARM_7,#0x01
      0024B4 75 35 01         [24] 6983 	mov	_box_PARM_8,#0x01
      0024B7 8B 82            [24] 6984 	mov	dpl,r3
      0024B9 C0 06            [24] 6985 	push	ar6
      0024BB 12 04 C3         [24] 6986 	lcall	_box
      0024BE D0 06            [24] 6987 	pop	ar6
                                   6988 ;	888n.c:960: for(j=0;j<4;j++) {
      0024C0 0E               [12] 6989 	inc	r6
      0024C1 BE 04 00         [24] 6990 	cjne	r6,#0x04,00261$
      0024C4                       6991 00261$:
      0024C4 40 94            [24] 6992 	jc	00126$
                                   6993 ;	888n.c:968: for (j=0;j<4;j++) an[j]--; 
      0024C6 7F 00            [12] 6994 	mov	r7,#0x00
      0024C8                       6995 00128$:
      0024C8 EF               [12] 6996 	mov	a,r7
      0024C9 24 75            [12] 6997 	add	a,#_flash_10_an_1_153
      0024CB F9               [12] 6998 	mov	r1,a
      0024CC E7               [12] 6999 	mov	a,@r1
      0024CD FE               [12] 7000 	mov	r6,a
      0024CE 14               [12] 7001 	dec	a
      0024CF F7               [12] 7002 	mov	@r1,a
      0024D0 0F               [12] 7003 	inc	r7
      0024D1 BF 04 00         [24] 7004 	cjne	r7,#0x04,00263$
      0024D4                       7005 00263$:
      0024D4 40 F2            [24] 7006 	jc	00128$
                                   7007 ;	888n.c:969: delay(10000);
      0024D6 90 27 10         [24] 7008 	mov	dptr,#0x2710
      0024D9 12 00 90         [24] 7009 	lcall	_delay
                                   7010 ;	888n.c:958: for (i=0;i<35;i++) {
      0024DC 05 74            [12] 7011 	inc	_flash_10_i_1_153
      0024DE 74 DD            [12] 7012 	mov	a,#0x100 - 0x23
      0024E0 25 74            [12] 7013 	add	a,_flash_10_i_1_153
      0024E2 40 03            [24] 7014 	jc	00265$
      0024E4 02 24 52         [24] 7015 	ljmp	00130$
      0024E7                       7016 00265$:
                                   7017 ;	888n.c:972: for (i=0;i<35;i++)
      0024E7 75 74 00         [24] 7018 	mov	_flash_10_i_1_153,#0x00
      0024EA                       7019 00136$:
                                   7020 ;	888n.c:974: clear(0);
      0024EA 75 82 00         [24] 7021 	mov	dpl,#0x00
      0024ED 12 01 3A         [24] 7022 	lcall	_clear
                                   7023 ;	888n.c:975: for(j=0;j<4;j++) {
      0024F0 7E 00            [12] 7024 	mov	r6,#0x00
      0024F2                       7025 00132$:
                                   7026 ;	888n.c:976: t=an[j]%24;
      0024F2 EE               [12] 7027 	mov	a,r6
      0024F3 24 75            [12] 7028 	add	a,#_flash_10_an_1_153
      0024F5 F9               [12] 7029 	mov	r1,a
      0024F6 87 02            [24] 7030 	mov	ar2,@r1
      0024F8 75 F0 18         [24] 7031 	mov	b,#0x18
      0024FB EA               [12] 7032 	mov	a,r2
      0024FC 84               [48] 7033 	div	ab
                                   7034 ;	888n.c:977: x=dat3[t]>>4;
      0024FD E5 F0            [12] 7035 	mov	a,b
      0024FF 90 2B 63         [24] 7036 	mov	dptr,#_dat3
      002502 93               [24] 7037 	movc	a,@a+dptr
      002503 FA               [12] 7038 	mov	r2,a
      002504 C4               [12] 7039 	swap	a
      002505 54 0F            [12] 7040 	anl	a,#0x0f
      002507 FB               [12] 7041 	mov	r3,a
                                   7042 ;	888n.c:978: y=dat3[t]&0x0f;
      002508 74 0F            [12] 7043 	mov	a,#0x0f
      00250A 5A               [12] 7044 	anl	a,r2
      00250B FC               [12] 7045 	mov	r4,a
                                   7046 ;	888n.c:979: box(x,0,y,x+1,1,y+1,1,1);
      00250C EB               [12] 7047 	mov	a,r3
      00250D 04               [12] 7048 	inc	a
      00250E FA               [12] 7049 	mov	r2,a
      00250F EC               [12] 7050 	mov	a,r4
      002510 04               [12] 7051 	inc	a
      002511 FF               [12] 7052 	mov	r7,a
      002512 75 2F 00         [24] 7053 	mov	_box_PARM_2,#0x00
      002515 8C 30            [24] 7054 	mov	_box_PARM_3,r4
      002517 8A 31            [24] 7055 	mov	_box_PARM_4,r2
      002519 75 32 01         [24] 7056 	mov	_box_PARM_5,#0x01
      00251C 8F 33            [24] 7057 	mov	_box_PARM_6,r7
      00251E 75 34 01         [24] 7058 	mov	_box_PARM_7,#0x01
      002521 75 35 01         [24] 7059 	mov	_box_PARM_8,#0x01
      002524 8B 82            [24] 7060 	mov	dpl,r3
      002526 C0 07            [24] 7061 	push	ar7
      002528 C0 06            [24] 7062 	push	ar6
      00252A C0 04            [24] 7063 	push	ar4
      00252C C0 03            [24] 7064 	push	ar3
      00252E C0 02            [24] 7065 	push	ar2
      002530 12 04 C3         [24] 7066 	lcall	_box
      002533 D0 02            [24] 7067 	pop	ar2
      002535 D0 03            [24] 7068 	pop	ar3
      002537 D0 04            [24] 7069 	pop	ar4
      002539 D0 06            [24] 7070 	pop	ar6
      00253B D0 07            [24] 7071 	pop	ar7
                                   7072 ;	888n.c:980: box(x,6,y,x+1,7,y+1,1,1);
      00253D 75 2F 06         [24] 7073 	mov	_box_PARM_2,#0x06
      002540 8C 30            [24] 7074 	mov	_box_PARM_3,r4
      002542 8A 31            [24] 7075 	mov	_box_PARM_4,r2
      002544 75 32 07         [24] 7076 	mov	_box_PARM_5,#0x07
      002547 8F 33            [24] 7077 	mov	_box_PARM_6,r7
      002549 75 34 01         [24] 7078 	mov	_box_PARM_7,#0x01
      00254C 75 35 01         [24] 7079 	mov	_box_PARM_8,#0x01
      00254F 8B 82            [24] 7080 	mov	dpl,r3
      002551 C0 06            [24] 7081 	push	ar6
      002553 12 04 C3         [24] 7082 	lcall	_box
      002556 D0 06            [24] 7083 	pop	ar6
                                   7084 ;	888n.c:975: for(j=0;j<4;j++) {
      002558 0E               [12] 7085 	inc	r6
      002559 BE 04 00         [24] 7086 	cjne	r6,#0x04,00266$
      00255C                       7087 00266$:
      00255C 40 94            [24] 7088 	jc	00132$
                                   7089 ;	888n.c:982: for (j=0;j<4;j++) an[j]++; 
      00255E 7F 00            [12] 7090 	mov	r7,#0x00
      002560                       7091 00134$:
      002560 EF               [12] 7092 	mov	a,r7
      002561 24 75            [12] 7093 	add	a,#_flash_10_an_1_153
      002563 F9               [12] 7094 	mov	r1,a
      002564 E7               [12] 7095 	mov	a,@r1
      002565 FE               [12] 7096 	mov	r6,a
      002566 04               [12] 7097 	inc	a
      002567 F7               [12] 7098 	mov	@r1,a
      002568 0F               [12] 7099 	inc	r7
      002569 BF 04 00         [24] 7100 	cjne	r7,#0x04,00268$
      00256C                       7101 00268$:
      00256C 40 F2            [24] 7102 	jc	00134$
                                   7103 ;	888n.c:983: delay(10000);
      00256E 90 27 10         [24] 7104 	mov	dptr,#0x2710
      002571 12 00 90         [24] 7105 	lcall	_delay
                                   7106 ;	888n.c:972: for (i=0;i<35;i++)
      002574 05 74            [12] 7107 	inc	_flash_10_i_1_153
      002576 74 DD            [12] 7108 	mov	a,#0x100 - 0x23
      002578 25 74            [12] 7109 	add	a,_flash_10_i_1_153
      00257A 40 03            [24] 7110 	jc	00270$
      00257C 02 24 EA         [24] 7111 	ljmp	00136$
      00257F                       7112 00270$:
                                   7113 ;	888n.c:986: for (i=0;i<36;i++) {
      00257F 7F 00            [12] 7114 	mov	r7,#0x00
      002581                       7115 00142$:
                                   7116 ;	888n.c:987: clear(0);
      002581 75 82 00         [24] 7117 	mov	dpl,#0x00
      002584 C0 07            [24] 7118 	push	ar7
      002586 12 01 3A         [24] 7119 	lcall	_clear
      002589 D0 07            [24] 7120 	pop	ar7
                                   7121 ;	888n.c:988: for(j=0;j<4;j++) {
      00258B 7E 00            [12] 7122 	mov	r6,#0x00
      00258D                       7123 00138$:
                                   7124 ;	888n.c:989: t=an[j]%24;
      00258D EE               [12] 7125 	mov	a,r6
      00258E 24 75            [12] 7126 	add	a,#_flash_10_an_1_153
      002590 F9               [12] 7127 	mov	r1,a
      002591 87 02            [24] 7128 	mov	ar2,@r1
      002593 75 F0 18         [24] 7129 	mov	b,#0x18
      002596 EA               [12] 7130 	mov	a,r2
      002597 84               [48] 7131 	div	ab
                                   7132 ;	888n.c:990: x=dat3[t]>>4;
      002598 E5 F0            [12] 7133 	mov	a,b
      00259A 90 2B 63         [24] 7134 	mov	dptr,#_dat3
      00259D 93               [24] 7135 	movc	a,@a+dptr
      00259E FD               [12] 7136 	mov	r5,a
      00259F C4               [12] 7137 	swap	a
      0025A0 54 0F            [12] 7138 	anl	a,#0x0f
      0025A2 FB               [12] 7139 	mov	r3,a
                                   7140 ;	888n.c:991: y=dat3[t]&0x0f;
      0025A3 74 0F            [12] 7141 	mov	a,#0x0f
      0025A5 5D               [12] 7142 	anl	a,r5
      0025A6 FC               [12] 7143 	mov	r4,a
                                   7144 ;	888n.c:992: box(x,0,y,x+1,1,y+1,1,1);
      0025A7 EB               [12] 7145 	mov	a,r3
      0025A8 04               [12] 7146 	inc	a
      0025A9 FD               [12] 7147 	mov	r5,a
      0025AA EC               [12] 7148 	mov	a,r4
      0025AB 04               [12] 7149 	inc	a
      0025AC FA               [12] 7150 	mov	r2,a
      0025AD 75 2F 00         [24] 7151 	mov	_box_PARM_2,#0x00
      0025B0 8C 30            [24] 7152 	mov	_box_PARM_3,r4
      0025B2 8D 31            [24] 7153 	mov	_box_PARM_4,r5
      0025B4 75 32 01         [24] 7154 	mov	_box_PARM_5,#0x01
      0025B7 8A 33            [24] 7155 	mov	_box_PARM_6,r2
      0025B9 75 34 01         [24] 7156 	mov	_box_PARM_7,#0x01
      0025BC 75 35 01         [24] 7157 	mov	_box_PARM_8,#0x01
      0025BF 8B 82            [24] 7158 	mov	dpl,r3
      0025C1 C0 07            [24] 7159 	push	ar7
      0025C3 C0 06            [24] 7160 	push	ar6
      0025C5 C0 05            [24] 7161 	push	ar5
      0025C7 C0 04            [24] 7162 	push	ar4
      0025C9 C0 03            [24] 7163 	push	ar3
      0025CB C0 02            [24] 7164 	push	ar2
      0025CD 12 04 C3         [24] 7165 	lcall	_box
      0025D0 D0 02            [24] 7166 	pop	ar2
      0025D2 D0 03            [24] 7167 	pop	ar3
      0025D4 D0 04            [24] 7168 	pop	ar4
      0025D6 D0 05            [24] 7169 	pop	ar5
                                   7170 ;	888n.c:993: box(x,6,y,x+1,7,y+1,1,1);
      0025D8 75 2F 06         [24] 7171 	mov	_box_PARM_2,#0x06
      0025DB 8C 30            [24] 7172 	mov	_box_PARM_3,r4
      0025DD 8D 31            [24] 7173 	mov	_box_PARM_4,r5
      0025DF 75 32 07         [24] 7174 	mov	_box_PARM_5,#0x07
      0025E2 8A 33            [24] 7175 	mov	_box_PARM_6,r2
      0025E4 75 34 01         [24] 7176 	mov	_box_PARM_7,#0x01
      0025E7 75 35 01         [24] 7177 	mov	_box_PARM_8,#0x01
      0025EA 8B 82            [24] 7178 	mov	dpl,r3
      0025EC 12 04 C3         [24] 7179 	lcall	_box
      0025EF D0 06            [24] 7180 	pop	ar6
      0025F1 D0 07            [24] 7181 	pop	ar7
                                   7182 ;	888n.c:988: for(j=0;j<4;j++) {
      0025F3 0E               [12] 7183 	inc	r6
      0025F4 BE 04 00         [24] 7184 	cjne	r6,#0x04,00271$
      0025F7                       7185 00271$:
      0025F7 40 94            [24] 7186 	jc	00138$
                                   7187 ;	888n.c:995: for (j=0;j<4;j++) an[j]--; 
      0025F9 7E 00            [12] 7188 	mov	r6,#0x00
      0025FB                       7189 00140$:
      0025FB EE               [12] 7190 	mov	a,r6
      0025FC 24 75            [12] 7191 	add	a,#_flash_10_an_1_153
      0025FE F9               [12] 7192 	mov	r1,a
      0025FF E7               [12] 7193 	mov	a,@r1
      002600 FD               [12] 7194 	mov	r5,a
      002601 14               [12] 7195 	dec	a
      002602 F7               [12] 7196 	mov	@r1,a
      002603 0E               [12] 7197 	inc	r6
      002604 BE 04 00         [24] 7198 	cjne	r6,#0x04,00273$
      002607                       7199 00273$:
      002607 40 F2            [24] 7200 	jc	00140$
                                   7201 ;	888n.c:996: delay(10000);
      002609 90 27 10         [24] 7202 	mov	dptr,#0x2710
      00260C C0 07            [24] 7203 	push	ar7
      00260E 12 00 90         [24] 7204 	lcall	_delay
      002611 D0 07            [24] 7205 	pop	ar7
                                   7206 ;	888n.c:986: for (i=0;i<36;i++) {
      002613 0F               [12] 7207 	inc	r7
      002614 BF 24 00         [24] 7208 	cjne	r7,#0x24,00275$
      002617                       7209 00275$:
      002617 50 03            [24] 7210 	jnc	00276$
      002619 02 25 81         [24] 7211 	ljmp	00142$
      00261C                       7212 00276$:
                                   7213 ;	888n.c:999: for (i=6;i>0;i--) {
      00261C 7F 06            [12] 7214 	mov	r7,#0x06
      00261E                       7215 00144$:
                                   7216 ;	888n.c:1000: clear(0);
      00261E 75 82 00         [24] 7217 	mov	dpl,#0x00
      002621 C0 07            [24] 7218 	push	ar7
      002623 12 01 3A         [24] 7219 	lcall	_clear
                                   7220 ;	888n.c:1001: box(0,6,6,1,7,7,1,1);
      002626 75 2F 06         [24] 7221 	mov	_box_PARM_2,#0x06
      002629 75 30 06         [24] 7222 	mov	_box_PARM_3,#0x06
      00262C 75 31 01         [24] 7223 	mov	_box_PARM_4,#0x01
      00262F 75 32 07         [24] 7224 	mov	_box_PARM_5,#0x07
      002632 75 33 07         [24] 7225 	mov	_box_PARM_6,#0x07
      002635 75 34 01         [24] 7226 	mov	_box_PARM_7,#0x01
      002638 75 35 01         [24] 7227 	mov	_box_PARM_8,#0x01
      00263B 75 82 00         [24] 7228 	mov	dpl,#0x00
      00263E 12 04 C3         [24] 7229 	lcall	_box
      002641 D0 07            [24] 7230 	pop	ar7
                                   7231 ;	888n.c:1002: box(i,6,6-i,i+1,7,7-i,1,1);
      002643 74 06            [12] 7232 	mov	a,#0x06
      002645 C3               [12] 7233 	clr	c
      002646 9F               [12] 7234 	subb	a,r7
      002647 FE               [12] 7235 	mov	r6,a
      002648 EF               [12] 7236 	mov	a,r7
      002649 04               [12] 7237 	inc	a
      00264A FD               [12] 7238 	mov	r5,a
      00264B 74 07            [12] 7239 	mov	a,#0x07
      00264D C3               [12] 7240 	clr	c
      00264E 9F               [12] 7241 	subb	a,r7
      00264F FC               [12] 7242 	mov	r4,a
      002650 75 2F 06         [24] 7243 	mov	_box_PARM_2,#0x06
      002653 8E 30            [24] 7244 	mov	_box_PARM_3,r6
      002655 8D 31            [24] 7245 	mov	_box_PARM_4,r5
      002657 75 32 07         [24] 7246 	mov	_box_PARM_5,#0x07
      00265A 8C 33            [24] 7247 	mov	_box_PARM_6,r4
      00265C 75 34 01         [24] 7248 	mov	_box_PARM_7,#0x01
      00265F 75 35 01         [24] 7249 	mov	_box_PARM_8,#0x01
      002662 8F 82            [24] 7250 	mov	dpl,r7
      002664 C0 07            [24] 7251 	push	ar7
      002666 C0 06            [24] 7252 	push	ar6
      002668 C0 05            [24] 7253 	push	ar5
      00266A C0 04            [24] 7254 	push	ar4
      00266C 12 04 C3         [24] 7255 	lcall	_box
      00266F D0 04            [24] 7256 	pop	ar4
      002671 D0 05            [24] 7257 	pop	ar5
      002673 D0 06            [24] 7258 	pop	ar6
      002675 D0 07            [24] 7259 	pop	ar7
                                   7260 ;	888n.c:1003: box(i,6,6,i+1,7,7,1,1);
      002677 75 2F 06         [24] 7261 	mov	_box_PARM_2,#0x06
      00267A 75 30 06         [24] 7262 	mov	_box_PARM_3,#0x06
      00267D 8D 31            [24] 7263 	mov	_box_PARM_4,r5
      00267F 75 32 07         [24] 7264 	mov	_box_PARM_5,#0x07
      002682 75 33 07         [24] 7265 	mov	_box_PARM_6,#0x07
      002685 75 34 01         [24] 7266 	mov	_box_PARM_7,#0x01
      002688 75 35 01         [24] 7267 	mov	_box_PARM_8,#0x01
      00268B 8F 82            [24] 7268 	mov	dpl,r7
      00268D C0 07            [24] 7269 	push	ar7
      00268F C0 06            [24] 7270 	push	ar6
      002691 C0 05            [24] 7271 	push	ar5
      002693 C0 04            [24] 7272 	push	ar4
      002695 12 04 C3         [24] 7273 	lcall	_box
      002698 D0 04            [24] 7274 	pop	ar4
      00269A D0 05            [24] 7275 	pop	ar5
      00269C D0 06            [24] 7276 	pop	ar6
                                   7277 ;	888n.c:1004: box(0,6,6-i,1,7,7-i,1,1);
      00269E 75 2F 06         [24] 7278 	mov	_box_PARM_2,#0x06
      0026A1 8E 30            [24] 7279 	mov	_box_PARM_3,r6
      0026A3 75 31 01         [24] 7280 	mov	_box_PARM_4,#0x01
      0026A6 75 32 07         [24] 7281 	mov	_box_PARM_5,#0x07
      0026A9 8C 33            [24] 7282 	mov	_box_PARM_6,r4
      0026AB 75 34 01         [24] 7283 	mov	_box_PARM_7,#0x01
      0026AE 75 35 01         [24] 7284 	mov	_box_PARM_8,#0x01
      0026B1 75 82 00         [24] 7285 	mov	dpl,#0x00
      0026B4 C0 06            [24] 7286 	push	ar6
      0026B6 C0 05            [24] 7287 	push	ar5
      0026B8 C0 04            [24] 7288 	push	ar4
      0026BA 12 04 C3         [24] 7289 	lcall	_box
      0026BD D0 04            [24] 7290 	pop	ar4
      0026BF D0 05            [24] 7291 	pop	ar5
      0026C1 D0 06            [24] 7292 	pop	ar6
                                   7293 ;	888n.c:1005: box(0,6-i,6,1,7-i,7,1,1);
      0026C3 8E 2F            [24] 7294 	mov	_box_PARM_2,r6
      0026C5 75 30 06         [24] 7295 	mov	_box_PARM_3,#0x06
      0026C8 75 31 01         [24] 7296 	mov	_box_PARM_4,#0x01
      0026CB 8C 32            [24] 7297 	mov	_box_PARM_5,r4
      0026CD 75 33 07         [24] 7298 	mov	_box_PARM_6,#0x07
      0026D0 75 34 01         [24] 7299 	mov	_box_PARM_7,#0x01
      0026D3 75 35 01         [24] 7300 	mov	_box_PARM_8,#0x01
      0026D6 75 82 00         [24] 7301 	mov	dpl,#0x00
      0026D9 C0 06            [24] 7302 	push	ar6
      0026DB C0 05            [24] 7303 	push	ar5
      0026DD C0 04            [24] 7304 	push	ar4
      0026DF 12 04 C3         [24] 7305 	lcall	_box
      0026E2 D0 04            [24] 7306 	pop	ar4
      0026E4 D0 05            [24] 7307 	pop	ar5
      0026E6 D0 06            [24] 7308 	pop	ar6
      0026E8 D0 07            [24] 7309 	pop	ar7
                                   7310 ;	888n.c:1006: box(i,6-i,6-i,i+1,7-i,7-i,1,1);
      0026EA 8E 2F            [24] 7311 	mov	_box_PARM_2,r6
      0026EC 8E 30            [24] 7312 	mov	_box_PARM_3,r6
      0026EE 8D 31            [24] 7313 	mov	_box_PARM_4,r5
      0026F0 8C 32            [24] 7314 	mov	_box_PARM_5,r4
      0026F2 8C 33            [24] 7315 	mov	_box_PARM_6,r4
      0026F4 75 34 01         [24] 7316 	mov	_box_PARM_7,#0x01
      0026F7 75 35 01         [24] 7317 	mov	_box_PARM_8,#0x01
      0026FA 8F 82            [24] 7318 	mov	dpl,r7
      0026FC C0 07            [24] 7319 	push	ar7
      0026FE C0 06            [24] 7320 	push	ar6
      002700 C0 05            [24] 7321 	push	ar5
      002702 C0 04            [24] 7322 	push	ar4
      002704 12 04 C3         [24] 7323 	lcall	_box
      002707 D0 04            [24] 7324 	pop	ar4
      002709 D0 05            [24] 7325 	pop	ar5
      00270B D0 06            [24] 7326 	pop	ar6
      00270D D0 07            [24] 7327 	pop	ar7
                                   7328 ;	888n.c:1007: box(i,6-i,6,i+1,7-i,7,1,1);
      00270F 8E 2F            [24] 7329 	mov	_box_PARM_2,r6
      002711 75 30 06         [24] 7330 	mov	_box_PARM_3,#0x06
      002714 8D 31            [24] 7331 	mov	_box_PARM_4,r5
      002716 8C 32            [24] 7332 	mov	_box_PARM_5,r4
      002718 75 33 07         [24] 7333 	mov	_box_PARM_6,#0x07
      00271B 75 34 01         [24] 7334 	mov	_box_PARM_7,#0x01
      00271E 75 35 01         [24] 7335 	mov	_box_PARM_8,#0x01
      002721 8F 82            [24] 7336 	mov	dpl,r7
      002723 C0 07            [24] 7337 	push	ar7
      002725 C0 06            [24] 7338 	push	ar6
      002727 C0 04            [24] 7339 	push	ar4
      002729 12 04 C3         [24] 7340 	lcall	_box
      00272C D0 04            [24] 7341 	pop	ar4
      00272E D0 06            [24] 7342 	pop	ar6
                                   7343 ;	888n.c:1008: box(0,6-i,6-i,1,7-i,7-i,1,1);
      002730 8E 2F            [24] 7344 	mov	_box_PARM_2,r6
      002732 8E 30            [24] 7345 	mov	_box_PARM_3,r6
      002734 75 31 01         [24] 7346 	mov	_box_PARM_4,#0x01
      002737 8C 32            [24] 7347 	mov	_box_PARM_5,r4
      002739 8C 33            [24] 7348 	mov	_box_PARM_6,r4
      00273B 75 34 01         [24] 7349 	mov	_box_PARM_7,#0x01
      00273E 75 35 01         [24] 7350 	mov	_box_PARM_8,#0x01
      002741 75 82 00         [24] 7351 	mov	dpl,#0x00
      002744 12 04 C3         [24] 7352 	lcall	_box
                                   7353 ;	888n.c:1009: delay(30000);
      002747 90 75 30         [24] 7354 	mov	dptr,#0x7530
      00274A 12 00 90         [24] 7355 	lcall	_delay
      00274D D0 07            [24] 7356 	pop	ar7
                                   7357 ;	888n.c:999: for (i=6;i>0;i--) {
      00274F DF 01            [24] 7358 	djnz	r7,00277$
      002751 22               [24] 7359 	ret
      002752                       7360 00277$:
      002752 02 26 1E         [24] 7361 	ljmp	00144$
      002755 22               [24] 7362 	ret
                                   7363 ;------------------------------------------------------------
                                   7364 ;Allocation info for local variables in function 'flash_11'
                                   7365 ;------------------------------------------------------------
                                   7366 ;i                         Allocated to registers r6 
                                   7367 ;j                         Allocated to registers r7 
                                   7368 ;t                         Allocated to registers r4 
                                   7369 ;x                         Allocated to registers r4 
                                   7370 ;y                         Allocated to registers r5 
                                   7371 ;------------------------------------------------------------
                                   7372 ;	888n.c:1013: void flash_11()
                                   7373 ;	-----------------------------------------
                                   7374 ;	 function flash_11
                                   7375 ;	-----------------------------------------
      002756                       7376 _flash_11:
                                   7377 ;	888n.c:1019: for (j=0; j<5; j++) {
      002756 7F 00            [12] 7378 	mov	r7,#0x00
                                   7379 ;	888n.c:1020: for (i=0; i<13; i++) {
      002758                       7380 00125$:
      002758 7E 00            [12] 7381 	mov	r6,#0x00
      00275A                       7382 00110$:
                                   7383 ;	888n.c:1021: if (daa[i]>>4) {
      00275A EE               [12] 7384 	mov	a,r6
      00275B 90 2B 93         [24] 7385 	mov	dptr,#_flash_11_daa_1_164
      00275E 93               [24] 7386 	movc	a,@a+dptr
      00275F FD               [12] 7387 	mov	r5,a
      002760 C4               [12] 7388 	swap	a
      002761 54 0F            [12] 7389 	anl	a,#0x0f
      002763 FC               [12] 7390 	mov	r4,a
      002764 60 2A            [24] 7391 	jz	00102$
                                   7392 ;	888n.c:1022: t=daa[i]&0x0f;
      002766 74 0F            [12] 7393 	mov	a,#0x0f
      002768 5D               [12] 7394 	anl	a,r5
                                   7395 ;	888n.c:1023: line (0,0,t+1,0,7,t+1,1);
      002769 FC               [12] 7396 	mov	r4,a
      00276A 04               [12] 7397 	inc	a
      00276B FB               [12] 7398 	mov	r3,a
      00276C 75 26 00         [24] 7399 	mov	_line_PARM_2,#0x00
      00276F 8B 27            [24] 7400 	mov	_line_PARM_3,r3
      002771 75 28 00         [24] 7401 	mov	_line_PARM_4,#0x00
      002774 75 29 07         [24] 7402 	mov	_line_PARM_5,#0x07
      002777 8B 2A            [24] 7403 	mov	_line_PARM_6,r3
      002779 75 2B 01         [24] 7404 	mov	_line_PARM_7,#0x01
      00277C 75 82 00         [24] 7405 	mov	dpl,#0x00
      00277F C0 07            [24] 7406 	push	ar7
      002781 C0 06            [24] 7407 	push	ar6
      002783 C0 04            [24] 7408 	push	ar4
      002785 12 03 1D         [24] 7409 	lcall	_line
      002788 D0 04            [24] 7410 	pop	ar4
      00278A D0 06            [24] 7411 	pop	ar6
      00278C D0 07            [24] 7412 	pop	ar7
      00278E 80 02            [24] 7413 	sjmp	00103$
      002790                       7414 00102$:
                                   7415 ;	888n.c:1025: t=daa[i];
      002790 8D 04            [24] 7416 	mov	ar4,r5
      002792                       7417 00103$:
                                   7418 ;	888n.c:1027: line (0,0,t,0,7,t,1);
      002792 75 26 00         [24] 7419 	mov	_line_PARM_2,#0x00
      002795 8C 27            [24] 7420 	mov	_line_PARM_3,r4
      002797 75 28 00         [24] 7421 	mov	_line_PARM_4,#0x00
      00279A 75 29 07         [24] 7422 	mov	_line_PARM_5,#0x07
      00279D 8C 2A            [24] 7423 	mov	_line_PARM_6,r4
      00279F 75 2B 01         [24] 7424 	mov	_line_PARM_7,#0x01
      0027A2 75 82 00         [24] 7425 	mov	dpl,#0x00
      0027A5 C0 07            [24] 7426 	push	ar7
      0027A7 C0 06            [24] 7427 	push	ar6
      0027A9 12 03 1D         [24] 7428 	lcall	_line
                                   7429 ;	888n.c:1028: transss();
      0027AC 12 0F F3         [24] 7430 	lcall	_transss
                                   7431 ;	888n.c:1029: delay(10000);
      0027AF 90 27 10         [24] 7432 	mov	dptr,#0x2710
      0027B2 12 00 90         [24] 7433 	lcall	_delay
      0027B5 D0 06            [24] 7434 	pop	ar6
      0027B7 D0 07            [24] 7435 	pop	ar7
                                   7436 ;	888n.c:1020: for (i=0; i<13; i++) {
      0027B9 0E               [12] 7437 	inc	r6
      0027BA BE 0D 00         [24] 7438 	cjne	r6,#0x0d,00165$
      0027BD                       7439 00165$:
      0027BD 40 9B            [24] 7440 	jc	00110$
                                   7441 ;	888n.c:1019: for (j=0; j<5; j++) {
      0027BF 0F               [12] 7442 	inc	r7
      0027C0 BF 05 00         [24] 7443 	cjne	r7,#0x05,00167$
      0027C3                       7444 00167$:
      0027C3 40 93            [24] 7445 	jc	00125$
                                   7446 ;	888n.c:1033: for (j=1; j<8; j++) {
      0027C5 7F 01            [12] 7447 	mov	r7,#0x01
      0027C7                       7448 00116$:
                                   7449 ;	888n.c:1036: for (i=0; i<24; i+=j) {
      0027C7 7E 00            [12] 7450 	mov	r6,#0x00
      0027C9                       7451 00114$:
                                   7452 ;	888n.c:1037: x=dat3[i]>>4;
      0027C9 EE               [12] 7453 	mov	a,r6
      0027CA 90 2B 63         [24] 7454 	mov	dptr,#_dat3
      0027CD 93               [24] 7455 	movc	a,@a+dptr
      0027CE FD               [12] 7456 	mov	r5,a
      0027CF C4               [12] 7457 	swap	a
      0027D0 54 0F            [12] 7458 	anl	a,#0x0f
      0027D2 FC               [12] 7459 	mov	r4,a
                                   7460 ;	888n.c:1038: y=dat3[i]&0x0f;
      0027D3 53 05 0F         [24] 7461 	anl	ar5,#0x0f
                                   7462 ;	888n.c:1039: box_apeak_xy(0, x, y, 0, x+1, y+1, 1, 1);
      0027D6 EC               [12] 7463 	mov	a,r4
      0027D7 04               [12] 7464 	inc	a
      0027D8 F5 3C            [12] 7465 	mov	_box_apeak_xy_PARM_5,a
      0027DA ED               [12] 7466 	mov	a,r5
      0027DB 04               [12] 7467 	inc	a
      0027DC F5 3D            [12] 7468 	mov	_box_apeak_xy_PARM_6,a
      0027DE 8C 39            [24] 7469 	mov	_box_apeak_xy_PARM_2,r4
      0027E0 8D 3A            [24] 7470 	mov	_box_apeak_xy_PARM_3,r5
      0027E2 75 3B 00         [24] 7471 	mov	_box_apeak_xy_PARM_4,#0x00
      0027E5 75 3E 01         [24] 7472 	mov	_box_apeak_xy_PARM_7,#0x01
      0027E8 75 3F 01         [24] 7473 	mov	_box_apeak_xy_PARM_8,#0x01
      0027EB 75 82 00         [24] 7474 	mov	dpl,#0x00
      0027EE C0 07            [24] 7475 	push	ar7
      0027F0 C0 06            [24] 7476 	push	ar6
      0027F2 12 08 F9         [24] 7477 	lcall	_box_apeak_xy
                                   7478 ;	888n.c:1040: transss();
      0027F5 12 0F F3         [24] 7479 	lcall	_transss
                                   7480 ;	888n.c:1041: delay(10000);
      0027F8 90 27 10         [24] 7481 	mov	dptr,#0x2710
      0027FB 12 00 90         [24] 7482 	lcall	_delay
      0027FE D0 06            [24] 7483 	pop	ar6
      002800 D0 07            [24] 7484 	pop	ar7
                                   7485 ;	888n.c:1036: for (i=0; i<24; i+=j) {
      002802 EF               [12] 7486 	mov	a,r7
      002803 2E               [12] 7487 	add	a,r6
      002804 FE               [12] 7488 	mov	r6,a
      002805 BE 18 00         [24] 7489 	cjne	r6,#0x18,00169$
      002808                       7490 00169$:
      002808 40 BF            [24] 7491 	jc	00114$
                                   7492 ;	888n.c:1033: for (j=1; j<8; j++) {
      00280A 0F               [12] 7493 	inc	r7
      00280B BF 08 00         [24] 7494 	cjne	r7,#0x08,00171$
      00280E                       7495 00171$:
      00280E 40 B7            [24] 7496 	jc	00116$
                                   7497 ;	888n.c:1045: for (j=1;j<8;j++)
      002810 7F 01            [12] 7498 	mov	r7,#0x01
      002812                       7499 00120$:
                                   7500 ;	888n.c:1049: for (i=0; i<24; i+=j) {
      002812 7E 00            [12] 7501 	mov	r6,#0x00
      002814                       7502 00118$:
                                   7503 ;	888n.c:1050: x=dat3[i]>>4;
      002814 EE               [12] 7504 	mov	a,r6
      002815 90 2B 63         [24] 7505 	mov	dptr,#_dat3
      002818 93               [24] 7506 	movc	a,@a+dptr
      002819 FD               [12] 7507 	mov	r5,a
      00281A C4               [12] 7508 	swap	a
      00281B 54 0F            [12] 7509 	anl	a,#0x0f
      00281D F5 08            [12] 7510 	mov	_point_PARM_2,a
                                   7511 ;	888n.c:1051: y=dat3[i]&0x0f;
      00281F 74 0F            [12] 7512 	mov	a,#0x0f
      002821 5D               [12] 7513 	anl	a,r5
      002822 F5 09            [12] 7514 	mov	_point_PARM_3,a
                                   7515 ;	888n.c:1052: point (0,x,y,1);
      002824 75 0A 01         [24] 7516 	mov	_point_PARM_4,#0x01
      002827 75 82 00         [24] 7517 	mov	dpl,#0x00
      00282A C0 07            [24] 7518 	push	ar7
      00282C C0 06            [24] 7519 	push	ar6
      00282E 12 02 21         [24] 7520 	lcall	_point
                                   7521 ;	888n.c:1053: transss();
      002831 12 0F F3         [24] 7522 	lcall	_transss
                                   7523 ;	888n.c:1054: delay(10000);
      002834 90 27 10         [24] 7524 	mov	dptr,#0x2710
      002837 12 00 90         [24] 7525 	lcall	_delay
      00283A D0 06            [24] 7526 	pop	ar6
      00283C D0 07            [24] 7527 	pop	ar7
                                   7528 ;	888n.c:1049: for (i=0; i<24; i+=j) {
      00283E EF               [12] 7529 	mov	a,r7
      00283F 2E               [12] 7530 	add	a,r6
      002840 FE               [12] 7531 	mov	r6,a
      002841 BE 18 00         [24] 7532 	cjne	r6,#0x18,00173$
      002844                       7533 00173$:
      002844 40 CE            [24] 7534 	jc	00118$
                                   7535 ;	888n.c:1045: for (j=1;j<8;j++)
      002846 0F               [12] 7536 	inc	r7
      002847 BF 08 00         [24] 7537 	cjne	r7,#0x08,00175$
      00284A                       7538 00175$:
      00284A 40 C6            [24] 7539 	jc	00120$
      00284C 22               [24] 7540 	ret
                                   7541 ;------------------------------------------------------------
                                   7542 ;Allocation info for local variables in function 'main'
                                   7543 ;------------------------------------------------------------
                                   7544 ;	888n.c:1060: void main()
                                   7545 ;	-----------------------------------------
                                   7546 ;	 function main
                                   7547 ;	-----------------------------------------
      00284D                       7548 _main:
                                   7549 ;	888n.c:1062: sinter();
      00284D 12 00 70         [24] 7550 	lcall	_sinter
                                   7551 ;	888n.c:1064: while (1) {
      002850                       7552 00102$:
                                   7553 ;	888n.c:1069: clear(0);
      002850 75 82 00         [24] 7554 	mov	dpl,#0x00
      002853 12 01 3A         [24] 7555 	lcall	_clear
                                   7556 ;	888n.c:1070: flash_2();
      002856 12 10 A2         [24] 7557 	lcall	_flash_2
                                   7558 ;	888n.c:1071: flash_3();
      002859 12 11 56         [24] 7559 	lcall	_flash_3
                                   7560 ;	888n.c:1072: flash_4();
      00285C 12 12 50         [24] 7561 	lcall	_flash_4
                                   7562 ;	888n.c:1073: flash_4();
      00285F 12 12 50         [24] 7563 	lcall	_flash_4
                                   7564 ;	888n.c:1074: flash_5();
      002862 12 14 09         [24] 7565 	lcall	_flash_5
                                   7566 ;	888n.c:1075: flash_5();
      002865 12 14 09         [24] 7567 	lcall	_flash_5
                                   7568 ;	888n.c:1076: flash_6();
      002868 12 19 A6         [24] 7569 	lcall	_flash_6
                                   7570 ;	888n.c:1077: flash_7();
      00286B 12 1A E8         [24] 7571 	lcall	_flash_7
                                   7572 ;	888n.c:1078: flash_8();
      00286E 12 1C B2         [24] 7573 	lcall	_flash_8
                                   7574 ;	888n.c:1079: flash_9();
      002871 12 1C D6         [24] 7575 	lcall	_flash_9
                                   7576 ;	888n.c:1080: flash_10();
      002874 12 22 65         [24] 7577 	lcall	_flash_10
                                   7578 ;	888n.c:1081: clear (0);
      002877 75 82 00         [24] 7579 	mov	dpl,#0x00
      00287A 12 01 3A         [24] 7580 	lcall	_clear
                                   7581 ;	888n.c:1082: flash_11();
      00287D 12 27 56         [24] 7582 	lcall	_flash_11
                                   7583 ;	888n.c:1083: flash_9();
      002880 12 1C D6         [24] 7584 	lcall	_flash_9
                                   7585 ;	888n.c:1084: flash_5();
      002883 12 14 09         [24] 7586 	lcall	_flash_5
                                   7587 ;	888n.c:1085: flash_7();
      002886 12 1A E8         [24] 7588 	lcall	_flash_7
                                   7589 ;	888n.c:1086: flash_5();
      002889 12 14 09         [24] 7590 	lcall	_flash_5
                                   7591 ;	888n.c:1087: flash_6();
      00288C 12 19 A6         [24] 7592 	lcall	_flash_6
                                   7593 ;	888n.c:1088: flash_8();
      00288F 12 1C B2         [24] 7594 	lcall	_flash_8
                                   7595 ;	888n.c:1089: flash_9();
      002892 12 1C D6         [24] 7596 	lcall	_flash_9
                                   7597 ;	888n.c:1090: flash_10();
      002895 12 22 65         [24] 7598 	lcall	_flash_10
      002898 80 B6            [24] 7599 	sjmp	00102$
                                   7600 ;------------------------------------------------------------
                                   7601 ;Allocation info for local variables in function 'print'
                                   7602 ;------------------------------------------------------------
                                   7603 ;layer                     Allocated with name '_print_layer_1_174'
                                   7604 ;i                         Allocated to registers r7 
                                   7605 ;------------------------------------------------------------
                                   7606 ;	888n.c:1097: void print() __interrupt (1)
                                   7607 ;	-----------------------------------------
                                   7608 ;	 function print
                                   7609 ;	-----------------------------------------
      00289A                       7610 _print:
      00289A C0 21            [24] 7611 	push	bits
      00289C C0 E0            [24] 7612 	push	acc
      00289E C0 F0            [24] 7613 	push	b
      0028A0 C0 82            [24] 7614 	push	dpl
      0028A2 C0 83            [24] 7615 	push	dph
      0028A4 C0 07            [24] 7616 	push	(0+7)
      0028A6 C0 06            [24] 7617 	push	(0+6)
      0028A8 C0 05            [24] 7618 	push	(0+5)
      0028AA C0 04            [24] 7619 	push	(0+4)
      0028AC C0 03            [24] 7620 	push	(0+3)
      0028AE C0 02            [24] 7621 	push	(0+2)
      0028B0 C0 01            [24] 7622 	push	(0+1)
      0028B2 C0 00            [24] 7623 	push	(0+0)
      0028B4 C0 D0            [24] 7624 	push	psw
      0028B6 75 D0 00         [24] 7625 	mov	psw,#0x00
                                   7626 ;	888n.c:1102: P1=0;
      0028B9 75 90 00         [24] 7627 	mov	_P1,#0x00
                                   7628 ;	888n.c:1103: for (i=0; i<8; i++) {
      0028BC 7F 00            [12] 7629 	mov	r7,#0x00
      0028BE                       7630 00105$:
                                   7631 ;	888n.c:1104: P2=1<<i;
      0028BE 8F F0            [24] 7632 	mov	b,r7
      0028C0 05 F0            [12] 7633 	inc	b
      0028C2 74 01            [12] 7634 	mov	a,#0x01
      0028C4 80 02            [24] 7635 	sjmp	00121$
      0028C6                       7636 00119$:
      0028C6 25 E0            [12] 7637 	add	a,acc
      0028C8                       7638 00121$:
      0028C8 D5 F0 FB         [24] 7639 	djnz	b,00119$
      0028CB F5 A0            [12] 7640 	mov	_P2,a
                                   7641 ;	888n.c:1105: delay(3);
      0028CD 90 00 03         [24] 7642 	mov	dptr,#0x0003
      0028D0 C0 07            [24] 7643 	push	ar7
      0028D2 12 00 90         [24] 7644 	lcall	_delay
      0028D5 D0 07            [24] 7645 	pop	ar7
                                   7646 ;	888n.c:1106: P0=display[layer][i];
      0028D7 E5 79            [12] 7647 	mov	a,_print_layer_1_174
      0028D9 75 F0 08         [24] 7648 	mov	b,#0x08
      0028DC A4               [48] 7649 	mul	ab
      0028DD 24 01            [12] 7650 	add	a,#_display
      0028DF FD               [12] 7651 	mov	r5,a
      0028E0 74 00            [12] 7652 	mov	a,#(_display >> 8)
      0028E2 35 F0            [12] 7653 	addc	a,b
      0028E4 FE               [12] 7654 	mov	r6,a
      0028E5 EF               [12] 7655 	mov	a,r7
      0028E6 2D               [12] 7656 	add	a,r5
      0028E7 F5 82            [12] 7657 	mov	dpl,a
      0028E9 E4               [12] 7658 	clr	a
      0028EA 3E               [12] 7659 	addc	a,r6
      0028EB F5 83            [12] 7660 	mov	dph,a
      0028ED E0               [24] 7661 	movx	a,@dptr
      0028EE F5 80            [12] 7662 	mov	_P0,a
                                   7663 ;	888n.c:1107: delay(3);
      0028F0 90 00 03         [24] 7664 	mov	dptr,#0x0003
      0028F3 C0 07            [24] 7665 	push	ar7
      0028F5 12 00 90         [24] 7666 	lcall	_delay
      0028F8 D0 07            [24] 7667 	pop	ar7
                                   7668 ;	888n.c:1103: for (i=0; i<8; i++) {
      0028FA 0F               [12] 7669 	inc	r7
      0028FB BF 08 00         [24] 7670 	cjne	r7,#0x08,00122$
      0028FE                       7671 00122$:
      0028FE 40 BE            [24] 7672 	jc	00105$
                                   7673 ;	888n.c:1110: P1=1<<layer;
      002900 85 79 F0         [24] 7674 	mov	b,_print_layer_1_174
      002903 05 F0            [12] 7675 	inc	b
      002905 74 01            [12] 7676 	mov	a,#0x01
      002907 80 02            [24] 7677 	sjmp	00126$
      002909                       7678 00124$:
      002909 25 E0            [12] 7679 	add	a,acc
      00290B                       7680 00126$:
      00290B D5 F0 FB         [24] 7681 	djnz	b,00124$
      00290E F5 90            [12] 7682 	mov	_P1,a
                                   7683 ;	888n.c:1111: if (layer<7) 
      002910 74 F9            [12] 7684 	mov	a,#0x100 - 0x07
      002912 25 79            [12] 7685 	add	a,_print_layer_1_174
      002914 40 04            [24] 7686 	jc	00103$
                                   7687 ;	888n.c:1112: layer++;
      002916 05 79            [12] 7688 	inc	_print_layer_1_174
      002918 80 03            [24] 7689 	sjmp	00104$
      00291A                       7690 00103$:
                                   7691 ;	888n.c:1114: layer=0;
      00291A 75 79 00         [24] 7692 	mov	_print_layer_1_174,#0x00
      00291D                       7693 00104$:
                                   7694 ;	888n.c:1116: TH0=0xc0;
      00291D 75 8C C0         [24] 7695 	mov	_TH0,#0xc0
                                   7696 ;	888n.c:1117: TL0=0;
      002920 75 8A 00         [24] 7697 	mov	_TL0,#0x00
      002923 D0 D0            [24] 7698 	pop	psw
      002925 D0 00            [24] 7699 	pop	(0+0)
      002927 D0 01            [24] 7700 	pop	(0+1)
      002929 D0 02            [24] 7701 	pop	(0+2)
      00292B D0 03            [24] 7702 	pop	(0+3)
      00292D D0 04            [24] 7703 	pop	(0+4)
      00292F D0 05            [24] 7704 	pop	(0+5)
      002931 D0 06            [24] 7705 	pop	(0+6)
      002933 D0 07            [24] 7706 	pop	(0+7)
      002935 D0 83            [24] 7707 	pop	dph
      002937 D0 82            [24] 7708 	pop	dpl
      002939 D0 F0            [24] 7709 	pop	b
      00293B D0 E0            [24] 7710 	pop	acc
      00293D D0 21            [24] 7711 	pop	bits
      00293F 32               [24] 7712 	reti
                                   7713 	.area CSEG    (CODE)
                                   7714 	.area CONST   (CODE)
      002A5F                       7715 _table_cha:
      002A5F 51                    7716 	.db #0x51	; 81	'Q'
      002A60 51                    7717 	.db #0x51	; 81	'Q'
      002A61 51                    7718 	.db #0x51	; 81	'Q'
      002A62 4A                    7719 	.db #0x4a	; 74	'J'
      002A63 4A                    7720 	.db #0x4a	; 74	'J'
      002A64 4A                    7721 	.db #0x4a	; 74	'J'
      002A65 44                    7722 	.db #0x44	; 68	'D'
      002A66 44                    7723 	.db #0x44	; 68	'D'
      002A67 18                    7724 	.db #0x18	; 24
      002A68 1C                    7725 	.db #0x1c	; 28
      002A69 18                    7726 	.db #0x18	; 24
      002A6A 18                    7727 	.db #0x18	; 24
      002A6B 18                    7728 	.db #0x18	; 24
      002A6C 18                    7729 	.db #0x18	; 24
      002A6D 18                    7730 	.db #0x18	; 24
      002A6E 3C                    7731 	.db #0x3c	; 60
      002A6F 3C                    7732 	.db #0x3c	; 60
      002A70 66                    7733 	.db #0x66	; 102	'f'
      002A71 66                    7734 	.db #0x66	; 102	'f'
      002A72 30                    7735 	.db #0x30	; 48	'0'
      002A73 18                    7736 	.db #0x18	; 24
      002A74 0C                    7737 	.db #0x0c	; 12
      002A75 06                    7738 	.db #0x06	; 6
      002A76 F6                    7739 	.db #0xf6	; 246
      002A77 3C                    7740 	.db #0x3c	; 60
      002A78 66                    7741 	.db #0x66	; 102	'f'
      002A79 60                    7742 	.db #0x60	; 96
      002A7A 38                    7743 	.db #0x38	; 56	'8'
      002A7B 60                    7744 	.db #0x60	; 96
      002A7C 60                    7745 	.db #0x60	; 96
      002A7D 66                    7746 	.db #0x66	; 102	'f'
      002A7E 3C                    7747 	.db #0x3c	; 60
      002A7F 30                    7748 	.db #0x30	; 48	'0'
      002A80 38                    7749 	.db #0x38	; 56	'8'
      002A81 3C                    7750 	.db #0x3c	; 60
      002A82 3E                    7751 	.db #0x3e	; 62
      002A83 36                    7752 	.db #0x36	; 54	'6'
      002A84 7E                    7753 	.db #0x7e	; 126
      002A85 30                    7754 	.db #0x30	; 48	'0'
      002A86 30                    7755 	.db #0x30	; 48	'0'
      002A87 3C                    7756 	.db #0x3c	; 60
      002A88 3C                    7757 	.db #0x3c	; 60
      002A89 18                    7758 	.db #0x18	; 24
      002A8A 18                    7759 	.db #0x18	; 24
      002A8B 18                    7760 	.db #0x18	; 24
      002A8C 18                    7761 	.db #0x18	; 24
      002A8D 3C                    7762 	.db #0x3c	; 60
      002A8E 3C                    7763 	.db #0x3c	; 60
      002A8F 66                    7764 	.db #0x66	; 102	'f'
      002A90 FF                    7765 	.db #0xff	; 255
      002A91 FF                    7766 	.db #0xff	; 255
      002A92 FF                    7767 	.db #0xff	; 255
      002A93 7E                    7768 	.db #0x7e	; 126
      002A94 3C                    7769 	.db #0x3c	; 60
      002A95 18                    7770 	.db #0x18	; 24
      002A96 18                    7771 	.db #0x18	; 24
      002A97 66                    7772 	.db #0x66	; 102	'f'
      002A98 66                    7773 	.db #0x66	; 102	'f'
      002A99 66                    7774 	.db #0x66	; 102	'f'
      002A9A 66                    7775 	.db #0x66	; 102	'f'
      002A9B 66                    7776 	.db #0x66	; 102	'f'
      002A9C 66                    7777 	.db #0x66	; 102	'f'
      002A9D 7E                    7778 	.db #0x7e	; 126
      002A9E 3C                    7779 	.db #0x3c	; 60
      002A9F                       7780 _table_id:
      002A9F 81                    7781 	.db #0x81	; 129
      002AA0 FF                    7782 	.db #0xff	; 255
      002AA1 81                    7783 	.db #0x81	; 129
      002AA2 00                    7784 	.db #0x00	; 0
      002AA3 FF                    7785 	.db #0xff	; 255
      002AA4 81                    7786 	.db #0x81	; 129
      002AA5 81                    7787 	.db #0x81	; 129
      002AA6 7E                    7788 	.db #0x7e	; 126
      002AA7 00                    7789 	.db #0x00	; 0
      002AA8 FF                    7790 	.db #0xff	; 255
      002AA9 89                    7791 	.db #0x89	; 137
      002AAA 89                    7792 	.db #0x89	; 137
      002AAB 00                    7793 	.db #0x00	; 0
      002AAC F8                    7794 	.db #0xf8	; 248
      002AAD 27                    7795 	.db #0x27	; 39
      002AAE 27                    7796 	.db #0x27	; 39
      002AAF F8                    7797 	.db #0xf8	; 248
      002AB0 00                    7798 	.db #0x00	; 0
      002AB1 8F                    7799 	.db #0x8f	; 143
      002AB2 89                    7800 	.db #0x89	; 137
      002AB3 89                    7801 	.db #0x89	; 137
      002AB4 F9                    7802 	.db #0xf9	; 249
      002AB5 00                    7803 	.db #0x00	; 0
      002AB6 FF                    7804 	.db #0xff	; 255
      002AB7 81                    7805 	.db #0x81	; 129
      002AB8 81                    7806 	.db #0x81	; 129
      002AB9 FF                    7807 	.db #0xff	; 255
      002ABA 00                    7808 	.db #0x00	; 0
      002ABB FF                    7809 	.db #0xff	; 255
      002ABC 09                    7810 	.db #0x09	; 9
      002ABD 09                    7811 	.db #0x09	; 9
      002ABE 09                    7812 	.db #0x09	; 9
      002ABF 01                    7813 	.db #0x01	; 1
      002AC0 00                    7814 	.db #0x00	; 0
      002AC1 01                    7815 	.db #0x01	; 1
      002AC2 01                    7816 	.db #0x01	; 1
      002AC3 FF                    7817 	.db #0xff	; 255
      002AC4 01                    7818 	.db #0x01	; 1
      002AC5 01                    7819 	.db #0x01	; 1
      002AC6 00                    7820 	.db #0x00	; 0
      002AC7                       7821 _dat:
      002AC7 00                    7822 	.db #0x00	; 0
      002AC8 20                    7823 	.db #0x20	; 32
      002AC9 40                    7824 	.db #0x40	; 64
      002ACA 60                    7825 	.db #0x60	; 96
      002ACB 80                    7826 	.db #0x80	; 128
      002ACC A0                    7827 	.db #0xa0	; 160
      002ACD C0                    7828 	.db #0xc0	; 192
      002ACE E0                    7829 	.db #0xe0	; 224
      002ACF E4                    7830 	.db #0xe4	; 228
      002AD0 E8                    7831 	.db #0xe8	; 232
      002AD1 EC                    7832 	.db #0xec	; 236
      002AD2 F0                    7833 	.db #0xf0	; 240
      002AD3 F4                    7834 	.db #0xf4	; 244
      002AD4 F8                    7835 	.db #0xf8	; 248
      002AD5 FC                    7836 	.db #0xfc	; 252
      002AD6 DC                    7837 	.db #0xdc	; 220
      002AD7 BC                    7838 	.db #0xbc	; 188
      002AD8 9C                    7839 	.db #0x9c	; 156
      002AD9 7C                    7840 	.db #0x7c	; 124
      002ADA 5C                    7841 	.db #0x5c	; 92
      002ADB 3C                    7842 	.db #0x3c	; 60
      002ADC 1C                    7843 	.db #0x1c	; 28
      002ADD 18                    7844 	.db #0x18	; 24
      002ADE 14                    7845 	.db #0x14	; 20
      002ADF 10                    7846 	.db #0x10	; 16
      002AE0 0C                    7847 	.db #0x0c	; 12
      002AE1 08                    7848 	.db #0x08	; 8
      002AE2 04                    7849 	.db #0x04	; 4
      002AE3 25                    7850 	.db #0x25	; 37
      002AE4 45                    7851 	.db #0x45	; 69	'E'
      002AE5 65                    7852 	.db #0x65	; 101	'e'
      002AE6 85                    7853 	.db #0x85	; 133
      002AE7 A5                    7854 	.db #0xa5	; 165
      002AE8 C5                    7855 	.db #0xc5	; 197
      002AE9 C9                    7856 	.db #0xc9	; 201
      002AEA CD                    7857 	.db #0xcd	; 205
      002AEB D1                    7858 	.db #0xd1	; 209
      002AEC D5                    7859 	.db #0xd5	; 213
      002AED D9                    7860 	.db #0xd9	; 217
      002AEE B9                    7861 	.db #0xb9	; 185
      002AEF 99                    7862 	.db #0x99	; 153
      002AF0 79                    7863 	.db #0x79	; 121	'y'
      002AF1 59                    7864 	.db #0x59	; 89	'Y'
      002AF2 39                    7865 	.db #0x39	; 57	'9'
      002AF3 35                    7866 	.db #0x35	; 53	'5'
      002AF4 31                    7867 	.db #0x31	; 49	'1'
      002AF5 2D                    7868 	.db #0x2d	; 45
      002AF6 29                    7869 	.db #0x29	; 41
      002AF7 4A                    7870 	.db #0x4a	; 74	'J'
      002AF8 6A                    7871 	.db #0x6a	; 106	'j'
      002AF9 8A                    7872 	.db #0x8a	; 138
      002AFA AA                    7873 	.db #0xaa	; 170
      002AFB AE                    7874 	.db #0xae	; 174
      002AFC B2                    7875 	.db #0xb2	; 178
      002AFD B6                    7876 	.db #0xb6	; 182
      002AFE 96                    7877 	.db #0x96	; 150
      002AFF 76                    7878 	.db #0x76	; 118	'v'
      002B00 56                    7879 	.db #0x56	; 86	'V'
      002B01 52                    7880 	.db #0x52	; 82	'R'
      002B02 4E                    7881 	.db #0x4e	; 78	'N'
      002B03 6F                    7882 	.db #0x6f	; 111	'o'
      002B04 8F                    7883 	.db #0x8f	; 143
      002B05 93                    7884 	.db #0x93	; 147
      002B06 73                    7885 	.db #0x73	; 115	's'
      002B07 6F                    7886 	.db #0x6f	; 111	'o'
      002B08 8F                    7887 	.db #0x8f	; 143
      002B09 93                    7888 	.db #0x93	; 147
      002B0A 73                    7889 	.db #0x73	; 115	's'
      002B0B 4A                    7890 	.db #0x4a	; 74	'J'
      002B0C 6A                    7891 	.db #0x6a	; 106	'j'
      002B0D 8A                    7892 	.db #0x8a	; 138
      002B0E AA                    7893 	.db #0xaa	; 170
      002B0F AE                    7894 	.db #0xae	; 174
      002B10 B2                    7895 	.db #0xb2	; 178
      002B11 B6                    7896 	.db #0xb6	; 182
      002B12 96                    7897 	.db #0x96	; 150
      002B13 76                    7898 	.db #0x76	; 118	'v'
      002B14 56                    7899 	.db #0x56	; 86	'V'
      002B15 52                    7900 	.db #0x52	; 82	'R'
      002B16 4E                    7901 	.db #0x4e	; 78	'N'
      002B17 25                    7902 	.db #0x25	; 37
      002B18 45                    7903 	.db #0x45	; 69	'E'
      002B19 65                    7904 	.db #0x65	; 101	'e'
      002B1A 85                    7905 	.db #0x85	; 133
      002B1B A5                    7906 	.db #0xa5	; 165
      002B1C C5                    7907 	.db #0xc5	; 197
      002B1D C9                    7908 	.db #0xc9	; 201
      002B1E CD                    7909 	.db #0xcd	; 205
      002B1F D1                    7910 	.db #0xd1	; 209
      002B20 D5                    7911 	.db #0xd5	; 213
      002B21 D9                    7912 	.db #0xd9	; 217
      002B22 B9                    7913 	.db #0xb9	; 185
      002B23 99                    7914 	.db #0x99	; 153
      002B24 79                    7915 	.db #0x79	; 121	'y'
      002B25 59                    7916 	.db #0x59	; 89	'Y'
      002B26 39                    7917 	.db #0x39	; 57	'9'
      002B27 35                    7918 	.db #0x35	; 53	'5'
      002B28 31                    7919 	.db #0x31	; 49	'1'
      002B29 2D                    7920 	.db #0x2d	; 45
      002B2A 29                    7921 	.db #0x29	; 41
      002B2B 00                    7922 	.db #0x00	; 0
      002B2C 20                    7923 	.db #0x20	; 32
      002B2D 40                    7924 	.db #0x40	; 64
      002B2E 60                    7925 	.db #0x60	; 96
      002B2F 80                    7926 	.db #0x80	; 128
      002B30 A0                    7927 	.db #0xa0	; 160
      002B31 C0                    7928 	.db #0xc0	; 192
      002B32 E0                    7929 	.db #0xe0	; 224
      002B33 E4                    7930 	.db #0xe4	; 228
      002B34 E8                    7931 	.db #0xe8	; 232
      002B35 EC                    7932 	.db #0xec	; 236
      002B36 F0                    7933 	.db #0xf0	; 240
      002B37 F4                    7934 	.db #0xf4	; 244
      002B38 F8                    7935 	.db #0xf8	; 248
      002B39 FC                    7936 	.db #0xfc	; 252
      002B3A DC                    7937 	.db #0xdc	; 220
      002B3B BC                    7938 	.db #0xbc	; 188
      002B3C 9C                    7939 	.db #0x9c	; 156
      002B3D 7C                    7940 	.db #0x7c	; 124
      002B3E 5C                    7941 	.db #0x5c	; 92
      002B3F 3C                    7942 	.db #0x3c	; 60
      002B40 1C                    7943 	.db #0x1c	; 28
      002B41 18                    7944 	.db #0x18	; 24
      002B42 14                    7945 	.db #0x14	; 20
      002B43 10                    7946 	.db #0x10	; 16
      002B44 0C                    7947 	.db #0x0c	; 12
      002B45 08                    7948 	.db #0x08	; 8
      002B46 04                    7949 	.db #0x04	; 4
      002B47                       7950 _dat2:
      002B47 00                    7951 	.db #0x00	; 0
      002B48 20                    7952 	.db #0x20	; 32
      002B49 40                    7953 	.db #0x40	; 64
      002B4A 60                    7954 	.db #0x60	; 96
      002B4B 80                    7955 	.db #0x80	; 128
      002B4C A0                    7956 	.db #0xa0	; 160
      002B4D C0                    7957 	.db #0xc0	; 192
      002B4E E0                    7958 	.db #0xe0	; 224
      002B4F E4                    7959 	.db #0xe4	; 228
      002B50 E8                    7960 	.db #0xe8	; 232
      002B51 EC                    7961 	.db #0xec	; 236
      002B52 F0                    7962 	.db #0xf0	; 240
      002B53 F4                    7963 	.db #0xf4	; 244
      002B54 F8                    7964 	.db #0xf8	; 248
      002B55 FC                    7965 	.db #0xfc	; 252
      002B56 DC                    7966 	.db #0xdc	; 220
      002B57 BC                    7967 	.db #0xbc	; 188
      002B58 9C                    7968 	.db #0x9c	; 156
      002B59 7C                    7969 	.db #0x7c	; 124
      002B5A 5C                    7970 	.db #0x5c	; 92
      002B5B 3C                    7971 	.db #0x3c	; 60
      002B5C 1C                    7972 	.db #0x1c	; 28
      002B5D 18                    7973 	.db #0x18	; 24
      002B5E 14                    7974 	.db #0x14	; 20
      002B5F 10                    7975 	.db #0x10	; 16
      002B60 0C                    7976 	.db #0x0c	; 12
      002B61 08                    7977 	.db #0x08	; 8
      002B62 04                    7978 	.db #0x04	; 4
      002B63                       7979 _dat3:
      002B63 00                    7980 	.db #0x00	; 0
      002B64 01                    7981 	.db #0x01	; 1
      002B65 02                    7982 	.db #0x02	; 2
      002B66 03                    7983 	.db #0x03	; 3
      002B67 04                    7984 	.db #0x04	; 4
      002B68 05                    7985 	.db #0x05	; 5
      002B69 06                    7986 	.db #0x06	; 6
      002B6A 16                    7987 	.db #0x16	; 22
      002B6B 26                    7988 	.db #0x26	; 38
      002B6C 36                    7989 	.db #0x36	; 54	'6'
      002B6D 46                    7990 	.db #0x46	; 70	'F'
      002B6E 56                    7991 	.db #0x56	; 86	'V'
      002B6F 66                    7992 	.db #0x66	; 102	'f'
      002B70 65                    7993 	.db #0x65	; 101	'e'
      002B71 64                    7994 	.db #0x64	; 100	'd'
      002B72 63                    7995 	.db #0x63	; 99	'c'
      002B73 62                    7996 	.db #0x62	; 98	'b'
      002B74 61                    7997 	.db #0x61	; 97	'a'
      002B75 60                    7998 	.db #0x60	; 96
      002B76 50                    7999 	.db #0x50	; 80	'P'
      002B77 40                    8000 	.db #0x40	; 64
      002B78 30                    8001 	.db #0x30	; 48	'0'
      002B79 20                    8002 	.db #0x20	; 32
      002B7A 10                    8003 	.db #0x10	; 16
      002B7B                       8004 _table_3p:
      002B7B FF                    8005 	.db #0xff	; 255
      002B7C 89                    8006 	.db #0x89	; 137
      002B7D F5                    8007 	.db #0xf5	; 245
      002B7E 93                    8008 	.db #0x93	; 147
      002B7F 93                    8009 	.db #0x93	; 147
      002B80 F5                    8010 	.db #0xf5	; 245
      002B81 89                    8011 	.db #0x89	; 137
      002B82 FF                    8012 	.db #0xff	; 255
      002B83 0E                    8013 	.db #0x0e	; 14
      002B84 1F                    8014 	.db #0x1f	; 31
      002B85 3F                    8015 	.db #0x3f	; 63
      002B86 7E                    8016 	.db #0x7e	; 126
      002B87 7E                    8017 	.db #0x7e	; 126
      002B88 3F                    8018 	.db #0x3f	; 63
      002B89 1F                    8019 	.db #0x1f	; 31
      002B8A 0E                    8020 	.db #0x0e	; 14
      002B8B 18                    8021 	.db #0x18	; 24
      002B8C 3C                    8022 	.db #0x3c	; 60
      002B8D 7E                    8023 	.db #0x7e	; 126
      002B8E FF                    8024 	.db #0xff	; 255
      002B8F 18                    8025 	.db #0x18	; 24
      002B90 18                    8026 	.db #0x18	; 24
      002B91 18                    8027 	.db #0x18	; 24
      002B92 18                    8028 	.db #0x18	; 24
      002B93                       8029 _flash_11_daa_1_164:
      002B93 00                    8030 	.db #0x00	; 0
      002B94 01                    8031 	.db #0x01	; 1
      002B95 02                    8032 	.db #0x02	; 2
      002B96 23                    8033 	.db #0x23	; 35
      002B97 05                    8034 	.db #0x05	; 5
      002B98 06                    8035 	.db #0x06	; 6
      002B99 07                    8036 	.db #0x07	; 7
      002B9A 06                    8037 	.db #0x06	; 6
      002B9B 05                    8038 	.db #0x05	; 5
      002B9C 23                    8039 	.db #0x23	; 35
      002B9D 02                    8040 	.db #0x02	; 2
      002B9E 01                    8041 	.db #0x01	; 1
      002B9F 00                    8042 	.db #0x00	; 0
                                   8043 	.area XINIT   (CODE)
                                   8044 	.area CABS    (ABS,CODE)
