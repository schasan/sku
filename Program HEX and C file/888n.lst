                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module 888n
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _type_PARM_2
                                     12 	.globl _point_PARM_4
                                     13 	.globl _point_PARM_3
                                     14 	.globl _point_PARM_2
                                     15 	.globl _maxt_PARM_3
                                     16 	.globl _maxt_PARM_2
                                     17 	.globl _max_PARM_2
                                     18 	.globl _judgebit_PARM_2
                                     19 	.globl _flash_11_daa_1_164
                                     20 	.globl _table_3p
                                     21 	.globl _dat3
                                     22 	.globl _dat2
                                     23 	.globl _dat
                                     24 	.globl _table_id
                                     25 	.globl _table_cha
                                     26 	.globl _print
                                     27 	.globl _main
                                     28 	.globl _flash_11
                                     29 	.globl _flash_10
                                     30 	.globl _flash_9
                                     31 	.globl _flash_8
                                     32 	.globl _flash_7
                                     33 	.globl _flash_6
                                     34 	.globl _flash_5
                                     35 	.globl _flash_4
                                     36 	.globl _flash_3
                                     37 	.globl _flash_2
                                     38 	.globl _flash_1
                                     39 	.globl _transss
                                     40 	.globl _tranoutchar
                                     41 	.globl _trans
                                     42 	.globl _roll_3_xy
                                     43 	.globl _roll_apeak_xy
                                     44 	.globl _roll_apeak_yz
                                     45 	.globl _rolldisplay
                                     46 	.globl _boxtola
                                     47 	.globl _poke
                                     48 	.globl _box_apeak_xy
                                     49 	.globl _box
                                     50 	.globl _line
                                     51 	.globl _cirp
                                     52 	.globl _type
                                     53 	.globl _point
                                     54 	.globl _trailler
                                     55 	.globl _clear
                                     56 	.globl _maxt
                                     57 	.globl _max
                                     58 	.globl _abss
                                     59 	.globl _abs
                                     60 	.globl _judgebit
                                     61 	.globl _delay
                                     62 	.globl _delay5us
                                     63 	.globl _sinter
                                     64 	.globl _CCF0
                                     65 	.globl _CCF1
                                     66 	.globl _CR
                                     67 	.globl _CF
                                     68 	.globl _P5_3
                                     69 	.globl _P5_2
                                     70 	.globl _P5_1
                                     71 	.globl _P5_0
                                     72 	.globl _P4_7
                                     73 	.globl _P4_6
                                     74 	.globl _P4_5
                                     75 	.globl _P4_4
                                     76 	.globl _P4_3
                                     77 	.globl _P4_2
                                     78 	.globl _P4_1
                                     79 	.globl _P4_0
                                     80 	.globl _PADC
                                     81 	.globl _PLVD
                                     82 	.globl _PPCA
                                     83 	.globl _EADC
                                     84 	.globl _ELVD
                                     85 	.globl _CY
                                     86 	.globl _AC
                                     87 	.globl _F0
                                     88 	.globl _RS1
                                     89 	.globl _RS0
                                     90 	.globl _OV
                                     91 	.globl _F1
                                     92 	.globl _P
                                     93 	.globl _PS
                                     94 	.globl _PT1
                                     95 	.globl _PX1
                                     96 	.globl _PT0
                                     97 	.globl _PX0
                                     98 	.globl _RD
                                     99 	.globl _WR
                                    100 	.globl _T1
                                    101 	.globl _T0
                                    102 	.globl _INT1
                                    103 	.globl _INT0
                                    104 	.globl _TXD
                                    105 	.globl _RXD
                                    106 	.globl _P3_7
                                    107 	.globl _P3_6
                                    108 	.globl _P3_5
                                    109 	.globl _P3_4
                                    110 	.globl _P3_3
                                    111 	.globl _P3_2
                                    112 	.globl _P3_1
                                    113 	.globl _P3_0
                                    114 	.globl _EA
                                    115 	.globl _ES
                                    116 	.globl _ET1
                                    117 	.globl _EX1
                                    118 	.globl _ET0
                                    119 	.globl _EX0
                                    120 	.globl _P2_7
                                    121 	.globl _P2_6
                                    122 	.globl _P2_5
                                    123 	.globl _P2_4
                                    124 	.globl _P2_3
                                    125 	.globl _P2_2
                                    126 	.globl _P2_1
                                    127 	.globl _P2_0
                                    128 	.globl _SM0
                                    129 	.globl _SM1
                                    130 	.globl _SM2
                                    131 	.globl _REN
                                    132 	.globl _TB8
                                    133 	.globl _RB8
                                    134 	.globl _TI
                                    135 	.globl _RI
                                    136 	.globl _P1_7
                                    137 	.globl _P1_6
                                    138 	.globl _P1_5
                                    139 	.globl _P1_4
                                    140 	.globl _P1_3
                                    141 	.globl _P1_2
                                    142 	.globl _P1_1
                                    143 	.globl _P1_0
                                    144 	.globl _TF1
                                    145 	.globl _TR1
                                    146 	.globl _TF0
                                    147 	.globl _TR0
                                    148 	.globl _IE1
                                    149 	.globl _IT1
                                    150 	.globl _IE0
                                    151 	.globl _IT0
                                    152 	.globl _P0_7
                                    153 	.globl _P0_6
                                    154 	.globl _P0_5
                                    155 	.globl _P0_4
                                    156 	.globl _P0_3
                                    157 	.globl _P0_2
                                    158 	.globl _P0_1
                                    159 	.globl _P0_0
                                    160 	.globl _IAP_CONTR
                                    161 	.globl _IAP_TRIG
                                    162 	.globl _IAP_CMD
                                    163 	.globl _IAP_ADDRL
                                    164 	.globl _IAP_ADDRH
                                    165 	.globl _IAP_DATA
                                    166 	.globl _SPDAT
                                    167 	.globl _SPSTAT
                                    168 	.globl _SPCTL
                                    169 	.globl _ADC_RESL
                                    170 	.globl _ADC_RES
                                    171 	.globl _ADC_CONTR
                                    172 	.globl _P1ASF
                                    173 	.globl _PCA_PWM1
                                    174 	.globl _PCA_PWM0
                                    175 	.globl _CCAP1H
                                    176 	.globl _CCAP1L
                                    177 	.globl _CCAP0H
                                    178 	.globl _CCAP0L
                                    179 	.globl _CCAPM1
                                    180 	.globl _CCAPM0
                                    181 	.globl _CH
                                    182 	.globl _CL
                                    183 	.globl _CMOD
                                    184 	.globl _CCON
                                    185 	.globl _WDT_CONTR
                                    186 	.globl _BRT
                                    187 	.globl _S2BUF
                                    188 	.globl _S2CON
                                    189 	.globl _SADDR
                                    190 	.globl _SADEN
                                    191 	.globl _P5M1
                                    192 	.globl _P5M0
                                    193 	.globl _P4SW
                                    194 	.globl _P4M1
                                    195 	.globl _P4M0
                                    196 	.globl _P3M1
                                    197 	.globl _P3M0
                                    198 	.globl _P2M1
                                    199 	.globl _P2M0
                                    200 	.globl _P1M1
                                    201 	.globl _P1M0
                                    202 	.globl _P0M1
                                    203 	.globl _P0M0
                                    204 	.globl _P5
                                    205 	.globl _P4
                                    206 	.globl _IP2H
                                    207 	.globl _IP2
                                    208 	.globl _IPH
                                    209 	.globl _IE2
                                    210 	.globl _BUS_SPEED
                                    211 	.globl _CLK_DIV
                                    212 	.globl _WAKE_CLKO
                                    213 	.globl _AUXR1
                                    214 	.globl _AUXR
                                    215 	.globl _B
                                    216 	.globl _ACC
                                    217 	.globl _PSW
                                    218 	.globl _IP
                                    219 	.globl _P3
                                    220 	.globl _IE
                                    221 	.globl _P2
                                    222 	.globl _SBUF
                                    223 	.globl _SCON
                                    224 	.globl _P1
                                    225 	.globl _TH1
                                    226 	.globl _TH0
                                    227 	.globl _TL1
                                    228 	.globl _TL0
                                    229 	.globl _TMOD
                                    230 	.globl _TCON
                                    231 	.globl _PCON
                                    232 	.globl _DPH
                                    233 	.globl _DPL
                                    234 	.globl _SP
                                    235 	.globl _P0
                                    236 	.globl _display
                                    237 	.globl _tranoutchar_PARM_2
                                    238 	.globl _trans_PARM_2
                                    239 	.globl _roll_3_xy_PARM_2
                                    240 	.globl _roll_apeak_xy_PARM_2
                                    241 	.globl _roll_apeak_yz_PARM_2
                                    242 	.globl _boxtola_PARM_2
                                    243 	.globl _poke_PARM_3
                                    244 	.globl _poke_PARM_2
                                    245 	.globl _box_apeak_xy_PARM_8
                                    246 	.globl _box_apeak_xy_PARM_7
                                    247 	.globl _box_apeak_xy_PARM_6
                                    248 	.globl _box_apeak_xy_PARM_5
                                    249 	.globl _box_apeak_xy_PARM_4
                                    250 	.globl _box_apeak_xy_PARM_3
                                    251 	.globl _box_apeak_xy_PARM_2
                                    252 	.globl _box_PARM_8
                                    253 	.globl _box_PARM_7
                                    254 	.globl _box_PARM_6
                                    255 	.globl _box_PARM_5
                                    256 	.globl _box_PARM_4
                                    257 	.globl _box_PARM_3
                                    258 	.globl _box_PARM_2
                                    259 	.globl _line_PARM_7
                                    260 	.globl _line_PARM_6
                                    261 	.globl _line_PARM_5
                                    262 	.globl _line_PARM_4
                                    263 	.globl _line_PARM_3
                                    264 	.globl _line_PARM_2
                                    265 	.globl _cirp_PARM_3
                                    266 	.globl _cirp_PARM_2
                                    267 ;--------------------------------------------------------
                                    268 ; special function registers
                                    269 ;--------------------------------------------------------
                                    270 	.area RSEG    (ABS,DATA)
      000000                        271 	.org 0x0000
                           000080   272 _P0	=	0x0080
                           000081   273 _SP	=	0x0081
                           000082   274 _DPL	=	0x0082
                           000083   275 _DPH	=	0x0083
                           000087   276 _PCON	=	0x0087
                           000088   277 _TCON	=	0x0088
                           000089   278 _TMOD	=	0x0089
                           00008A   279 _TL0	=	0x008a
                           00008B   280 _TL1	=	0x008b
                           00008C   281 _TH0	=	0x008c
                           00008D   282 _TH1	=	0x008d
                           000090   283 _P1	=	0x0090
                           000098   284 _SCON	=	0x0098
                           000099   285 _SBUF	=	0x0099
                           0000A0   286 _P2	=	0x00a0
                           0000A8   287 _IE	=	0x00a8
                           0000B0   288 _P3	=	0x00b0
                           0000B8   289 _IP	=	0x00b8
                           0000D0   290 _PSW	=	0x00d0
                           0000E0   291 _ACC	=	0x00e0
                           0000F0   292 _B	=	0x00f0
                           00008E   293 _AUXR	=	0x008e
                           0000A2   294 _AUXR1	=	0x00a2
                           00008F   295 _WAKE_CLKO	=	0x008f
                           000097   296 _CLK_DIV	=	0x0097
                           0000A1   297 _BUS_SPEED	=	0x00a1
                           0000AF   298 _IE2	=	0x00af
                           0000B7   299 _IPH	=	0x00b7
                           0000B5   300 _IP2	=	0x00b5
                           0000B6   301 _IP2H	=	0x00b6
                           0000C0   302 _P4	=	0x00c0
                           0000C8   303 _P5	=	0x00c8
                           000094   304 _P0M0	=	0x0094
                           000093   305 _P0M1	=	0x0093
                           000092   306 _P1M0	=	0x0092
                           000091   307 _P1M1	=	0x0091
                           000096   308 _P2M0	=	0x0096
                           000095   309 _P2M1	=	0x0095
                           0000B2   310 _P3M0	=	0x00b2
                           0000B1   311 _P3M1	=	0x00b1
                           0000B4   312 _P4M0	=	0x00b4
                           0000B3   313 _P4M1	=	0x00b3
                           0000BB   314 _P4SW	=	0x00bb
                           0000CA   315 _P5M0	=	0x00ca
                           0000C9   316 _P5M1	=	0x00c9
                           0000B9   317 _SADEN	=	0x00b9
                           0000A9   318 _SADDR	=	0x00a9
                           00009A   319 _S2CON	=	0x009a
                           00009B   320 _S2BUF	=	0x009b
                           00009C   321 _BRT	=	0x009c
                           0000C1   322 _WDT_CONTR	=	0x00c1
                           0000D8   323 _CCON	=	0x00d8
                           0000D9   324 _CMOD	=	0x00d9
                           0000E9   325 _CL	=	0x00e9
                           0000F9   326 _CH	=	0x00f9
                           0000DA   327 _CCAPM0	=	0x00da
                           0000DB   328 _CCAPM1	=	0x00db
                           0000EA   329 _CCAP0L	=	0x00ea
                           0000FA   330 _CCAP0H	=	0x00fa
                           0000EB   331 _CCAP1L	=	0x00eb
                           0000FB   332 _CCAP1H	=	0x00fb
                           0000F2   333 _PCA_PWM0	=	0x00f2
                           0000F3   334 _PCA_PWM1	=	0x00f3
                           00009D   335 _P1ASF	=	0x009d
                           0000BC   336 _ADC_CONTR	=	0x00bc
                           0000BD   337 _ADC_RES	=	0x00bd
                           0000BE   338 _ADC_RESL	=	0x00be
                           0000CE   339 _SPCTL	=	0x00ce
                           0000CD   340 _SPSTAT	=	0x00cd
                           0000CF   341 _SPDAT	=	0x00cf
                           0000C2   342 _IAP_DATA	=	0x00c2
                           0000C3   343 _IAP_ADDRH	=	0x00c3
                           0000C4   344 _IAP_ADDRL	=	0x00c4
                           0000C5   345 _IAP_CMD	=	0x00c5
                           0000C6   346 _IAP_TRIG	=	0x00c6
                           0000C7   347 _IAP_CONTR	=	0x00c7
                                    348 ;--------------------------------------------------------
                                    349 ; special function bits
                                    350 ;--------------------------------------------------------
                                    351 	.area RSEG    (ABS,DATA)
      000000                        352 	.org 0x0000
                           000080   353 _P0_0	=	0x0080
                           000081   354 _P0_1	=	0x0081
                           000082   355 _P0_2	=	0x0082
                           000083   356 _P0_3	=	0x0083
                           000084   357 _P0_4	=	0x0084
                           000085   358 _P0_5	=	0x0085
                           000086   359 _P0_6	=	0x0086
                           000087   360 _P0_7	=	0x0087
                           000088   361 _IT0	=	0x0088
                           000089   362 _IE0	=	0x0089
                           00008A   363 _IT1	=	0x008a
                           00008B   364 _IE1	=	0x008b
                           00008C   365 _TR0	=	0x008c
                           00008D   366 _TF0	=	0x008d
                           00008E   367 _TR1	=	0x008e
                           00008F   368 _TF1	=	0x008f
                           000090   369 _P1_0	=	0x0090
                           000091   370 _P1_1	=	0x0091
                           000092   371 _P1_2	=	0x0092
                           000093   372 _P1_3	=	0x0093
                           000094   373 _P1_4	=	0x0094
                           000095   374 _P1_5	=	0x0095
                           000096   375 _P1_6	=	0x0096
                           000097   376 _P1_7	=	0x0097
                           000098   377 _RI	=	0x0098
                           000099   378 _TI	=	0x0099
                           00009A   379 _RB8	=	0x009a
                           00009B   380 _TB8	=	0x009b
                           00009C   381 _REN	=	0x009c
                           00009D   382 _SM2	=	0x009d
                           00009E   383 _SM1	=	0x009e
                           00009F   384 _SM0	=	0x009f
                           0000A0   385 _P2_0	=	0x00a0
                           0000A1   386 _P2_1	=	0x00a1
                           0000A2   387 _P2_2	=	0x00a2
                           0000A3   388 _P2_3	=	0x00a3
                           0000A4   389 _P2_4	=	0x00a4
                           0000A5   390 _P2_5	=	0x00a5
                           0000A6   391 _P2_6	=	0x00a6
                           0000A7   392 _P2_7	=	0x00a7
                           0000A8   393 _EX0	=	0x00a8
                           0000A9   394 _ET0	=	0x00a9
                           0000AA   395 _EX1	=	0x00aa
                           0000AB   396 _ET1	=	0x00ab
                           0000AC   397 _ES	=	0x00ac
                           0000AF   398 _EA	=	0x00af
                           0000B0   399 _P3_0	=	0x00b0
                           0000B1   400 _P3_1	=	0x00b1
                           0000B2   401 _P3_2	=	0x00b2
                           0000B3   402 _P3_3	=	0x00b3
                           0000B4   403 _P3_4	=	0x00b4
                           0000B5   404 _P3_5	=	0x00b5
                           0000B6   405 _P3_6	=	0x00b6
                           0000B7   406 _P3_7	=	0x00b7
                           0000B0   407 _RXD	=	0x00b0
                           0000B1   408 _TXD	=	0x00b1
                           0000B2   409 _INT0	=	0x00b2
                           0000B3   410 _INT1	=	0x00b3
                           0000B4   411 _T0	=	0x00b4
                           0000B5   412 _T1	=	0x00b5
                           0000B6   413 _WR	=	0x00b6
                           0000B7   414 _RD	=	0x00b7
                           0000B8   415 _PX0	=	0x00b8
                           0000B9   416 _PT0	=	0x00b9
                           0000BA   417 _PX1	=	0x00ba
                           0000BB   418 _PT1	=	0x00bb
                           0000BC   419 _PS	=	0x00bc
                           0000D0   420 _P	=	0x00d0
                           0000D1   421 _F1	=	0x00d1
                           0000D2   422 _OV	=	0x00d2
                           0000D3   423 _RS0	=	0x00d3
                           0000D4   424 _RS1	=	0x00d4
                           0000D5   425 _F0	=	0x00d5
                           0000D6   426 _AC	=	0x00d6
                           0000D7   427 _CY	=	0x00d7
                           0000AE   428 _ELVD	=	0x00ae
                           0000AD   429 _EADC	=	0x00ad
                           0000BF   430 _PPCA	=	0x00bf
                           0000BE   431 _PLVD	=	0x00be
                           0000BD   432 _PADC	=	0x00bd
                           0000C0   433 _P4_0	=	0x00c0
                           0000C1   434 _P4_1	=	0x00c1
                           0000C2   435 _P4_2	=	0x00c2
                           0000C3   436 _P4_3	=	0x00c3
                           0000C4   437 _P4_4	=	0x00c4
                           0000C5   438 _P4_5	=	0x00c5
                           0000C6   439 _P4_6	=	0x00c6
                           0000C7   440 _P4_7	=	0x00c7
                           0000C8   441 _P5_0	=	0x00c8
                           0000C9   442 _P5_1	=	0x00c9
                           0000CA   443 _P5_2	=	0x00ca
                           0000CB   444 _P5_3	=	0x00cb
                           0000DF   445 _CF	=	0x00df
                           0000DE   446 _CR	=	0x00de
                           0000D9   447 _CCF1	=	0x00d9
                           0000D8   448 _CCF0	=	0x00d8
                                    449 ;--------------------------------------------------------
                                    450 ; overlayable register banks
                                    451 ;--------------------------------------------------------
                                    452 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        453 	.ds 8
                                    454 ;--------------------------------------------------------
                                    455 ; overlayable bit register bank
                                    456 ;--------------------------------------------------------
                                    457 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        458 bits:
      000000                        459 	.ds 1
                           008000   460 	b0 = bits[0]
                           008100   461 	b1 = bits[1]
                           008200   462 	b2 = bits[2]
                           008300   463 	b3 = bits[3]
                           008400   464 	b4 = bits[4]
                           008500   465 	b5 = bits[5]
                           008600   466 	b6 = bits[6]
                           008700   467 	b7 = bits[7]
                                    468 ;--------------------------------------------------------
                                    469 ; internal ram data
                                    470 ;--------------------------------------------------------
                                    471 	.area DSEG    (DATA)
      000000                        472 _trailler_speed_1_20:
      000000                        473 	.ds 2
      000002                        474 _cirp_PARM_2:
      000002                        475 	.ds 1
      000003                        476 _cirp_PARM_3:
      000003                        477 	.ds 1
      000004                        478 _line_PARM_2:
      000004                        479 	.ds 1
      000005                        480 _line_PARM_3:
      000005                        481 	.ds 1
      000006                        482 _line_PARM_4:
      000006                        483 	.ds 1
      000007                        484 _line_PARM_5:
      000007                        485 	.ds 1
      000008                        486 _line_PARM_6:
      000008                        487 	.ds 1
      000009                        488 _line_PARM_7:
      000009                        489 	.ds 1
      00000A                        490 _line_t_1_32:
      00000A                        491 	.ds 1
      00000B                        492 _line_b1_1_32:
      00000B                        493 	.ds 1
      00000C                        494 _line_c1_1_32:
      00000C                        495 	.ds 1
      00000D                        496 _box_PARM_2:
      00000D                        497 	.ds 1
      00000E                        498 _box_PARM_3:
      00000E                        499 	.ds 1
      00000F                        500 _box_PARM_4:
      00000F                        501 	.ds 1
      000010                        502 _box_PARM_5:
      000010                        503 	.ds 1
      000011                        504 _box_PARM_6:
      000011                        505 	.ds 1
      000012                        506 _box_PARM_7:
      000012                        507 	.ds 1
      000013                        508 _box_PARM_8:
      000013                        509 	.ds 1
      000014                        510 _box_x1_1_34:
      000014                        511 	.ds 1
      000015                        512 _box_j_1_35:
      000015                        513 	.ds 1
      000016                        514 _box_t_1_35:
      000016                        515 	.ds 1
      000017                        516 _box_apeak_xy_PARM_2:
      000017                        517 	.ds 1
      000018                        518 _box_apeak_xy_PARM_3:
      000018                        519 	.ds 1
      000019                        520 _box_apeak_xy_PARM_4:
      000019                        521 	.ds 1
      00001A                        522 _box_apeak_xy_PARM_5:
      00001A                        523 	.ds 1
      00001B                        524 _box_apeak_xy_PARM_6:
      00001B                        525 	.ds 1
      00001C                        526 _box_apeak_xy_PARM_7:
      00001C                        527 	.ds 1
      00001D                        528 _box_apeak_xy_PARM_8:
      00001D                        529 	.ds 1
      00001E                        530 _poke_PARM_2:
      00001E                        531 	.ds 1
      00001F                        532 _poke_PARM_3:
      00001F                        533 	.ds 1
      000020                        534 _boxtola_PARM_2:
      000020                        535 	.ds 1
      000021                        536 _roll_apeak_yz_PARM_2:
      000021                        537 	.ds 2
      000023                        538 _roll_apeak_xy_PARM_2:
      000023                        539 	.ds 2
      000025                        540 _roll_3_xy_PARM_2:
      000025                        541 	.ds 2
      000027                        542 _trans_PARM_2:
      000027                        543 	.ds 2
      000029                        544 _tranoutchar_PARM_2:
      000029                        545 	.ds 2
      00002B                        546 _tranoutchar_i_1_85:
      00002B                        547 	.ds 1
      00002C                        548 _tranoutchar_k_1_85:
      00002C                        549 	.ds 1
      00002D                        550 _tranoutchar_a_1_85:
      00002D                        551 	.ds 1
      00002E                        552 _tranoutchar_i2_1_85:
      00002E                        553 	.ds 1
      00002F                        554 _tranoutchar_sloc0_1_0:
      00002F                        555 	.ds 2
      000031                        556 _tranoutchar_sloc1_1_0:
      000031                        557 	.ds 2
      000033                        558 _flash_4_an_1_99:
      000033                        559 	.ds 8
      00003B                        560 _flash_5_an_1_106:
      00003B                        561 	.ds 4
      00003F                        562 _flash_6_i_1_123:
      00003F                        563 	.ds 1
      000040                        564 _flash_6_j_1_123:
      000040                        565 	.ds 1
      000041                        566 _flash_6_k_1_123:
      000041                        567 	.ds 1
      000042                        568 _flash_9_i_1_134:
      000042                        569 	.ds 1
      000043                        570 _flash_9_j_1_134:
      000043                        571 	.ds 1
      000044                        572 _flash_9_an_1_134:
      000044                        573 	.ds 8
      00004C                        574 _flash_9_y_1_134:
      00004C                        575 	.ds 1
      00004D                        576 _flash_9_sloc0_1_0:
      00004D                        577 	.ds 2
      00004F                        578 _flash_9_sloc1_1_0:
      00004F                        579 	.ds 2
      000051                        580 _flash_9_sloc2_1_0:
      000051                        581 	.ds 1
      000052                        582 _flash_10_i_1_153:
      000052                        583 	.ds 1
      000053                        584 _flash_10_an_1_153:
      000053                        585 	.ds 4
      000057                        586 _print_layer_1_174:
      000057                        587 	.ds 1
                                    588 ;--------------------------------------------------------
                                    589 ; overlayable items in internal ram 
                                    590 ;--------------------------------------------------------
                                    591 	.area	OSEG    (OVR,DATA)
                                    592 	.area	OSEG    (OVR,DATA)
      000000                        593 _judgebit_PARM_2:
      000000                        594 	.ds 1
                                    595 	.area	OSEG    (OVR,DATA)
                                    596 	.area	OSEG    (OVR,DATA)
                                    597 	.area	OSEG    (OVR,DATA)
      000000                        598 _max_PARM_2:
      000000                        599 	.ds 3
                                    600 	.area	OSEG    (OVR,DATA)
      000000                        601 _maxt_PARM_2:
      000000                        602 	.ds 1
      000001                        603 _maxt_PARM_3:
      000001                        604 	.ds 1
                                    605 	.area	OSEG    (OVR,DATA)
                                    606 	.area	OSEG    (OVR,DATA)
      000000                        607 _point_PARM_2:
      000000                        608 	.ds 1
      000001                        609 _point_PARM_3:
      000001                        610 	.ds 1
      000002                        611 _point_PARM_4:
      000002                        612 	.ds 1
                                    613 	.area	OSEG    (OVR,DATA)
      000000                        614 _type_PARM_2:
      000000                        615 	.ds 1
                                    616 	.area	OSEG    (OVR,DATA)
                                    617 ;--------------------------------------------------------
                                    618 ; Stack segment in internal ram 
                                    619 ;--------------------------------------------------------
                                    620 	.area	SSEG
      000000                        621 __start__stack:
      000000                        622 	.ds	1
                                    623 
                                    624 ;--------------------------------------------------------
                                    625 ; indirectly addressable internal ram data
                                    626 ;--------------------------------------------------------
                                    627 	.area ISEG    (DATA)
                                    628 ;--------------------------------------------------------
                                    629 ; absolute internal ram data
                                    630 ;--------------------------------------------------------
                                    631 	.area IABS    (ABS,DATA)
                                    632 	.area IABS    (ABS,DATA)
                                    633 ;--------------------------------------------------------
                                    634 ; bit data
                                    635 ;--------------------------------------------------------
                                    636 	.area BSEG    (BIT)
      000000                        637 _boxtola_sloc0_1_0:
      000000                        638 	.ds 1
      000001                        639 _flash_4_sloc0_1_0:
      000001                        640 	.ds 1
                                    641 ;--------------------------------------------------------
                                    642 ; paged external ram data
                                    643 ;--------------------------------------------------------
                                    644 	.area PSEG    (PAG,XDATA)
                                    645 ;--------------------------------------------------------
                                    646 ; external ram data
                                    647 ;--------------------------------------------------------
                                    648 	.area XSEG    (XDATA)
      000000                        649 _display::
      000000                        650 	.ds 64
                                    651 ;--------------------------------------------------------
                                    652 ; absolute external ram data
                                    653 ;--------------------------------------------------------
                                    654 	.area XABS    (ABS,XDATA)
                                    655 ;--------------------------------------------------------
                                    656 ; external initialized ram data
                                    657 ;--------------------------------------------------------
                                    658 	.area XISEG   (XDATA)
                                    659 	.area HOME    (CODE)
                                    660 	.area GSINIT0 (CODE)
                                    661 	.area GSINIT1 (CODE)
                                    662 	.area GSINIT2 (CODE)
                                    663 	.area GSINIT3 (CODE)
                                    664 	.area GSINIT4 (CODE)
                                    665 	.area GSINIT5 (CODE)
                                    666 	.area GSINIT  (CODE)
                                    667 	.area GSFINAL (CODE)
                                    668 	.area CSEG    (CODE)
                                    669 ;--------------------------------------------------------
                                    670 ; interrupt vector 
                                    671 ;--------------------------------------------------------
                                    672 	.area HOME    (CODE)
      000000                        673 __interrupt_vect:
      000000 02r00r00         [24]  674 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  675 	reti
      000004                        676 	.ds	7
      00000B 02r28r2A         [24]  677 	ljmp	_print
                                    678 ;--------------------------------------------------------
                                    679 ; global & static initialisations
                                    680 ;--------------------------------------------------------
                                    681 	.area HOME    (CODE)
                                    682 	.area GSINIT  (CODE)
                                    683 	.area GSFINAL (CODE)
                                    684 	.area GSINIT  (CODE)
                                    685 	.globl __sdcc_gsinit_startup
                                    686 	.globl __sdcc_program_startup
                                    687 	.globl __start__stack
                                    688 	.globl __mcs51_genXINIT
                                    689 	.globl __mcs51_genXRAMCLEAR
                                    690 	.globl __mcs51_genRAMCLEAR
                                    691 ;------------------------------------------------------------
                                    692 ;Allocation info for local variables in function 'print'
                                    693 ;------------------------------------------------------------
                                    694 ;layer                     Allocated with name '_print_layer_1_174'
                                    695 ;i                         Allocated to registers r7 
                                    696 ;------------------------------------------------------------
                                    697 ;	888n.c:1100: static uchar layer=0;
      000000 75*57 00         [24]  698 	mov	_print_layer_1_174,#0x00
                                    699 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  700 	ljmp	__sdcc_program_startup
                                    701 ;--------------------------------------------------------
                                    702 ; Home
                                    703 ;--------------------------------------------------------
                                    704 	.area HOME    (CODE)
                                    705 	.area HOME    (CODE)
      00000E                        706 __sdcc_program_startup:
      00000E 02r27rDD         [24]  707 	ljmp	_main
                                    708 ;	return from main will return to caller
                                    709 ;--------------------------------------------------------
                                    710 ; code
                                    711 ;--------------------------------------------------------
                                    712 	.area CSEG    (CODE)
                                    713 ;------------------------------------------------------------
                                    714 ;Allocation info for local variables in function 'sinter'
                                    715 ;------------------------------------------------------------
                                    716 ;	888n.c:58: void sinter()
                                    717 ;	-----------------------------------------
                                    718 ;	 function sinter
                                    719 ;	-----------------------------------------
      000000                        720 _sinter:
                           000007   721 	ar7 = 0x07
                           000006   722 	ar6 = 0x06
                           000005   723 	ar5 = 0x05
                           000004   724 	ar4 = 0x04
                           000003   725 	ar3 = 0x03
                           000002   726 	ar2 = 0x02
                           000001   727 	ar1 = 0x01
                           000000   728 	ar0 = 0x00
                                    729 ;	888n.c:60: IE=0x82;
      000000 75 A8 82         [24]  730 	mov	_IE,#0x82
                                    731 ;	888n.c:61: TCON=0x01;
      000003 75 88 01         [24]  732 	mov	_TCON,#0x01
                                    733 ;	888n.c:62: TH0=0xc0;
      000006 75 8C C0         [24]  734 	mov	_TH0,#0xc0
                                    735 ;	888n.c:63: TL0=0;
      000009 75 8A 00         [24]  736 	mov	_TL0,#0x00
                                    737 ;	888n.c:64: TR0=1;
      00000C D2 8C            [12]  738 	setb	_TR0
      00000E 22               [24]  739 	ret
                                    740 ;------------------------------------------------------------
                                    741 ;Allocation info for local variables in function 'delay5us'
                                    742 ;------------------------------------------------------------
                                    743 ;a                         Allocated to registers r6 
                                    744 ;b                         Allocated to registers r7 
                                    745 ;------------------------------------------------------------
                                    746 ;	888n.c:67: void delay5us(void)   // -0.026765046296us STC 1T 22.1184Mhz
                                    747 ;	-----------------------------------------
                                    748 ;	 function delay5us
                                    749 ;	-----------------------------------------
      00000F                        750 _delay5us:
                                    751 ;	888n.c:71: for(b=7;b>0;b--)
      00000F 7F 07            [12]  752 	mov	r7,#0x07
      000011                        753 00105$:
                                    754 ;	888n.c:72: for(a=2;a>0;a--);
      000011 7E 02            [12]  755 	mov	r6,#0x02
      000013                        756 00104$:
      000013 EE               [12]  757 	mov	a,r6
      000014 14               [12]  758 	dec	a
      000015 FD               [12]  759 	mov	r5,a
      000016 FE               [12]  760 	mov	r6,a
      000017 70 FA            [24]  761 	jnz	00104$
                                    762 ;	888n.c:71: for(b=7;b>0;b--)
      000019 EF               [12]  763 	mov	a,r7
      00001A 14               [12]  764 	dec	a
      00001B FE               [12]  765 	mov	r6,a
      00001C FF               [12]  766 	mov	r7,a
      00001D 70 F2            [24]  767 	jnz	00105$
      00001F 22               [24]  768 	ret
                                    769 ;------------------------------------------------------------
                                    770 ;Allocation info for local variables in function 'delay'
                                    771 ;------------------------------------------------------------
                                    772 ;i                         Allocated to registers 
                                    773 ;------------------------------------------------------------
                                    774 ;	888n.c:75: void delay(uint i)
                                    775 ;	-----------------------------------------
                                    776 ;	 function delay
                                    777 ;	-----------------------------------------
      000020                        778 _delay:
      000020 AE 82            [24]  779 	mov	r6,dpl
      000022 AF 83            [24]  780 	mov	r7,dph
                                    781 ;	888n.c:78: while (i--) {
      000024                        782 00101$:
      000024 8E 04            [24]  783 	mov	ar4,r6
      000026 8F 05            [24]  784 	mov	ar5,r7
      000028 1E               [12]  785 	dec	r6
      000029 BE FF 01         [24]  786 	cjne	r6,#0xff,00113$
      00002C 1F               [12]  787 	dec	r7
      00002D                        788 00113$:
      00002D EC               [12]  789 	mov	a,r4
      00002E 4D               [12]  790 	orl	a,r5
      00002F 60 0D            [24]  791 	jz	00104$
                                    792 ;	888n.c:79: delay5us();
      000031 C0 07            [24]  793 	push	ar7
      000033 C0 06            [24]  794 	push	ar6
      000035 12r00r0F         [24]  795 	lcall	_delay5us
      000038 D0 06            [24]  796 	pop	ar6
      00003A D0 07            [24]  797 	pop	ar7
      00003C 80 E6            [24]  798 	sjmp	00101$
      00003E                        799 00104$:
      00003E 22               [24]  800 	ret
                                    801 ;------------------------------------------------------------
                                    802 ;Allocation info for local variables in function 'judgebit'
                                    803 ;------------------------------------------------------------
                                    804 ;b                         Allocated with name '_judgebit_PARM_2'
                                    805 ;num                       Allocated to registers r7 
                                    806 ;------------------------------------------------------------
                                    807 ;	888n.c:84: uchar judgebit(uchar num, uchar b)
                                    808 ;	-----------------------------------------
                                    809 ;	 function judgebit
                                    810 ;	-----------------------------------------
      00003F                        811 _judgebit:
      00003F AF 82            [24]  812 	mov	r7,dpl
                                    813 ;	888n.c:86: num = num & (1<<b);      
      000041 85*00 F0         [24]  814 	mov	b,_judgebit_PARM_2
      000044 05 F0            [12]  815 	inc	b
      000046 74 01            [12]  816 	mov	a,#0x01
      000048 80 02            [24]  817 	sjmp	00110$
      00004A                        818 00108$:
      00004A 25 E0            [12]  819 	add	a,acc
      00004C                        820 00110$:
      00004C D5 F0 FB         [24]  821 	djnz	b,00108$
      00004F FE               [12]  822 	mov	r6,a
      000050 5F               [12]  823 	anl	a,r7
                                    824 ;	888n.c:87: return num ? 1 : 0;
      000051 60 04            [24]  825 	jz	00103$
      000053 7F 01            [12]  826 	mov	r7,#0x01
      000055 80 02            [24]  827 	sjmp	00104$
      000057                        828 00103$:
      000057 7F 00            [12]  829 	mov	r7,#0x00
      000059                        830 00104$:
      000059 8F 82            [24]  831 	mov	dpl,r7
      00005B 22               [24]  832 	ret
                                    833 ;------------------------------------------------------------
                                    834 ;Allocation info for local variables in function 'abs'
                                    835 ;------------------------------------------------------------
                                    836 ;a                         Allocated to registers r7 
                                    837 ;b                         Allocated to registers r6 
                                    838 ;------------------------------------------------------------
                                    839 ;	888n.c:92: uchar abs(uchar a)
                                    840 ;	-----------------------------------------
                                    841 ;	 function abs
                                    842 ;	-----------------------------------------
      00005C                        843 _abs:
      00005C AF 82            [24]  844 	mov	r7,dpl
                                    845 ;	888n.c:96: b=a/10;
      00005E 75 F0 0A         [24]  846 	mov	b,#0x0a
      000061 EF               [12]  847 	mov	a,r7
      000062 84               [48]  848 	div	ab
                                    849 ;	888n.c:97: a=a-b*10;
      000063 FE               [12]  850 	mov	r6,a
      000064 75 F0 0A         [24]  851 	mov	b,#0x0a
      000067 A4               [48]  852 	mul	ab
      000068 D3               [12]  853 	setb	c
      000069 9F               [12]  854 	subb	a,r7
      00006A F4               [12]  855 	cpl	a
      00006B FF               [12]  856 	mov	r7,a
                                    857 ;	888n.c:99: if (a >= 5) b++;
      00006C BF 05 00         [24]  858 	cjne	r7,#0x05,00108$
      00006F                        859 00108$:
      00006F 40 01            [24]  860 	jc	00102$
      000071 0E               [12]  861 	inc	r6
      000072                        862 00102$:
                                    863 ;	888n.c:101: return b;
      000072 8E 82            [24]  864 	mov	dpl,r6
      000074 22               [24]  865 	ret
                                    866 ;------------------------------------------------------------
                                    867 ;Allocation info for local variables in function 'abss'
                                    868 ;------------------------------------------------------------
                                    869 ;a                         Allocated to registers r7 
                                    870 ;------------------------------------------------------------
                                    871 ;	888n.c:105: uchar abss(char a)
                                    872 ;	-----------------------------------------
                                    873 ;	 function abss
                                    874 ;	-----------------------------------------
      000075                        875 _abss:
                                    876 ;	888n.c:107: if (a < 0) a=-a;
      000075 E5 82            [12]  877 	mov	a,dpl
      000077 FF               [12]  878 	mov	r7,a
      000078 30 E7 04         [24]  879 	jnb	acc.7,00102$
      00007B C3               [12]  880 	clr	c
      00007C E4               [12]  881 	clr	a
      00007D 9F               [12]  882 	subb	a,r7
      00007E FF               [12]  883 	mov	r7,a
      00007F                        884 00102$:
                                    885 ;	888n.c:108: return a;
      00007F 8F 82            [24]  886 	mov	dpl,r7
      000081 22               [24]  887 	ret
                                    888 ;------------------------------------------------------------
                                    889 ;Allocation info for local variables in function 'max'
                                    890 ;------------------------------------------------------------
                                    891 ;b                         Allocated with name '_max_PARM_2'
                                    892 ;a                         Allocated to registers r5 r6 r7 
                                    893 ;t                         Allocated to registers 
                                    894 ;------------------------------------------------------------
                                    895 ;	888n.c:113: void max(uchar *a, uchar *b)
                                    896 ;	-----------------------------------------
                                    897 ;	 function max
                                    898 ;	-----------------------------------------
      000082                        899 _max:
                                    900 ;	888n.c:117: if ((*a) > (*b)) {
      000082 AD 82            [24]  901 	mov	r5,dpl
      000084 AE 83            [24]  902 	mov	r6,dph
      000086 AF F0            [24]  903 	mov	r7,b
      000088 12r00r00         [24]  904 	lcall	__gptrget
      00008B FC               [12]  905 	mov	r4,a
      00008C A9*00            [24]  906 	mov	r1,_max_PARM_2
      00008E AA*01            [24]  907 	mov	r2,(_max_PARM_2 + 1)
      000090 AB*02            [24]  908 	mov	r3,(_max_PARM_2 + 2)
      000092 89 82            [24]  909 	mov	dpl,r1
      000094 8A 83            [24]  910 	mov	dph,r2
      000096 8B F0            [24]  911 	mov	b,r3
      000098 12r00r00         [24]  912 	lcall	__gptrget
      00009B F8               [12]  913 	mov	r0,a
      00009C C3               [12]  914 	clr	c
      00009D 9C               [12]  915 	subb	a,r4
      00009E 50 14            [24]  916 	jnc	00103$
                                    917 ;	888n.c:119: (*a) = (*b);
      0000A0 8D 82            [24]  918 	mov	dpl,r5
      0000A2 8E 83            [24]  919 	mov	dph,r6
      0000A4 8F F0            [24]  920 	mov	b,r7
      0000A6 E8               [12]  921 	mov	a,r0
      0000A7 12r00r00         [24]  922 	lcall	__gptrput
                                    923 ;	888n.c:120: (*b) = t;   
      0000AA 89 82            [24]  924 	mov	dpl,r1
      0000AC 8A 83            [24]  925 	mov	dph,r2
      0000AE 8B F0            [24]  926 	mov	b,r3
      0000B0 EC               [12]  927 	mov	a,r4
      0000B1 02r00r00         [24]  928 	ljmp	__gptrput
      0000B4                        929 00103$:
      0000B4 22               [24]  930 	ret
                                    931 ;------------------------------------------------------------
                                    932 ;Allocation info for local variables in function 'maxt'
                                    933 ;------------------------------------------------------------
                                    934 ;b                         Allocated with name '_maxt_PARM_2'
                                    935 ;c                         Allocated with name '_maxt_PARM_3'
                                    936 ;a                         Allocated to registers r7 
                                    937 ;------------------------------------------------------------
                                    938 ;	888n.c:125: uchar maxt(uchar a, uchar b, uchar c)
                                    939 ;	-----------------------------------------
                                    940 ;	 function maxt
                                    941 ;	-----------------------------------------
      0000B5                        942 _maxt:
      0000B5 AF 82            [24]  943 	mov	r7,dpl
                                    944 ;	888n.c:127: if (a < b) a = b;
      0000B7 C3               [12]  945 	clr	c
      0000B8 EF               [12]  946 	mov	a,r7
      0000B9 95*00            [12]  947 	subb	a,_maxt_PARM_2
      0000BB 50 02            [24]  948 	jnc	00102$
      0000BD AF*00            [24]  949 	mov	r7,_maxt_PARM_2
      0000BF                        950 00102$:
                                    951 ;	888n.c:128: if (a < c) a = c;
      0000BF C3               [12]  952 	clr	c
      0000C0 EF               [12]  953 	mov	a,r7
      0000C1 95*01            [12]  954 	subb	a,_maxt_PARM_3
      0000C3 50 02            [24]  955 	jnc	00104$
      0000C5 AF*01            [24]  956 	mov	r7,_maxt_PARM_3
      0000C7                        957 00104$:
                                    958 ;	888n.c:130: return a;
      0000C7 8F 82            [24]  959 	mov	dpl,r7
      0000C9 22               [24]  960 	ret
                                    961 ;------------------------------------------------------------
                                    962 ;Allocation info for local variables in function 'clear'
                                    963 ;------------------------------------------------------------
                                    964 ;le                        Allocated to registers r7 
                                    965 ;i                         Allocated to registers r3 
                                    966 ;j                         Allocated to registers r6 
                                    967 ;------------------------------------------------------------
                                    968 ;	888n.c:133: void clear(char le)
                                    969 ;	-----------------------------------------
                                    970 ;	 function clear
                                    971 ;	-----------------------------------------
      0000CA                        972 _clear:
      0000CA AF 82            [24]  973 	mov	r7,dpl
                                    974 ;	888n.c:137: for (j=0; j<8; j++) for (i=0; i<8; i++) display[j][i] = le;
      0000CC 7E 00            [12]  975 	mov	r6,#0x00
      0000CE                        976 00109$:
      0000CE EE               [12]  977 	mov	a,r6
      0000CF 75 F0 08         [24]  978 	mov	b,#0x08
      0000D2 A4               [48]  979 	mul	ab
      0000D3 FC               [12]  980 	mov	r4,a
      0000D4 AD F0            [24]  981 	mov	r5,b
      0000D6 7B 00            [12]  982 	mov	r3,#0x00
      0000D8                        983 00103$:
      0000D8 EC               [12]  984 	mov	a,r4
      0000D9 24r00            [12]  985 	add	a,#_display
      0000DB F9               [12]  986 	mov	r1,a
      0000DC ED               [12]  987 	mov	a,r5
      0000DD 34s00            [12]  988 	addc	a,#(_display >> 8)
      0000DF FA               [12]  989 	mov	r2,a
      0000E0 EB               [12]  990 	mov	a,r3
      0000E1 29               [12]  991 	add	a,r1
      0000E2 F5 82            [12]  992 	mov	dpl,a
      0000E4 E4               [12]  993 	clr	a
      0000E5 3A               [12]  994 	addc	a,r2
      0000E6 F5 83            [12]  995 	mov	dph,a
      0000E8 EF               [12]  996 	mov	a,r7
      0000E9 F0               [24]  997 	movx	@dptr,a
      0000EA 0B               [12]  998 	inc	r3
      0000EB BB 08 00         [24]  999 	cjne	r3,#0x08,00120$
      0000EE                       1000 00120$:
      0000EE 40 E8            [24] 1001 	jc	00103$
      0000F0 0E               [12] 1002 	inc	r6
      0000F1 BE 08 00         [24] 1003 	cjne	r6,#0x08,00122$
      0000F4                       1004 00122$:
      0000F4 40 D8            [24] 1005 	jc	00109$
      0000F6 22               [24] 1006 	ret
                                   1007 ;------------------------------------------------------------
                                   1008 ;Allocation info for local variables in function 'trailler'
                                   1009 ;------------------------------------------------------------
                                   1010 ;speed                     Allocated with name '_trailler_speed_1_20'
                                   1011 ;i                         Allocated to registers r5 
                                   1012 ;j                         Allocated to registers r3 
                                   1013 ;------------------------------------------------------------
                                   1014 ;	888n.c:140: void trailler(uint speed)
                                   1015 ;	-----------------------------------------
                                   1016 ;	 function trailler
                                   1017 ;	-----------------------------------------
      0000F7                       1018 _trailler:
      0000F7 85 82*00         [24] 1019 	mov	_trailler_speed_1_20,dpl
      0000FA 85 83*01         [24] 1020 	mov	(_trailler_speed_1_20 + 1),dph
                                   1021 ;	888n.c:144: for (i=6; i>=-3; i--) {
      0000FD 7D 06            [12] 1022 	mov	r5,#0x06
      0000FF                       1023 00112$:
                                   1024 ;	888n.c:145: if (i >= 0) {
      0000FF ED               [12] 1025 	mov	a,r5
      000100 20 E7 50         [24] 1026 	jb	acc.7,00103$
                                   1027 ;	888n.c:146: for (j=0;j<8;j++) display[j][i] = display[j][i+1];
      000103 ED               [12] 1028 	mov	a,r5
      000104 04               [12] 1029 	inc	a
      000105 FC               [12] 1030 	mov	r4,a
      000106 7B 00            [12] 1031 	mov	r3,#0x00
      000108                       1032 00108$:
      000108 C2 D5            [12] 1033 	clr	F0
      00010A 75 F0 08         [24] 1034 	mov	b,#0x08
      00010D EB               [12] 1035 	mov	a,r3
      00010E 30 E7 04         [24] 1036 	jnb	acc.7,00135$
      000111 B2 D5            [12] 1037 	cpl	F0
      000113 F4               [12] 1038 	cpl	a
      000114 04               [12] 1039 	inc	a
      000115                       1040 00135$:
      000115 A4               [48] 1041 	mul	ab
      000116 30 D5 0A         [24] 1042 	jnb	F0,00136$
      000119 F4               [12] 1043 	cpl	a
      00011A 24 01            [12] 1044 	add	a,#0x01
      00011C C5 F0            [12] 1045 	xch	a,b
      00011E F4               [12] 1046 	cpl	a
      00011F 34 00            [12] 1047 	addc	a,#0x00
      000121 C5 F0            [12] 1048 	xch	a,b
      000123                       1049 00136$:
      000123 F9               [12] 1050 	mov	r1,a
      000124 AA F0            [24] 1051 	mov	r2,b
      000126 24r00            [12] 1052 	add	a,#_display
      000128 F8               [12] 1053 	mov	r0,a
      000129 EA               [12] 1054 	mov	a,r2
      00012A 34s00            [12] 1055 	addc	a,#(_display >> 8)
      00012C FF               [12] 1056 	mov	r7,a
      00012D ED               [12] 1057 	mov	a,r5
      00012E 28               [12] 1058 	add	a,r0
      00012F F8               [12] 1059 	mov	r0,a
      000130 E4               [12] 1060 	clr	a
      000131 3F               [12] 1061 	addc	a,r7
      000132 FF               [12] 1062 	mov	r7,a
      000133 E9               [12] 1063 	mov	a,r1
      000134 24r00            [12] 1064 	add	a,#_display
      000136 F9               [12] 1065 	mov	r1,a
      000137 EA               [12] 1066 	mov	a,r2
      000138 34s00            [12] 1067 	addc	a,#(_display >> 8)
      00013A FA               [12] 1068 	mov	r2,a
      00013B EC               [12] 1069 	mov	a,r4
      00013C 29               [12] 1070 	add	a,r1
      00013D F5 82            [12] 1071 	mov	dpl,a
      00013F E4               [12] 1072 	clr	a
      000140 3A               [12] 1073 	addc	a,r2
      000141 F5 83            [12] 1074 	mov	dph,a
      000143 E0               [24] 1075 	movx	a,@dptr
      000144 FE               [12] 1076 	mov	r6,a
      000145 88 82            [24] 1077 	mov	dpl,r0
      000147 8F 83            [24] 1078 	mov	dph,r7
      000149 F0               [24] 1079 	movx	@dptr,a
      00014A 0B               [12] 1080 	inc	r3
      00014B C3               [12] 1081 	clr	c
      00014C EB               [12] 1082 	mov	a,r3
      00014D 64 80            [12] 1083 	xrl	a,#0x80
      00014F 94 88            [12] 1084 	subb	a,#0x88
      000151 40 B5            [24] 1085 	jc	00108$
      000153                       1086 00103$:
                                   1087 ;	888n.c:149: if (i<4) for (j=0;j<8;j++) display[j][i+4]=0;
      000153 C3               [12] 1088 	clr	c
      000154 ED               [12] 1089 	mov	a,r5
      000155 64 80            [12] 1090 	xrl	a,#0x80
      000157 94 84            [12] 1091 	subb	a,#0x84
      000159 50 3C            [24] 1092 	jnc	00106$
      00015B 74 04            [12] 1093 	mov	a,#0x04
      00015D 2D               [12] 1094 	add	a,r5
      00015E FF               [12] 1095 	mov	r7,a
      00015F 7E 00            [12] 1096 	mov	r6,#0x00
      000161                       1097 00110$:
      000161 C2 D5            [12] 1098 	clr	F0
      000163 75 F0 08         [24] 1099 	mov	b,#0x08
      000166 EE               [12] 1100 	mov	a,r6
      000167 30 E7 04         [24] 1101 	jnb	acc.7,00139$
      00016A B2 D5            [12] 1102 	cpl	F0
      00016C F4               [12] 1103 	cpl	a
      00016D 04               [12] 1104 	inc	a
      00016E                       1105 00139$:
      00016E A4               [48] 1106 	mul	ab
      00016F 30 D5 0A         [24] 1107 	jnb	F0,00140$
      000172 F4               [12] 1108 	cpl	a
      000173 24 01            [12] 1109 	add	a,#0x01
      000175 C5 F0            [12] 1110 	xch	a,b
      000177 F4               [12] 1111 	cpl	a
      000178 34 00            [12] 1112 	addc	a,#0x00
      00017A C5 F0            [12] 1113 	xch	a,b
      00017C                       1114 00140$:
      00017C 24r00            [12] 1115 	add	a,#_display
      00017E FB               [12] 1116 	mov	r3,a
      00017F 74s00            [12] 1117 	mov	a,#(_display >> 8)
      000181 35 F0            [12] 1118 	addc	a,b
      000183 FC               [12] 1119 	mov	r4,a
      000184 EF               [12] 1120 	mov	a,r7
      000185 2B               [12] 1121 	add	a,r3
      000186 F5 82            [12] 1122 	mov	dpl,a
      000188 E4               [12] 1123 	clr	a
      000189 3C               [12] 1124 	addc	a,r4
      00018A F5 83            [12] 1125 	mov	dph,a
      00018C E4               [12] 1126 	clr	a
      00018D F0               [24] 1127 	movx	@dptr,a
      00018E 0E               [12] 1128 	inc	r6
      00018F C3               [12] 1129 	clr	c
      000190 EE               [12] 1130 	mov	a,r6
      000191 64 80            [12] 1131 	xrl	a,#0x80
      000193 94 88            [12] 1132 	subb	a,#0x88
      000195 40 CA            [24] 1133 	jc	00110$
      000197                       1134 00106$:
                                   1135 ;	888n.c:151: delay(speed);
      000197 85*00 82         [24] 1136 	mov	dpl,_trailler_speed_1_20
      00019A 85*01 83         [24] 1137 	mov	dph,(_trailler_speed_1_20 + 1)
      00019D C0 05            [24] 1138 	push	ar5
      00019F 12r00r20         [24] 1139 	lcall	_delay
      0001A2 D0 05            [24] 1140 	pop	ar5
                                   1141 ;	888n.c:144: for (i=6; i>=-3; i--) {
      0001A4 1D               [12] 1142 	dec	r5
      0001A5 C3               [12] 1143 	clr	c
      0001A6 ED               [12] 1144 	mov	a,r5
      0001A7 64 80            [12] 1145 	xrl	a,#0x80
      0001A9 94 7D            [12] 1146 	subb	a,#0x7d
      0001AB 40 03            [24] 1147 	jc	00142$
      0001AD 02r00rFF         [24] 1148 	ljmp	00112$
      0001B0                       1149 00142$:
      0001B0 22               [24] 1150 	ret
                                   1151 ;------------------------------------------------------------
                                   1152 ;Allocation info for local variables in function 'point'
                                   1153 ;------------------------------------------------------------
                                   1154 ;y                         Allocated with name '_point_PARM_2'
                                   1155 ;z                         Allocated with name '_point_PARM_3'
                                   1156 ;le                        Allocated with name '_point_PARM_4'
                                   1157 ;x                         Allocated to registers r7 
                                   1158 ;ch1                       Allocated to registers r7 
                                   1159 ;ch0                       Allocated to registers r6 
                                   1160 ;------------------------------------------------------------
                                   1161 ;	888n.c:156: void point(uchar x, uchar y, uchar z, uchar le)
                                   1162 ;	-----------------------------------------
                                   1163 ;	 function point
                                   1164 ;	-----------------------------------------
      0001B1                       1165 _point:
      0001B1 AF 82            [24] 1166 	mov	r7,dpl
                                   1167 ;	888n.c:160: ch1 = 1<<x;
      0001B3 8F F0            [24] 1168 	mov	b,r7
      0001B5 05 F0            [12] 1169 	inc	b
      0001B7 74 01            [12] 1170 	mov	a,#0x01
      0001B9 80 02            [24] 1171 	sjmp	00111$
      0001BB                       1172 00109$:
      0001BB 25 E0            [12] 1173 	add	a,acc
      0001BD                       1174 00111$:
      0001BD D5 F0 FB         [24] 1175 	djnz	b,00109$
                                   1176 ;	888n.c:161: ch0=~ch1;
      0001C0 FF               [12] 1177 	mov	r7,a
      0001C1 F4               [12] 1178 	cpl	a
      0001C2 FE               [12] 1179 	mov	r6,a
                                   1180 ;	888n.c:163: if (le) 
      0001C3 E5*02            [12] 1181 	mov	a,_point_PARM_4
      0001C5 60 32            [24] 1182 	jz	00102$
                                   1183 ;	888n.c:164: display[z][y]=display[z][y]|ch1;
      0001C7 E5*01            [12] 1184 	mov	a,_point_PARM_3
      0001C9 75 F0 08         [24] 1185 	mov	b,#0x08
      0001CC A4               [48] 1186 	mul	ab
      0001CD FC               [12] 1187 	mov	r4,a
      0001CE AD F0            [24] 1188 	mov	r5,b
      0001D0 24r00            [12] 1189 	add	a,#_display
      0001D2 FA               [12] 1190 	mov	r2,a
      0001D3 ED               [12] 1191 	mov	a,r5
      0001D4 34s00            [12] 1192 	addc	a,#(_display >> 8)
      0001D6 FB               [12] 1193 	mov	r3,a
      0001D7 E5*00            [12] 1194 	mov	a,_point_PARM_2
      0001D9 F9               [12] 1195 	mov	r1,a
      0001DA 2A               [12] 1196 	add	a,r2
      0001DB FA               [12] 1197 	mov	r2,a
      0001DC E4               [12] 1198 	clr	a
      0001DD 3B               [12] 1199 	addc	a,r3
      0001DE FB               [12] 1200 	mov	r3,a
      0001DF EC               [12] 1201 	mov	a,r4
      0001E0 24r00            [12] 1202 	add	a,#_display
      0001E2 FC               [12] 1203 	mov	r4,a
      0001E3 ED               [12] 1204 	mov	a,r5
      0001E4 34s00            [12] 1205 	addc	a,#(_display >> 8)
      0001E6 FD               [12] 1206 	mov	r5,a
      0001E7 E9               [12] 1207 	mov	a,r1
      0001E8 2C               [12] 1208 	add	a,r4
      0001E9 F5 82            [12] 1209 	mov	dpl,a
      0001EB E4               [12] 1210 	clr	a
      0001EC 3D               [12] 1211 	addc	a,r5
      0001ED F5 83            [12] 1212 	mov	dph,a
      0001EF E0               [24] 1213 	movx	a,@dptr
      0001F0 42 07            [12] 1214 	orl	ar7,a
      0001F2 8A 82            [24] 1215 	mov	dpl,r2
      0001F4 8B 83            [24] 1216 	mov	dph,r3
      0001F6 EF               [12] 1217 	mov	a,r7
      0001F7 F0               [24] 1218 	movx	@dptr,a
      0001F8 22               [24] 1219 	ret
      0001F9                       1220 00102$:
                                   1221 ;	888n.c:166: display[z][y]=display[z][y]&ch0;
      0001F9 E5*01            [12] 1222 	mov	a,_point_PARM_3
      0001FB 75 F0 08         [24] 1223 	mov	b,#0x08
      0001FE A4               [48] 1224 	mul	ab
      0001FF FD               [12] 1225 	mov	r5,a
      000200 AF F0            [24] 1226 	mov	r7,b
      000202 24r00            [12] 1227 	add	a,#_display
      000204 FB               [12] 1228 	mov	r3,a
      000205 EF               [12] 1229 	mov	a,r7
      000206 34s00            [12] 1230 	addc	a,#(_display >> 8)
      000208 FC               [12] 1231 	mov	r4,a
      000209 E5*00            [12] 1232 	mov	a,_point_PARM_2
      00020B FA               [12] 1233 	mov	r2,a
      00020C 2B               [12] 1234 	add	a,r3
      00020D FB               [12] 1235 	mov	r3,a
      00020E E4               [12] 1236 	clr	a
      00020F 3C               [12] 1237 	addc	a,r4
      000210 FC               [12] 1238 	mov	r4,a
      000211 ED               [12] 1239 	mov	a,r5
      000212 24r00            [12] 1240 	add	a,#_display
      000214 FD               [12] 1241 	mov	r5,a
      000215 EF               [12] 1242 	mov	a,r7
      000216 34s00            [12] 1243 	addc	a,#(_display >> 8)
      000218 FF               [12] 1244 	mov	r7,a
      000219 EA               [12] 1245 	mov	a,r2
      00021A 2D               [12] 1246 	add	a,r5
      00021B F5 82            [12] 1247 	mov	dpl,a
      00021D E4               [12] 1248 	clr	a
      00021E 3F               [12] 1249 	addc	a,r7
      00021F F5 83            [12] 1250 	mov	dph,a
      000221 E0               [24] 1251 	movx	a,@dptr
      000222 52 06            [12] 1252 	anl	ar6,a
      000224 8B 82            [24] 1253 	mov	dpl,r3
      000226 8C 83            [24] 1254 	mov	dph,r4
      000228 EE               [12] 1255 	mov	a,r6
      000229 F0               [24] 1256 	movx	@dptr,a
      00022A 22               [24] 1257 	ret
                                   1258 ;------------------------------------------------------------
                                   1259 ;Allocation info for local variables in function 'type'
                                   1260 ;------------------------------------------------------------
                                   1261 ;y                         Allocated with name '_type_PARM_2'
                                   1262 ;cha                       Allocated to registers r7 
                                   1263 ;xx                        Allocated to registers r4 
                                   1264 ;------------------------------------------------------------
                                   1265 ;	888n.c:169: void type(uchar cha, uchar y)
                                   1266 ;	-----------------------------------------
                                   1267 ;	 function type
                                   1268 ;	-----------------------------------------
      00022B                       1269 _type:
      00022B AF 82            [24] 1270 	mov	r7,dpl
                                   1271 ;	888n.c:174: for (xx=0; xx<8; xx++) display[xx][y]=table_cha[cha][xx];
      00022D AE*00            [24] 1272 	mov	r6,_type_PARM_2
      00022F EF               [12] 1273 	mov	a,r7
      000230 75 F0 08         [24] 1274 	mov	b,#0x08
      000233 A4               [48] 1275 	mul	ab
      000234 24r00            [12] 1276 	add	a,#_table_cha
      000236 FD               [12] 1277 	mov	r5,a
      000237 74s00            [12] 1278 	mov	a,#(_table_cha >> 8)
      000239 35 F0            [12] 1279 	addc	a,b
      00023B FF               [12] 1280 	mov	r7,a
      00023C 7C 00            [12] 1281 	mov	r4,#0x00
      00023E                       1282 00102$:
      00023E EC               [12] 1283 	mov	a,r4
      00023F 75 F0 08         [24] 1284 	mov	b,#0x08
      000242 A4               [48] 1285 	mul	ab
      000243 24r00            [12] 1286 	add	a,#_display
      000245 FA               [12] 1287 	mov	r2,a
      000246 74s00            [12] 1288 	mov	a,#(_display >> 8)
      000248 35 F0            [12] 1289 	addc	a,b
      00024A FB               [12] 1290 	mov	r3,a
      00024B EE               [12] 1291 	mov	a,r6
      00024C 2A               [12] 1292 	add	a,r2
      00024D FA               [12] 1293 	mov	r2,a
      00024E E4               [12] 1294 	clr	a
      00024F 3B               [12] 1295 	addc	a,r3
      000250 FB               [12] 1296 	mov	r3,a
      000251 EC               [12] 1297 	mov	a,r4
      000252 2D               [12] 1298 	add	a,r5
      000253 F5 82            [12] 1299 	mov	dpl,a
      000255 E4               [12] 1300 	clr	a
      000256 3F               [12] 1301 	addc	a,r7
      000257 F5 83            [12] 1302 	mov	dph,a
      000259 E4               [12] 1303 	clr	a
      00025A 93               [24] 1304 	movc	a,@a+dptr
      00025B F9               [12] 1305 	mov	r1,a
      00025C 8A 82            [24] 1306 	mov	dpl,r2
      00025E 8B 83            [24] 1307 	mov	dph,r3
      000260 F0               [24] 1308 	movx	@dptr,a
      000261 0C               [12] 1309 	inc	r4
      000262 BC 08 00         [24] 1310 	cjne	r4,#0x08,00110$
      000265                       1311 00110$:
      000265 40 D7            [24] 1312 	jc	00102$
      000267 22               [24] 1313 	ret
                                   1314 ;------------------------------------------------------------
                                   1315 ;Allocation info for local variables in function 'cirp'
                                   1316 ;------------------------------------------------------------
                                   1317 ;dir                       Allocated with name '_cirp_PARM_2'
                                   1318 ;le                        Allocated with name '_cirp_PARM_3'
                                   1319 ;cpp                       Allocated to registers r7 
                                   1320 ;a                         Allocated to registers r5 
                                   1321 ;b                         Allocated to registers r4 
                                   1322 ;c                         Allocated to registers r6 
                                   1323 ;cp                        Allocated to registers r6 
                                   1324 ;------------------------------------------------------------
                                   1325 ;	888n.c:181: void cirp(uchar cpp, uchar dir, uchar le)
                                   1326 ;	-----------------------------------------
                                   1327 ;	 function cirp
                                   1328 ;	-----------------------------------------
      000268                       1329 _cirp:
      000268 AF 82            [24] 1330 	mov	r7,dpl
                                   1331 ;	888n.c:185: if ((cpp<128) && (cpp>=0)) {
      00026A BF 80 00         [24] 1332 	cjne	r7,#0x80,00120$
      00026D                       1333 00120$:
      00026D 50 3D            [24] 1334 	jnc	00109$
                                   1335 ;	888n.c:186: if (dir)
      00026F E5*02            [12] 1336 	mov	a,_cirp_PARM_2
      000271 60 07            [24] 1337 	jz	00102$
                                   1338 ;	888n.c:187: cp=127-cpp;
      000273 74 7F            [12] 1339 	mov	a,#0x7f
      000275 C3               [12] 1340 	clr	c
      000276 9F               [12] 1341 	subb	a,r7
      000277 FE               [12] 1342 	mov	r6,a
      000278 80 02            [24] 1343 	sjmp	00103$
      00027A                       1344 00102$:
                                   1345 ;	888n.c:189: cp=cpp; 
      00027A 8F 06            [24] 1346 	mov	ar6,r7
      00027C                       1347 00103$:
                                   1348 ;	888n.c:191: a = (dat[cp]>>5)&0x07;
      00027C EE               [12] 1349 	mov	a,r6
      00027D 90r00r68         [24] 1350 	mov	dptr,#_dat
      000280 93               [24] 1351 	movc	a,@a+dptr
      000281 FE               [12] 1352 	mov	r6,a
      000282 C4               [12] 1353 	swap	a
      000283 03               [12] 1354 	rr	a
      000284 54 07            [12] 1355 	anl	a,#0x07
      000286 FD               [12] 1356 	mov	r5,a
      000287 53 05 07         [24] 1357 	anl	ar5,#0x07
                                   1358 ;	888n.c:192: b = (dat[cp]>>2)&0x07;
      00028A EE               [12] 1359 	mov	a,r6
      00028B 03               [12] 1360 	rr	a
      00028C 03               [12] 1361 	rr	a
      00028D 54 3F            [12] 1362 	anl	a,#0x3f
      00028F FC               [12] 1363 	mov	r4,a
      000290 53 04 07         [24] 1364 	anl	ar4,#0x07
                                   1365 ;	888n.c:193: c = dat[cp]&0x03;
      000293 53 06 03         [24] 1366 	anl	ar6,#0x03
                                   1367 ;	888n.c:195: if (cpp>63) c=7-c;
      000296 EF               [12] 1368 	mov	a,r7
      000297 24 C0            [12] 1369 	add	a,#0xff - 0x3f
      000299 50 05            [24] 1370 	jnc	00105$
      00029B 74 07            [12] 1371 	mov	a,#0x07
      00029D C3               [12] 1372 	clr	c
      00029E 9E               [12] 1373 	subb	a,r6
      00029F FE               [12] 1374 	mov	r6,a
      0002A0                       1375 00105$:
                                   1376 ;	888n.c:197: point (a,b,c,le);
      0002A0 8C*00            [24] 1377 	mov	_point_PARM_2,r4
      0002A2 8E*01            [24] 1378 	mov	_point_PARM_3,r6
      0002A4 85*03*02         [24] 1379 	mov	_point_PARM_4,_cirp_PARM_3
      0002A7 8D 82            [24] 1380 	mov	dpl,r5
      0002A9 02r01rB1         [24] 1381 	ljmp	_point
      0002AC                       1382 00109$:
      0002AC 22               [24] 1383 	ret
                                   1384 ;------------------------------------------------------------
                                   1385 ;Allocation info for local variables in function 'line'
                                   1386 ;------------------------------------------------------------
                                   1387 ;y1                        Allocated with name '_line_PARM_2'
                                   1388 ;z1                        Allocated with name '_line_PARM_3'
                                   1389 ;x2                        Allocated with name '_line_PARM_4'
                                   1390 ;y2                        Allocated with name '_line_PARM_5'
                                   1391 ;z2                        Allocated with name '_line_PARM_6'
                                   1392 ;le                        Allocated with name '_line_PARM_7'
                                   1393 ;x1                        Allocated to registers r7 
                                   1394 ;t                         Allocated with name '_line_t_1_32'
                                   1395 ;a                         Allocated to registers r7 
                                   1396 ;b                         Allocated to registers r2 
                                   1397 ;c                         Allocated to registers r1 
                                   1398 ;a1                        Allocated to registers r6 
                                   1399 ;b1                        Allocated with name '_line_b1_1_32'
                                   1400 ;c1                        Allocated with name '_line_c1_1_32'
                                   1401 ;i                         Allocated to registers r5 
                                   1402 ;------------------------------------------------------------
                                   1403 ;	888n.c:203: void line(uchar x1, uchar y1, uchar z1, uchar x2, uchar y2, uchar z2, uchar le)
                                   1404 ;	-----------------------------------------
                                   1405 ;	 function line
                                   1406 ;	-----------------------------------------
      0002AD                       1407 _line:
      0002AD AF 82            [24] 1408 	mov	r7,dpl
                                   1409 ;	888n.c:207: a1 = x2-x1;
      0002AF E5*06            [12] 1410 	mov	a,_line_PARM_4
      0002B1 C3               [12] 1411 	clr	c
      0002B2 9F               [12] 1412 	subb	a,r7
      0002B3 FE               [12] 1413 	mov	r6,a
                                   1414 ;	888n.c:208: b1=y2-y1;
      0002B4 E5*07            [12] 1415 	mov	a,_line_PARM_5
      0002B6 C3               [12] 1416 	clr	c
      0002B7 95*04            [12] 1417 	subb	a,_line_PARM_2
      0002B9 F5*0B            [12] 1418 	mov	_line_b1_1_32,a
                                   1419 ;	888n.c:209: c1=z2-z1;
      0002BB E5*08            [12] 1420 	mov	a,_line_PARM_6
      0002BD C3               [12] 1421 	clr	c
      0002BE 95*05            [12] 1422 	subb	a,_line_PARM_3
      0002C0 F5*0C            [12] 1423 	mov	_line_c1_1_32,a
                                   1424 ;	888n.c:210: t=maxt(abss(a1),abss(b1),abss(c1));
      0002C2 8E 82            [24] 1425 	mov	dpl,r6
      0002C4 C0 07            [24] 1426 	push	ar7
      0002C6 C0 06            [24] 1427 	push	ar6
      0002C8 12r00r75         [24] 1428 	lcall	_abss
      0002CB AB 82            [24] 1429 	mov	r3,dpl
      0002CD 85*0B 82         [24] 1430 	mov	dpl,_line_b1_1_32
      0002D0 C0 03            [24] 1431 	push	ar3
      0002D2 12r00r75         [24] 1432 	lcall	_abss
      0002D5 AA 82            [24] 1433 	mov	r2,dpl
      0002D7 85*0C 82         [24] 1434 	mov	dpl,_line_c1_1_32
      0002DA C0 02            [24] 1435 	push	ar2
      0002DC 12r00r75         [24] 1436 	lcall	_abss
      0002DF 85 82*01         [24] 1437 	mov	_maxt_PARM_3,dpl
      0002E2 D0 02            [24] 1438 	pop	ar2
      0002E4 D0 03            [24] 1439 	pop	ar3
      0002E6 8A*00            [24] 1440 	mov	_maxt_PARM_2,r2
      0002E8 8B 82            [24] 1441 	mov	dpl,r3
      0002EA 12r00rB5         [24] 1442 	lcall	_maxt
      0002ED 85 82*0A         [24] 1443 	mov	_line_t_1_32,dpl
      0002F0 D0 06            [24] 1444 	pop	ar6
      0002F2 D0 07            [24] 1445 	pop	ar7
                                   1446 ;	888n.c:211: a=x1*10;
      0002F4 EF               [12] 1447 	mov	a,r7
      0002F5 75 F0 0A         [24] 1448 	mov	b,#0x0a
      0002F8 A4               [48] 1449 	mul	ab
      0002F9 FF               [12] 1450 	mov	r7,a
                                   1451 ;	888n.c:212: b=y1*10;
      0002FA E5*04            [12] 1452 	mov	a,_line_PARM_2
      0002FC 75 F0 0A         [24] 1453 	mov	b,#0x0a
      0002FF A4               [48] 1454 	mul	ab
      000300 FA               [12] 1455 	mov	r2,a
                                   1456 ;	888n.c:213: c=z1*10;
      000301 E5*05            [12] 1457 	mov	a,_line_PARM_3
      000303 75 F0 0A         [24] 1458 	mov	b,#0x0a
      000306 A4               [48] 1459 	mul	ab
      000307 F9               [12] 1460 	mov	r1,a
                                   1461 ;	888n.c:214: a1=a1*10/t;
      000308 C2 D5            [12] 1462 	clr	F0
      00030A 75 F0 0A         [24] 1463 	mov	b,#0x0a
      00030D EE               [12] 1464 	mov	a,r6
      00030E 30 E7 04         [24] 1465 	jnb	acc.7,00114$
      000311 B2 D5            [12] 1466 	cpl	F0
      000313 F4               [12] 1467 	cpl	a
      000314 04               [12] 1468 	inc	a
      000315                       1469 00114$:
      000315 A4               [48] 1470 	mul	ab
      000316 30 D5 0A         [24] 1471 	jnb	F0,00115$
      000319 F4               [12] 1472 	cpl	a
      00031A 24 01            [12] 1473 	add	a,#0x01
      00031C C5 F0            [12] 1474 	xch	a,b
      00031E F4               [12] 1475 	cpl	a
      00031F 34 00            [12] 1476 	addc	a,#0x00
      000321 C5 F0            [12] 1477 	xch	a,b
      000323                       1478 00115$:
      000323 F5 82            [12] 1479 	mov	dpl,a
      000325 85 F0 83         [24] 1480 	mov	dph,b
      000328 E5*0A            [12] 1481 	mov	a,_line_t_1_32
      00032A F8               [12] 1482 	mov	r0,a
      00032B 33               [12] 1483 	rlc	a
      00032C 95 E0            [12] 1484 	subb	a,acc
      00032E FB               [12] 1485 	mov	r3,a
      00032F 88*00            [24] 1486 	mov	__divsint_PARM_2,r0
      000331 8B*01            [24] 1487 	mov	(__divsint_PARM_2 + 1),r3
      000333 C0 07            [24] 1488 	push	ar7
      000335 C0 03            [24] 1489 	push	ar3
      000337 C0 02            [24] 1490 	push	ar2
      000339 C0 01            [24] 1491 	push	ar1
      00033B C0 00            [24] 1492 	push	ar0
      00033D 12r00r00         [24] 1493 	lcall	__divsint
      000340 AC 82            [24] 1494 	mov	r4,dpl
      000342 AD 83            [24] 1495 	mov	r5,dph
      000344 D0 00            [24] 1496 	pop	ar0
      000346 D0 01            [24] 1497 	pop	ar1
      000348 D0 02            [24] 1498 	pop	ar2
      00034A D0 03            [24] 1499 	pop	ar3
      00034C D0 07            [24] 1500 	pop	ar7
      00034E 8C 06            [24] 1501 	mov	ar6,r4
                                   1502 ;	888n.c:215: b1=b1*10/t;
      000350 C2 D5            [12] 1503 	clr	F0
      000352 75 F0 0A         [24] 1504 	mov	b,#0x0a
      000355 E5*0B            [12] 1505 	mov	a,_line_b1_1_32
      000357 30 E7 04         [24] 1506 	jnb	acc.7,00116$
      00035A B2 D5            [12] 1507 	cpl	F0
      00035C F4               [12] 1508 	cpl	a
      00035D 04               [12] 1509 	inc	a
      00035E                       1510 00116$:
      00035E A4               [48] 1511 	mul	ab
      00035F 30 D5 0A         [24] 1512 	jnb	F0,00117$
      000362 F4               [12] 1513 	cpl	a
      000363 24 01            [12] 1514 	add	a,#0x01
      000365 C5 F0            [12] 1515 	xch	a,b
      000367 F4               [12] 1516 	cpl	a
      000368 34 00            [12] 1517 	addc	a,#0x00
      00036A C5 F0            [12] 1518 	xch	a,b
      00036C                       1519 00117$:
      00036C F5 82            [12] 1520 	mov	dpl,a
      00036E 85 F0 83         [24] 1521 	mov	dph,b
      000371 88*00            [24] 1522 	mov	__divsint_PARM_2,r0
      000373 8B*01            [24] 1523 	mov	(__divsint_PARM_2 + 1),r3
      000375 C0 07            [24] 1524 	push	ar7
      000377 C0 06            [24] 1525 	push	ar6
      000379 C0 03            [24] 1526 	push	ar3
      00037B C0 02            [24] 1527 	push	ar2
      00037D C0 01            [24] 1528 	push	ar1
      00037F C0 00            [24] 1529 	push	ar0
      000381 12r00r00         [24] 1530 	lcall	__divsint
      000384 AC 82            [24] 1531 	mov	r4,dpl
      000386 AD 83            [24] 1532 	mov	r5,dph
      000388 D0 00            [24] 1533 	pop	ar0
      00038A D0 01            [24] 1534 	pop	ar1
      00038C D0 02            [24] 1535 	pop	ar2
      00038E D0 03            [24] 1536 	pop	ar3
      000390 D0 06            [24] 1537 	pop	ar6
      000392 D0 07            [24] 1538 	pop	ar7
      000394 8C*0B            [24] 1539 	mov	_line_b1_1_32,r4
                                   1540 ;	888n.c:216: c1=c1*10/t;
      000396 C2 D5            [12] 1541 	clr	F0
      000398 75 F0 0A         [24] 1542 	mov	b,#0x0a
      00039B E5*0C            [12] 1543 	mov	a,_line_c1_1_32
      00039D 30 E7 04         [24] 1544 	jnb	acc.7,00118$
      0003A0 B2 D5            [12] 1545 	cpl	F0
      0003A2 F4               [12] 1546 	cpl	a
      0003A3 04               [12] 1547 	inc	a
      0003A4                       1548 00118$:
      0003A4 A4               [48] 1549 	mul	ab
      0003A5 30 D5 0A         [24] 1550 	jnb	F0,00119$
      0003A8 F4               [12] 1551 	cpl	a
      0003A9 24 01            [12] 1552 	add	a,#0x01
      0003AB C5 F0            [12] 1553 	xch	a,b
      0003AD F4               [12] 1554 	cpl	a
      0003AE 34 00            [12] 1555 	addc	a,#0x00
      0003B0 C5 F0            [12] 1556 	xch	a,b
      0003B2                       1557 00119$:
      0003B2 F5 82            [12] 1558 	mov	dpl,a
      0003B4 85 F0 83         [24] 1559 	mov	dph,b
      0003B7 88*00            [24] 1560 	mov	__divsint_PARM_2,r0
      0003B9 8B*01            [24] 1561 	mov	(__divsint_PARM_2 + 1),r3
      0003BB C0 07            [24] 1562 	push	ar7
      0003BD C0 06            [24] 1563 	push	ar6
      0003BF C0 02            [24] 1564 	push	ar2
      0003C1 C0 01            [24] 1565 	push	ar1
      0003C3 12r00r00         [24] 1566 	lcall	__divsint
      0003C6 AC 82            [24] 1567 	mov	r4,dpl
      0003C8 D0 01            [24] 1568 	pop	ar1
      0003CA D0 02            [24] 1569 	pop	ar2
      0003CC D0 06            [24] 1570 	pop	ar6
      0003CE D0 07            [24] 1571 	pop	ar7
      0003D0 8C*0C            [24] 1572 	mov	_line_c1_1_32,r4
                                   1573 ;	888n.c:218: for (i=0;i<t;i++) {
      0003D2 7D 00            [12] 1574 	mov	r5,#0x00
      0003D4                       1575 00103$:
      0003D4 C3               [12] 1576 	clr	c
      0003D5 ED               [12] 1577 	mov	a,r5
      0003D6 64 80            [12] 1578 	xrl	a,#0x80
      0003D8 85*0A F0         [24] 1579 	mov	b,_line_t_1_32
      0003DB 63 F0 80         [24] 1580 	xrl	b,#0x80
      0003DE 95 F0            [12] 1581 	subb	a,b
      0003E0 50 62            [24] 1582 	jnc	00101$
                                   1583 ;	888n.c:219: point(abs(a),abs(b),abs(c),le);
      0003E2 8F 82            [24] 1584 	mov	dpl,r7
      0003E4 C0 07            [24] 1585 	push	ar7
      0003E6 C0 06            [24] 1586 	push	ar6
      0003E8 C0 05            [24] 1587 	push	ar5
      0003EA C0 02            [24] 1588 	push	ar2
      0003EC C0 01            [24] 1589 	push	ar1
      0003EE 12r00r5C         [24] 1590 	lcall	_abs
      0003F1 AC 82            [24] 1591 	mov	r4,dpl
      0003F3 D0 01            [24] 1592 	pop	ar1
      0003F5 D0 02            [24] 1593 	pop	ar2
      0003F7 8A 82            [24] 1594 	mov	dpl,r2
      0003F9 C0 04            [24] 1595 	push	ar4
      0003FB C0 02            [24] 1596 	push	ar2
      0003FD C0 01            [24] 1597 	push	ar1
      0003FF 12r00r5C         [24] 1598 	lcall	_abs
      000402 AB 82            [24] 1599 	mov	r3,dpl
      000404 D0 01            [24] 1600 	pop	ar1
      000406 D0 02            [24] 1601 	pop	ar2
      000408 89 82            [24] 1602 	mov	dpl,r1
      00040A C0 03            [24] 1603 	push	ar3
      00040C C0 02            [24] 1604 	push	ar2
      00040E C0 01            [24] 1605 	push	ar1
      000410 12r00r5C         [24] 1606 	lcall	_abs
      000413 85 82*01         [24] 1607 	mov	_point_PARM_3,dpl
      000416 D0 01            [24] 1608 	pop	ar1
      000418 D0 02            [24] 1609 	pop	ar2
      00041A D0 03            [24] 1610 	pop	ar3
      00041C D0 04            [24] 1611 	pop	ar4
      00041E 8B*00            [24] 1612 	mov	_point_PARM_2,r3
      000420 85*09*02         [24] 1613 	mov	_point_PARM_4,_line_PARM_7
      000423 8C 82            [24] 1614 	mov	dpl,r4
      000425 C0 02            [24] 1615 	push	ar2
      000427 C0 01            [24] 1616 	push	ar1
      000429 12r01rB1         [24] 1617 	lcall	_point
      00042C D0 01            [24] 1618 	pop	ar1
      00042E D0 02            [24] 1619 	pop	ar2
      000430 D0 05            [24] 1620 	pop	ar5
      000432 D0 06            [24] 1621 	pop	ar6
      000434 D0 07            [24] 1622 	pop	ar7
                                   1623 ;	888n.c:220: a += a1;
      000436 EE               [12] 1624 	mov	a,r6
      000437 2F               [12] 1625 	add	a,r7
      000438 FF               [12] 1626 	mov	r7,a
                                   1627 ;	888n.c:221: b += b1;
      000439 E5*0B            [12] 1628 	mov	a,_line_b1_1_32
      00043B 2A               [12] 1629 	add	a,r2
      00043C FA               [12] 1630 	mov	r2,a
                                   1631 ;	888n.c:222: c += c1;
      00043D E5*0C            [12] 1632 	mov	a,_line_c1_1_32
      00043F 29               [12] 1633 	add	a,r1
      000440 F9               [12] 1634 	mov	r1,a
                                   1635 ;	888n.c:218: for (i=0;i<t;i++) {
      000441 0D               [12] 1636 	inc	r5
      000442 80 90            [24] 1637 	sjmp	00103$
      000444                       1638 00101$:
                                   1639 ;	888n.c:225: point(x2,y2,z2,le);
      000444 85*07*00         [24] 1640 	mov	_point_PARM_2,_line_PARM_5
      000447 85*08*01         [24] 1641 	mov	_point_PARM_3,_line_PARM_6
      00044A 85*09*02         [24] 1642 	mov	_point_PARM_4,_line_PARM_7
      00044D 85*06 82         [24] 1643 	mov	dpl,_line_PARM_4
      000450 02r01rB1         [24] 1644 	ljmp	_point
                                   1645 ;------------------------------------------------------------
                                   1646 ;Allocation info for local variables in function 'box'
                                   1647 ;------------------------------------------------------------
                                   1648 ;y1                        Allocated with name '_box_PARM_2'
                                   1649 ;z1                        Allocated with name '_box_PARM_3'
                                   1650 ;x2                        Allocated with name '_box_PARM_4'
                                   1651 ;y2                        Allocated with name '_box_PARM_5'
                                   1652 ;z2                        Allocated with name '_box_PARM_6'
                                   1653 ;fill                      Allocated with name '_box_PARM_7'
                                   1654 ;le                        Allocated with name '_box_PARM_8'
                                   1655 ;x1                        Allocated with name '_box_x1_1_34'
                                   1656 ;i                         Allocated to registers r6 
                                   1657 ;j                         Allocated with name '_box_j_1_35'
                                   1658 ;t                         Allocated with name '_box_t_1_35'
                                   1659 ;------------------------------------------------------------
                                   1660 ;	888n.c:228: void box(uchar x1, uchar y1, uchar z1, uchar x2, uchar y2, uchar z2, uchar fill, uchar le)
                                   1661 ;	-----------------------------------------
                                   1662 ;	 function box
                                   1663 ;	-----------------------------------------
      000453                       1664 _box:
      000453 85 82*14         [24] 1665 	mov	_box_x1_1_34,dpl
                                   1666 ;	888n.c:230: uchar i, j, t=0;
      000456 75*16 00         [24] 1667 	mov	_box_t_1_35,#0x00
                                   1668 ;	888n.c:232: max(&x1, &x2);
      000459 75*00r0F         [24] 1669 	mov	_max_PARM_2,#_box_PARM_4
      00045C 75*01 00         [24] 1670 	mov	(_max_PARM_2 + 1),#0x00
      00045F 75*02 40         [24] 1671 	mov	(_max_PARM_2 + 2),#0x40
      000462 90r00r14         [24] 1672 	mov	dptr,#_box_x1_1_34
      000465 75 F0 40         [24] 1673 	mov	b,#0x40
      000468 12r00r82         [24] 1674 	lcall	_max
                                   1675 ;	888n.c:233: max(&y1, &y2);
      00046B 75*00r10         [24] 1676 	mov	_max_PARM_2,#_box_PARM_5
      00046E 75*01 00         [24] 1677 	mov	(_max_PARM_2 + 1),#0x00
      000471 75*02 40         [24] 1678 	mov	(_max_PARM_2 + 2),#0x40
      000474 90r00r0D         [24] 1679 	mov	dptr,#_box_PARM_2
      000477 75 F0 40         [24] 1680 	mov	b,#0x40
      00047A 12r00r82         [24] 1681 	lcall	_max
                                   1682 ;	888n.c:234: max(&z1, &z2);
      00047D 75*00r11         [24] 1683 	mov	_max_PARM_2,#_box_PARM_6
      000480 75*01 00         [24] 1684 	mov	(_max_PARM_2 + 1),#0x00
      000483 75*02 40         [24] 1685 	mov	(_max_PARM_2 + 2),#0x40
      000486 90r00r0E         [24] 1686 	mov	dptr,#_box_PARM_3
      000489 75 F0 40         [24] 1687 	mov	b,#0x40
      00048C 12r00r82         [24] 1688 	lcall	_max
                                   1689 ;	888n.c:236: for (i=x1; i<=x2; i++) t |= 1<<i;
      00048F AE*14            [24] 1690 	mov	r6,_box_x1_1_34
      000491 8E 05            [24] 1691 	mov	ar5,r6
      000493                       1692 00131$:
      000493 C3               [12] 1693 	clr	c
      000494 E5*0F            [12] 1694 	mov	a,_box_PARM_4
      000496 9D               [12] 1695 	subb	a,r5
      000497 40 13            [24] 1696 	jc	00101$
      000499 8D F0            [24] 1697 	mov	b,r5
      00049B 05 F0            [12] 1698 	inc	b
      00049D 74 01            [12] 1699 	mov	a,#0x01
      00049F 80 02            [24] 1700 	sjmp	00279$
      0004A1                       1701 00277$:
      0004A1 25 E0            [12] 1702 	add	a,acc
      0004A3                       1703 00279$:
      0004A3 D5 F0 FB         [24] 1704 	djnz	b,00277$
      0004A6 FC               [12] 1705 	mov	r4,a
      0004A7 42*16            [12] 1706 	orl	_box_t_1_35,a
      0004A9 0D               [12] 1707 	inc	r5
      0004AA 80 E7            [24] 1708 	sjmp	00131$
      0004AC                       1709 00101$:
                                   1710 ;	888n.c:237: if (!le) t = ~t;
      0004AC E5*13            [12] 1711 	mov	a,_box_PARM_8
      0004AE 70 05            [24] 1712 	jnz	00103$
      0004B0 E5*16            [12] 1713 	mov	a,_box_t_1_35
      0004B2 F4               [12] 1714 	cpl	a
      0004B3 F5*16            [12] 1715 	mov	_box_t_1_35,a
      0004B5                       1716 00103$:
                                   1717 ;	888n.c:238: if (fill) {
      0004B5 E5*12            [12] 1718 	mov	a,_box_PARM_7
      0004B7 70 03            [24] 1719 	jnz	00281$
      0004B9 02r05r5A         [24] 1720 	ljmp	00128$
      0004BC                       1721 00281$:
                                   1722 ;	888n.c:239: if (le) {
      0004BC E5*13            [12] 1723 	mov	a,_box_PARM_8
      0004BE 60 4D            [24] 1724 	jz	00109$
                                   1725 ;	888n.c:240: for (i=z1;i<=z2;i++)
      0004C0 AE*0E            [24] 1726 	mov	r6,_box_PARM_3
      0004C2 8E 05            [24] 1727 	mov	ar5,r6
      0004C4                       1728 00137$:
      0004C4 C3               [12] 1729 	clr	c
      0004C5 E5*11            [12] 1730 	mov	a,_box_PARM_6
      0004C7 9D               [12] 1731 	subb	a,r5
      0004C8 50 01            [24] 1732 	jnc	00283$
      0004CA 22               [24] 1733 	ret
      0004CB                       1734 00283$:
                                   1735 ;	888n.c:241: for (j=y1;j<=y2;j++) display[j][i] |= t;
      0004CB 85*0D*15         [24] 1736 	mov	_box_j_1_35,_box_PARM_2
      0004CE AB*15            [24] 1737 	mov	r3,_box_j_1_35
      0004D0                       1738 00134$:
      0004D0 C3               [12] 1739 	clr	c
      0004D1 E5*10            [12] 1740 	mov	a,_box_PARM_5
      0004D3 9B               [12] 1741 	subb	a,r3
      0004D4 40 34            [24] 1742 	jc	00138$
      0004D6 EB               [12] 1743 	mov	a,r3
      0004D7 75 F0 08         [24] 1744 	mov	b,#0x08
      0004DA A4               [48] 1745 	mul	ab
      0004DB F9               [12] 1746 	mov	r1,a
      0004DC AA F0            [24] 1747 	mov	r2,b
      0004DE 24r00            [12] 1748 	add	a,#_display
      0004E0 F8               [12] 1749 	mov	r0,a
      0004E1 EA               [12] 1750 	mov	a,r2
      0004E2 34s00            [12] 1751 	addc	a,#(_display >> 8)
      0004E4 FF               [12] 1752 	mov	r7,a
      0004E5 ED               [12] 1753 	mov	a,r5
      0004E6 28               [12] 1754 	add	a,r0
      0004E7 F8               [12] 1755 	mov	r0,a
      0004E8 E4               [12] 1756 	clr	a
      0004E9 3F               [12] 1757 	addc	a,r7
      0004EA FF               [12] 1758 	mov	r7,a
      0004EB E9               [12] 1759 	mov	a,r1
      0004EC 24r00            [12] 1760 	add	a,#_display
      0004EE F9               [12] 1761 	mov	r1,a
      0004EF EA               [12] 1762 	mov	a,r2
      0004F0 34s00            [12] 1763 	addc	a,#(_display >> 8)
      0004F2 FA               [12] 1764 	mov	r2,a
      0004F3 ED               [12] 1765 	mov	a,r5
      0004F4 29               [12] 1766 	add	a,r1
      0004F5 F5 82            [12] 1767 	mov	dpl,a
      0004F7 E4               [12] 1768 	clr	a
      0004F8 3A               [12] 1769 	addc	a,r2
      0004F9 F5 83            [12] 1770 	mov	dph,a
      0004FB E0               [24] 1771 	movx	a,@dptr
      0004FC FA               [12] 1772 	mov	r2,a
      0004FD E5*16            [12] 1773 	mov	a,_box_t_1_35
      0004FF 42 02            [12] 1774 	orl	ar2,a
      000501 88 82            [24] 1775 	mov	dpl,r0
      000503 8F 83            [24] 1776 	mov	dph,r7
      000505 EA               [12] 1777 	mov	a,r2
      000506 F0               [24] 1778 	movx	@dptr,a
      000507 0B               [12] 1779 	inc	r3
      000508 80 C6            [24] 1780 	sjmp	00134$
      00050A                       1781 00138$:
                                   1782 ;	888n.c:240: for (i=z1;i<=z2;i++)
      00050A 0D               [12] 1783 	inc	r5
      00050B 80 B7            [24] 1784 	sjmp	00137$
      00050D                       1785 00109$:
                                   1786 ;	888n.c:243: for (i=z1;i<=z2;i++)
      00050D AE*0E            [24] 1787 	mov	r6,_box_PARM_3
      00050F 8E 07            [24] 1788 	mov	ar7,r6
      000511                       1789 00143$:
      000511 C3               [12] 1790 	clr	c
      000512 E5*11            [12] 1791 	mov	a,_box_PARM_6
      000514 9F               [12] 1792 	subb	a,r7
      000515 50 01            [24] 1793 	jnc	00285$
      000517 22               [24] 1794 	ret
      000518                       1795 00285$:
                                   1796 ;	888n.c:244: for (j=y1;j<=y2;j++) display[j][i] &= t;
      000518 85*0D*15         [24] 1797 	mov	_box_j_1_35,_box_PARM_2
      00051B AD*15            [24] 1798 	mov	r5,_box_j_1_35
      00051D                       1799 00140$:
      00051D C3               [12] 1800 	clr	c
      00051E E5*10            [12] 1801 	mov	a,_box_PARM_5
      000520 9D               [12] 1802 	subb	a,r5
      000521 40 34            [24] 1803 	jc	00144$
      000523 ED               [12] 1804 	mov	a,r5
      000524 75 F0 08         [24] 1805 	mov	b,#0x08
      000527 A4               [48] 1806 	mul	ab
      000528 FA               [12] 1807 	mov	r2,a
      000529 AB F0            [24] 1808 	mov	r3,b
      00052B 24r00            [12] 1809 	add	a,#_display
      00052D F8               [12] 1810 	mov	r0,a
      00052E EB               [12] 1811 	mov	a,r3
      00052F 34s00            [12] 1812 	addc	a,#(_display >> 8)
      000531 F9               [12] 1813 	mov	r1,a
      000532 EF               [12] 1814 	mov	a,r7
      000533 28               [12] 1815 	add	a,r0
      000534 F8               [12] 1816 	mov	r0,a
      000535 E4               [12] 1817 	clr	a
      000536 39               [12] 1818 	addc	a,r1
      000537 F9               [12] 1819 	mov	r1,a
      000538 EA               [12] 1820 	mov	a,r2
      000539 24r00            [12] 1821 	add	a,#_display
      00053B FA               [12] 1822 	mov	r2,a
      00053C EB               [12] 1823 	mov	a,r3
      00053D 34s00            [12] 1824 	addc	a,#(_display >> 8)
      00053F FB               [12] 1825 	mov	r3,a
      000540 EF               [12] 1826 	mov	a,r7
      000541 2A               [12] 1827 	add	a,r2
      000542 F5 82            [12] 1828 	mov	dpl,a
      000544 E4               [12] 1829 	clr	a
      000545 3B               [12] 1830 	addc	a,r3
      000546 F5 83            [12] 1831 	mov	dph,a
      000548 E0               [24] 1832 	movx	a,@dptr
      000549 FB               [12] 1833 	mov	r3,a
      00054A E5*16            [12] 1834 	mov	a,_box_t_1_35
      00054C 52 03            [12] 1835 	anl	ar3,a
      00054E 88 82            [24] 1836 	mov	dpl,r0
      000550 89 83            [24] 1837 	mov	dph,r1
      000552 EB               [12] 1838 	mov	a,r3
      000553 F0               [24] 1839 	movx	@dptr,a
      000554 0D               [12] 1840 	inc	r5
      000555 80 C6            [24] 1841 	sjmp	00140$
      000557                       1842 00144$:
                                   1843 ;	888n.c:243: for (i=z1;i<=z2;i++)
      000557 0F               [12] 1844 	inc	r7
      000558 80 B7            [24] 1845 	sjmp	00143$
      00055A                       1846 00128$:
                                   1847 ;	888n.c:247: if (le) {
      00055A E5*13            [12] 1848 	mov	a,_box_PARM_8
      00055C 70 03            [24] 1849 	jnz	00287$
      00055E 02r06r34         [24] 1850 	ljmp	00112$
      000561                       1851 00287$:
                                   1852 ;	888n.c:248: display[y1][z1]|=t;
      000561 E5*0D            [12] 1853 	mov	a,_box_PARM_2
      000563 75 F0 08         [24] 1854 	mov	b,#0x08
      000566 A4               [48] 1855 	mul	ab
      000567 FD               [12] 1856 	mov	r5,a
      000568 AF F0            [24] 1857 	mov	r7,b
      00056A 24r00            [12] 1858 	add	a,#_display
      00056C FA               [12] 1859 	mov	r2,a
      00056D EF               [12] 1860 	mov	a,r7
      00056E 34s00            [12] 1861 	addc	a,#(_display >> 8)
      000570 FB               [12] 1862 	mov	r3,a
      000571 E5*0E            [12] 1863 	mov	a,_box_PARM_3
      000573 F9               [12] 1864 	mov	r1,a
      000574 2A               [12] 1865 	add	a,r2
      000575 FA               [12] 1866 	mov	r2,a
      000576 E4               [12] 1867 	clr	a
      000577 3B               [12] 1868 	addc	a,r3
      000578 FB               [12] 1869 	mov	r3,a
      000579 ED               [12] 1870 	mov	a,r5
      00057A 24r00            [12] 1871 	add	a,#_display
      00057C FD               [12] 1872 	mov	r5,a
      00057D EF               [12] 1873 	mov	a,r7
      00057E 34s00            [12] 1874 	addc	a,#(_display >> 8)
      000580 FF               [12] 1875 	mov	r7,a
      000581 E9               [12] 1876 	mov	a,r1
      000582 2D               [12] 1877 	add	a,r5
      000583 F5 82            [12] 1878 	mov	dpl,a
      000585 E4               [12] 1879 	clr	a
      000586 3F               [12] 1880 	addc	a,r7
      000587 F5 83            [12] 1881 	mov	dph,a
      000589 E0               [24] 1882 	movx	a,@dptr
      00058A FF               [12] 1883 	mov	r7,a
      00058B E5*16            [12] 1884 	mov	a,_box_t_1_35
      00058D 42 07            [12] 1885 	orl	ar7,a
      00058F 8A 82            [24] 1886 	mov	dpl,r2
      000591 8B 83            [24] 1887 	mov	dph,r3
      000593 EF               [12] 1888 	mov	a,r7
      000594 F0               [24] 1889 	movx	@dptr,a
                                   1890 ;	888n.c:249: display[y2][z1]|=t;
      000595 E5*10            [12] 1891 	mov	a,_box_PARM_5
      000597 75 F0 08         [24] 1892 	mov	b,#0x08
      00059A A4               [48] 1893 	mul	ab
      00059B FD               [12] 1894 	mov	r5,a
      00059C AF F0            [24] 1895 	mov	r7,b
      00059E 24r00            [12] 1896 	add	a,#_display
      0005A0 FA               [12] 1897 	mov	r2,a
      0005A1 EF               [12] 1898 	mov	a,r7
      0005A2 34s00            [12] 1899 	addc	a,#(_display >> 8)
      0005A4 FB               [12] 1900 	mov	r3,a
      0005A5 E5*0E            [12] 1901 	mov	a,_box_PARM_3
      0005A7 F9               [12] 1902 	mov	r1,a
      0005A8 2A               [12] 1903 	add	a,r2
      0005A9 FA               [12] 1904 	mov	r2,a
      0005AA E4               [12] 1905 	clr	a
      0005AB 3B               [12] 1906 	addc	a,r3
      0005AC FB               [12] 1907 	mov	r3,a
      0005AD ED               [12] 1908 	mov	a,r5
      0005AE 24r00            [12] 1909 	add	a,#_display
      0005B0 FD               [12] 1910 	mov	r5,a
      0005B1 EF               [12] 1911 	mov	a,r7
      0005B2 34s00            [12] 1912 	addc	a,#(_display >> 8)
      0005B4 FF               [12] 1913 	mov	r7,a
      0005B5 E9               [12] 1914 	mov	a,r1
      0005B6 2D               [12] 1915 	add	a,r5
      0005B7 F5 82            [12] 1916 	mov	dpl,a
      0005B9 E4               [12] 1917 	clr	a
      0005BA 3F               [12] 1918 	addc	a,r7
      0005BB F5 83            [12] 1919 	mov	dph,a
      0005BD E0               [24] 1920 	movx	a,@dptr
      0005BE FF               [12] 1921 	mov	r7,a
      0005BF E5*16            [12] 1922 	mov	a,_box_t_1_35
      0005C1 42 07            [12] 1923 	orl	ar7,a
      0005C3 8A 82            [24] 1924 	mov	dpl,r2
      0005C5 8B 83            [24] 1925 	mov	dph,r3
      0005C7 EF               [12] 1926 	mov	a,r7
      0005C8 F0               [24] 1927 	movx	@dptr,a
                                   1928 ;	888n.c:250: display[y1][z2]|=t;
      0005C9 E5*0D            [12] 1929 	mov	a,_box_PARM_2
      0005CB 75 F0 08         [24] 1930 	mov	b,#0x08
      0005CE A4               [48] 1931 	mul	ab
      0005CF FD               [12] 1932 	mov	r5,a
      0005D0 AF F0            [24] 1933 	mov	r7,b
      0005D2 24r00            [12] 1934 	add	a,#_display
      0005D4 FA               [12] 1935 	mov	r2,a
      0005D5 EF               [12] 1936 	mov	a,r7
      0005D6 34s00            [12] 1937 	addc	a,#(_display >> 8)
      0005D8 FB               [12] 1938 	mov	r3,a
      0005D9 E5*11            [12] 1939 	mov	a,_box_PARM_6
      0005DB F9               [12] 1940 	mov	r1,a
      0005DC 2A               [12] 1941 	add	a,r2
      0005DD FA               [12] 1942 	mov	r2,a
      0005DE E4               [12] 1943 	clr	a
      0005DF 3B               [12] 1944 	addc	a,r3
      0005E0 FB               [12] 1945 	mov	r3,a
      0005E1 ED               [12] 1946 	mov	a,r5
      0005E2 24r00            [12] 1947 	add	a,#_display
      0005E4 FD               [12] 1948 	mov	r5,a
      0005E5 EF               [12] 1949 	mov	a,r7
      0005E6 34s00            [12] 1950 	addc	a,#(_display >> 8)
      0005E8 FF               [12] 1951 	mov	r7,a
      0005E9 E9               [12] 1952 	mov	a,r1
      0005EA 2D               [12] 1953 	add	a,r5
      0005EB F5 82            [12] 1954 	mov	dpl,a
      0005ED E4               [12] 1955 	clr	a
      0005EE 3F               [12] 1956 	addc	a,r7
      0005EF F5 83            [12] 1957 	mov	dph,a
      0005F1 E0               [24] 1958 	movx	a,@dptr
      0005F2 FF               [12] 1959 	mov	r7,a
      0005F3 E5*16            [12] 1960 	mov	a,_box_t_1_35
      0005F5 42 07            [12] 1961 	orl	ar7,a
      0005F7 8A 82            [24] 1962 	mov	dpl,r2
      0005F9 8B 83            [24] 1963 	mov	dph,r3
      0005FB EF               [12] 1964 	mov	a,r7
      0005FC F0               [24] 1965 	movx	@dptr,a
                                   1966 ;	888n.c:251: display[y2][z2]|=t;
      0005FD E5*10            [12] 1967 	mov	a,_box_PARM_5
      0005FF 75 F0 08         [24] 1968 	mov	b,#0x08
      000602 A4               [48] 1969 	mul	ab
      000603 FD               [12] 1970 	mov	r5,a
      000604 AF F0            [24] 1971 	mov	r7,b
      000606 24r00            [12] 1972 	add	a,#_display
      000608 FA               [12] 1973 	mov	r2,a
      000609 EF               [12] 1974 	mov	a,r7
      00060A 34s00            [12] 1975 	addc	a,#(_display >> 8)
      00060C FB               [12] 1976 	mov	r3,a
      00060D E5*11            [12] 1977 	mov	a,_box_PARM_6
      00060F F9               [12] 1978 	mov	r1,a
      000610 2A               [12] 1979 	add	a,r2
      000611 FA               [12] 1980 	mov	r2,a
      000612 E4               [12] 1981 	clr	a
      000613 3B               [12] 1982 	addc	a,r3
      000614 FB               [12] 1983 	mov	r3,a
      000615 ED               [12] 1984 	mov	a,r5
      000616 24r00            [12] 1985 	add	a,#_display
      000618 FD               [12] 1986 	mov	r5,a
      000619 EF               [12] 1987 	mov	a,r7
      00061A 34s00            [12] 1988 	addc	a,#(_display >> 8)
      00061C FF               [12] 1989 	mov	r7,a
      00061D E9               [12] 1990 	mov	a,r1
      00061E 2D               [12] 1991 	add	a,r5
      00061F F5 82            [12] 1992 	mov	dpl,a
      000621 E4               [12] 1993 	clr	a
      000622 3F               [12] 1994 	addc	a,r7
      000623 F5 83            [12] 1995 	mov	dph,a
      000625 E0               [24] 1996 	movx	a,@dptr
      000626 FF               [12] 1997 	mov	r7,a
      000627 E5*16            [12] 1998 	mov	a,_box_t_1_35
      000629 42 07            [12] 1999 	orl	ar7,a
      00062B 8A 82            [24] 2000 	mov	dpl,r2
      00062D 8B 83            [24] 2001 	mov	dph,r3
      00062F EF               [12] 2002 	mov	a,r7
      000630 F0               [24] 2003 	movx	@dptr,a
      000631 02r07r04         [24] 2004 	ljmp	00113$
      000634                       2005 00112$:
                                   2006 ;	888n.c:253: display[y1][z1]&=t;
      000634 E5*0D            [12] 2007 	mov	a,_box_PARM_2
      000636 75 F0 08         [24] 2008 	mov	b,#0x08
      000639 A4               [48] 2009 	mul	ab
      00063A FD               [12] 2010 	mov	r5,a
      00063B AF F0            [24] 2011 	mov	r7,b
      00063D 24r00            [12] 2012 	add	a,#_display
      00063F FA               [12] 2013 	mov	r2,a
      000640 EF               [12] 2014 	mov	a,r7
      000641 34s00            [12] 2015 	addc	a,#(_display >> 8)
      000643 FB               [12] 2016 	mov	r3,a
      000644 E5*0E            [12] 2017 	mov	a,_box_PARM_3
      000646 F9               [12] 2018 	mov	r1,a
      000647 2A               [12] 2019 	add	a,r2
      000648 FA               [12] 2020 	mov	r2,a
      000649 E4               [12] 2021 	clr	a
      00064A 3B               [12] 2022 	addc	a,r3
      00064B FB               [12] 2023 	mov	r3,a
      00064C ED               [12] 2024 	mov	a,r5
      00064D 24r00            [12] 2025 	add	a,#_display
      00064F FD               [12] 2026 	mov	r5,a
      000650 EF               [12] 2027 	mov	a,r7
      000651 34s00            [12] 2028 	addc	a,#(_display >> 8)
      000653 FF               [12] 2029 	mov	r7,a
      000654 E9               [12] 2030 	mov	a,r1
      000655 2D               [12] 2031 	add	a,r5
      000656 F5 82            [12] 2032 	mov	dpl,a
      000658 E4               [12] 2033 	clr	a
      000659 3F               [12] 2034 	addc	a,r7
      00065A F5 83            [12] 2035 	mov	dph,a
      00065C E0               [24] 2036 	movx	a,@dptr
      00065D FF               [12] 2037 	mov	r7,a
      00065E E5*16            [12] 2038 	mov	a,_box_t_1_35
      000660 52 07            [12] 2039 	anl	ar7,a
      000662 8A 82            [24] 2040 	mov	dpl,r2
      000664 8B 83            [24] 2041 	mov	dph,r3
      000666 EF               [12] 2042 	mov	a,r7
      000667 F0               [24] 2043 	movx	@dptr,a
                                   2044 ;	888n.c:254: display[y2][z1]&=t;
      000668 E5*10            [12] 2045 	mov	a,_box_PARM_5
      00066A 75 F0 08         [24] 2046 	mov	b,#0x08
      00066D A4               [48] 2047 	mul	ab
      00066E FD               [12] 2048 	mov	r5,a
      00066F AF F0            [24] 2049 	mov	r7,b
      000671 24r00            [12] 2050 	add	a,#_display
      000673 FA               [12] 2051 	mov	r2,a
      000674 EF               [12] 2052 	mov	a,r7
      000675 34s00            [12] 2053 	addc	a,#(_display >> 8)
      000677 FB               [12] 2054 	mov	r3,a
      000678 E5*0E            [12] 2055 	mov	a,_box_PARM_3
      00067A F9               [12] 2056 	mov	r1,a
      00067B 2A               [12] 2057 	add	a,r2
      00067C FA               [12] 2058 	mov	r2,a
      00067D E4               [12] 2059 	clr	a
      00067E 3B               [12] 2060 	addc	a,r3
      00067F FB               [12] 2061 	mov	r3,a
      000680 ED               [12] 2062 	mov	a,r5
      000681 24r00            [12] 2063 	add	a,#_display
      000683 FD               [12] 2064 	mov	r5,a
      000684 EF               [12] 2065 	mov	a,r7
      000685 34s00            [12] 2066 	addc	a,#(_display >> 8)
      000687 FF               [12] 2067 	mov	r7,a
      000688 E9               [12] 2068 	mov	a,r1
      000689 2D               [12] 2069 	add	a,r5
      00068A F5 82            [12] 2070 	mov	dpl,a
      00068C E4               [12] 2071 	clr	a
      00068D 3F               [12] 2072 	addc	a,r7
      00068E F5 83            [12] 2073 	mov	dph,a
      000690 E0               [24] 2074 	movx	a,@dptr
      000691 FF               [12] 2075 	mov	r7,a
      000692 E5*16            [12] 2076 	mov	a,_box_t_1_35
      000694 52 07            [12] 2077 	anl	ar7,a
      000696 8A 82            [24] 2078 	mov	dpl,r2
      000698 8B 83            [24] 2079 	mov	dph,r3
      00069A EF               [12] 2080 	mov	a,r7
      00069B F0               [24] 2081 	movx	@dptr,a
                                   2082 ;	888n.c:255: display[y1][z2]&=t;
      00069C E5*0D            [12] 2083 	mov	a,_box_PARM_2
      00069E 75 F0 08         [24] 2084 	mov	b,#0x08
      0006A1 A4               [48] 2085 	mul	ab
      0006A2 FD               [12] 2086 	mov	r5,a
      0006A3 AF F0            [24] 2087 	mov	r7,b
      0006A5 24r00            [12] 2088 	add	a,#_display
      0006A7 FA               [12] 2089 	mov	r2,a
      0006A8 EF               [12] 2090 	mov	a,r7
      0006A9 34s00            [12] 2091 	addc	a,#(_display >> 8)
      0006AB FB               [12] 2092 	mov	r3,a
      0006AC E5*11            [12] 2093 	mov	a,_box_PARM_6
      0006AE F9               [12] 2094 	mov	r1,a
      0006AF 2A               [12] 2095 	add	a,r2
      0006B0 FA               [12] 2096 	mov	r2,a
      0006B1 E4               [12] 2097 	clr	a
      0006B2 3B               [12] 2098 	addc	a,r3
      0006B3 FB               [12] 2099 	mov	r3,a
      0006B4 ED               [12] 2100 	mov	a,r5
      0006B5 24r00            [12] 2101 	add	a,#_display
      0006B7 FD               [12] 2102 	mov	r5,a
      0006B8 EF               [12] 2103 	mov	a,r7
      0006B9 34s00            [12] 2104 	addc	a,#(_display >> 8)
      0006BB FF               [12] 2105 	mov	r7,a
      0006BC E9               [12] 2106 	mov	a,r1
      0006BD 2D               [12] 2107 	add	a,r5
      0006BE F5 82            [12] 2108 	mov	dpl,a
      0006C0 E4               [12] 2109 	clr	a
      0006C1 3F               [12] 2110 	addc	a,r7
      0006C2 F5 83            [12] 2111 	mov	dph,a
      0006C4 E0               [24] 2112 	movx	a,@dptr
      0006C5 FF               [12] 2113 	mov	r7,a
      0006C6 E5*16            [12] 2114 	mov	a,_box_t_1_35
      0006C8 52 07            [12] 2115 	anl	ar7,a
      0006CA 8A 82            [24] 2116 	mov	dpl,r2
      0006CC 8B 83            [24] 2117 	mov	dph,r3
      0006CE EF               [12] 2118 	mov	a,r7
      0006CF F0               [24] 2119 	movx	@dptr,a
                                   2120 ;	888n.c:256: display[y2][z2]&=t;
      0006D0 E5*10            [12] 2121 	mov	a,_box_PARM_5
      0006D2 75 F0 08         [24] 2122 	mov	b,#0x08
      0006D5 A4               [48] 2123 	mul	ab
      0006D6 FD               [12] 2124 	mov	r5,a
      0006D7 AF F0            [24] 2125 	mov	r7,b
      0006D9 24r00            [12] 2126 	add	a,#_display
      0006DB FA               [12] 2127 	mov	r2,a
      0006DC EF               [12] 2128 	mov	a,r7
      0006DD 34s00            [12] 2129 	addc	a,#(_display >> 8)
      0006DF FB               [12] 2130 	mov	r3,a
      0006E0 E5*11            [12] 2131 	mov	a,_box_PARM_6
      0006E2 F9               [12] 2132 	mov	r1,a
      0006E3 2A               [12] 2133 	add	a,r2
      0006E4 FA               [12] 2134 	mov	r2,a
      0006E5 E4               [12] 2135 	clr	a
      0006E6 3B               [12] 2136 	addc	a,r3
      0006E7 FB               [12] 2137 	mov	r3,a
      0006E8 ED               [12] 2138 	mov	a,r5
      0006E9 24r00            [12] 2139 	add	a,#_display
      0006EB FD               [12] 2140 	mov	r5,a
      0006EC EF               [12] 2141 	mov	a,r7
      0006ED 34s00            [12] 2142 	addc	a,#(_display >> 8)
      0006EF FF               [12] 2143 	mov	r7,a
      0006F0 E9               [12] 2144 	mov	a,r1
      0006F1 2D               [12] 2145 	add	a,r5
      0006F2 F5 82            [12] 2146 	mov	dpl,a
      0006F4 E4               [12] 2147 	clr	a
      0006F5 3F               [12] 2148 	addc	a,r7
      0006F6 F5 83            [12] 2149 	mov	dph,a
      0006F8 E0               [24] 2150 	movx	a,@dptr
      0006F9 FF               [12] 2151 	mov	r7,a
      0006FA E5*16            [12] 2152 	mov	a,_box_t_1_35
      0006FC 52 07            [12] 2153 	anl	ar7,a
      0006FE 8A 82            [24] 2154 	mov	dpl,r2
      000700 8B 83            [24] 2155 	mov	dph,r3
      000702 EF               [12] 2156 	mov	a,r7
      000703 F0               [24] 2157 	movx	@dptr,a
      000704                       2158 00113$:
                                   2159 ;	888n.c:258: t=(0x01<<x1)|(0x01<<x2);
      000704 85*14 F0         [24] 2160 	mov	b,_box_x1_1_34
      000707 05 F0            [12] 2161 	inc	b
      000709 74 01            [12] 2162 	mov	a,#0x01
      00070B 80 02            [24] 2163 	sjmp	00290$
      00070D                       2164 00288$:
      00070D 25 E0            [12] 2165 	add	a,acc
      00070F                       2166 00290$:
      00070F D5 F0 FB         [24] 2167 	djnz	b,00288$
      000712 FF               [12] 2168 	mov	r7,a
      000713 85*0F F0         [24] 2169 	mov	b,_box_PARM_4
      000716 05 F0            [12] 2170 	inc	b
      000718 74 01            [12] 2171 	mov	a,#0x01
      00071A 80 02            [24] 2172 	sjmp	00293$
      00071C                       2173 00291$:
      00071C 25 E0            [12] 2174 	add	a,acc
      00071E                       2175 00293$:
      00071E D5 F0 FB         [24] 2176 	djnz	b,00291$
      000721 FD               [12] 2177 	mov	r5,a
      000722 4F               [12] 2178 	orl	a,r7
      000723 F5*16            [12] 2179 	mov	_box_t_1_35,a
                                   2180 ;	888n.c:259: if (!le) t = ~t;
      000725 E5*13            [12] 2181 	mov	a,_box_PARM_8
      000727 70 05            [24] 2182 	jnz	00115$
      000729 E5*16            [12] 2183 	mov	a,_box_t_1_35
      00072B F4               [12] 2184 	cpl	a
      00072C F5*16            [12] 2185 	mov	_box_t_1_35,a
      00072E                       2186 00115$:
                                   2187 ;	888n.c:260: if (le) {
      00072E E5*13            [12] 2188 	mov	a,_box_PARM_8
      000730 70 03            [24] 2189 	jnz	00295$
      000732 02r07rE0         [24] 2190 	ljmp	00125$
      000735                       2191 00295$:
                                   2192 ;	888n.c:261: for (j=z1;j<=z2;j+=(z2-z1)) {
      000735 85*0E*15         [24] 2193 	mov	_box_j_1_35,_box_PARM_3
      000738                       2194 00149$:
      000738 C3               [12] 2195 	clr	c
      000739 E5*11            [12] 2196 	mov	a,_box_PARM_6
      00073B 95*15            [12] 2197 	subb	a,_box_j_1_35
      00073D 40 4B            [24] 2198 	jc	00117$
                                   2199 ;	888n.c:262: for (i=y1;i<=y2;i++) display[i][j]|=t;
      00073F AE*0D            [24] 2200 	mov	r6,_box_PARM_2
      000741 8E 07            [24] 2201 	mov	ar7,r6
      000743                       2202 00146$:
      000743 C3               [12] 2203 	clr	c
      000744 E5*10            [12] 2204 	mov	a,_box_PARM_5
      000746 9F               [12] 2205 	subb	a,r7
      000747 40 36            [24] 2206 	jc	00150$
      000749 EF               [12] 2207 	mov	a,r7
      00074A 75 F0 08         [24] 2208 	mov	b,#0x08
      00074D A4               [48] 2209 	mul	ab
      00074E FB               [12] 2210 	mov	r3,a
      00074F AD F0            [24] 2211 	mov	r5,b
      000751 24r00            [12] 2212 	add	a,#_display
      000753 F9               [12] 2213 	mov	r1,a
      000754 ED               [12] 2214 	mov	a,r5
      000755 34s00            [12] 2215 	addc	a,#(_display >> 8)
      000757 FA               [12] 2216 	mov	r2,a
      000758 E5*15            [12] 2217 	mov	a,_box_j_1_35
      00075A 29               [12] 2218 	add	a,r1
      00075B F9               [12] 2219 	mov	r1,a
      00075C E4               [12] 2220 	clr	a
      00075D 3A               [12] 2221 	addc	a,r2
      00075E FA               [12] 2222 	mov	r2,a
      00075F EB               [12] 2223 	mov	a,r3
      000760 24r00            [12] 2224 	add	a,#_display
      000762 FB               [12] 2225 	mov	r3,a
      000763 ED               [12] 2226 	mov	a,r5
      000764 34s00            [12] 2227 	addc	a,#(_display >> 8)
      000766 FD               [12] 2228 	mov	r5,a
      000767 E5*15            [12] 2229 	mov	a,_box_j_1_35
      000769 2B               [12] 2230 	add	a,r3
      00076A F5 82            [12] 2231 	mov	dpl,a
      00076C E4               [12] 2232 	clr	a
      00076D 3D               [12] 2233 	addc	a,r5
      00076E F5 83            [12] 2234 	mov	dph,a
      000770 E0               [24] 2235 	movx	a,@dptr
      000771 FD               [12] 2236 	mov	r5,a
      000772 E5*16            [12] 2237 	mov	a,_box_t_1_35
      000774 42 05            [12] 2238 	orl	ar5,a
      000776 89 82            [24] 2239 	mov	dpl,r1
      000778 8A 83            [24] 2240 	mov	dph,r2
      00077A ED               [12] 2241 	mov	a,r5
      00077B F0               [24] 2242 	movx	@dptr,a
      00077C 0F               [12] 2243 	inc	r7
      00077D 80 C4            [24] 2244 	sjmp	00146$
      00077F                       2245 00150$:
                                   2246 ;	888n.c:261: for (j=z1;j<=z2;j+=(z2-z1)) {
      00077F E5*11            [12] 2247 	mov	a,_box_PARM_6
      000781 C3               [12] 2248 	clr	c
      000782 95*0E            [12] 2249 	subb	a,_box_PARM_3
      000784 25*15            [12] 2250 	add	a,_box_j_1_35
      000786 F5*15            [12] 2251 	mov	_box_j_1_35,a
      000788 80 AE            [24] 2252 	sjmp	00149$
      00078A                       2253 00117$:
                                   2254 ;	888n.c:264: for (j=y1;j<=y2;j+=(y2-y1)) {
      00078A 85*0D*15         [24] 2255 	mov	_box_j_1_35,_box_PARM_2
      00078D                       2256 00155$:
      00078D C3               [12] 2257 	clr	c
      00078E E5*10            [12] 2258 	mov	a,_box_PARM_5
      000790 95*15            [12] 2259 	subb	a,_box_j_1_35
      000792 50 01            [24] 2260 	jnc	00298$
      000794 22               [24] 2261 	ret
      000795                       2262 00298$:
                                   2263 ;	888n.c:265: for (i=z1;i<=z2;i++) display[j][i]|=t;
      000795 AE*0E            [24] 2264 	mov	r6,_box_PARM_3
      000797 E5*15            [12] 2265 	mov	a,_box_j_1_35
      000799 75 F0 08         [24] 2266 	mov	b,#0x08
      00079C A4               [48] 2267 	mul	ab
      00079D FD               [12] 2268 	mov	r5,a
      00079E AF F0            [24] 2269 	mov	r7,b
      0007A0 8E 03            [24] 2270 	mov	ar3,r6
      0007A2                       2271 00152$:
      0007A2 C3               [12] 2272 	clr	c
      0007A3 E5*11            [12] 2273 	mov	a,_box_PARM_6
      0007A5 9B               [12] 2274 	subb	a,r3
      0007A6 40 2D            [24] 2275 	jc	00156$
      0007A8 ED               [12] 2276 	mov	a,r5
      0007A9 24r00            [12] 2277 	add	a,#_display
      0007AB F9               [12] 2278 	mov	r1,a
      0007AC EF               [12] 2279 	mov	a,r7
      0007AD 34s00            [12] 2280 	addc	a,#(_display >> 8)
      0007AF FA               [12] 2281 	mov	r2,a
      0007B0 EB               [12] 2282 	mov	a,r3
      0007B1 29               [12] 2283 	add	a,r1
      0007B2 F9               [12] 2284 	mov	r1,a
      0007B3 E4               [12] 2285 	clr	a
      0007B4 3A               [12] 2286 	addc	a,r2
      0007B5 FA               [12] 2287 	mov	r2,a
      0007B6 ED               [12] 2288 	mov	a,r5
      0007B7 24r00            [12] 2289 	add	a,#_display
      0007B9 F8               [12] 2290 	mov	r0,a
      0007BA EF               [12] 2291 	mov	a,r7
      0007BB 34s00            [12] 2292 	addc	a,#(_display >> 8)
      0007BD FC               [12] 2293 	mov	r4,a
      0007BE EB               [12] 2294 	mov	a,r3
      0007BF 28               [12] 2295 	add	a,r0
      0007C0 F5 82            [12] 2296 	mov	dpl,a
      0007C2 E4               [12] 2297 	clr	a
      0007C3 3C               [12] 2298 	addc	a,r4
      0007C4 F5 83            [12] 2299 	mov	dph,a
      0007C6 E0               [24] 2300 	movx	a,@dptr
      0007C7 FC               [12] 2301 	mov	r4,a
      0007C8 E5*16            [12] 2302 	mov	a,_box_t_1_35
      0007CA 42 04            [12] 2303 	orl	ar4,a
      0007CC 89 82            [24] 2304 	mov	dpl,r1
      0007CE 8A 83            [24] 2305 	mov	dph,r2
      0007D0 EC               [12] 2306 	mov	a,r4
      0007D1 F0               [24] 2307 	movx	@dptr,a
      0007D2 0B               [12] 2308 	inc	r3
      0007D3 80 CD            [24] 2309 	sjmp	00152$
      0007D5                       2310 00156$:
                                   2311 ;	888n.c:264: for (j=y1;j<=y2;j+=(y2-y1)) {
      0007D5 E5*10            [12] 2312 	mov	a,_box_PARM_5
      0007D7 C3               [12] 2313 	clr	c
      0007D8 95*0D            [12] 2314 	subb	a,_box_PARM_2
      0007DA 25*15            [12] 2315 	add	a,_box_j_1_35
      0007DC F5*15            [12] 2316 	mov	_box_j_1_35,a
      0007DE 80 AD            [24] 2317 	sjmp	00155$
      0007E0                       2318 00125$:
                                   2319 ;	888n.c:268: for (j=z1;j<=z2;j+=(z2-z1)) {
      0007E0 85*0E*15         [24] 2320 	mov	_box_j_1_35,_box_PARM_3
      0007E3                       2321 00161$:
      0007E3 C3               [12] 2322 	clr	c
      0007E4 E5*11            [12] 2323 	mov	a,_box_PARM_6
      0007E6 95*15            [12] 2324 	subb	a,_box_j_1_35
      0007E8 40 4B            [24] 2325 	jc	00121$
                                   2326 ;	888n.c:269: for (i=y1;i<=y2;i++) display[i][j]&=t;
      0007EA AE*0D            [24] 2327 	mov	r6,_box_PARM_2
      0007EC 8E 07            [24] 2328 	mov	ar7,r6
      0007EE                       2329 00158$:
      0007EE C3               [12] 2330 	clr	c
      0007EF E5*10            [12] 2331 	mov	a,_box_PARM_5
      0007F1 9F               [12] 2332 	subb	a,r7
      0007F2 40 36            [24] 2333 	jc	00162$
      0007F4 EF               [12] 2334 	mov	a,r7
      0007F5 75 F0 08         [24] 2335 	mov	b,#0x08
      0007F8 A4               [48] 2336 	mul	ab
      0007F9 FD               [12] 2337 	mov	r5,a
      0007FA AE F0            [24] 2338 	mov	r6,b
      0007FC 24r00            [12] 2339 	add	a,#_display
      0007FE FB               [12] 2340 	mov	r3,a
      0007FF EE               [12] 2341 	mov	a,r6
      000800 34s00            [12] 2342 	addc	a,#(_display >> 8)
      000802 FC               [12] 2343 	mov	r4,a
      000803 E5*15            [12] 2344 	mov	a,_box_j_1_35
      000805 2B               [12] 2345 	add	a,r3
      000806 FB               [12] 2346 	mov	r3,a
      000807 E4               [12] 2347 	clr	a
      000808 3C               [12] 2348 	addc	a,r4
      000809 FC               [12] 2349 	mov	r4,a
      00080A ED               [12] 2350 	mov	a,r5
      00080B 24r00            [12] 2351 	add	a,#_display
      00080D FD               [12] 2352 	mov	r5,a
      00080E EE               [12] 2353 	mov	a,r6
      00080F 34s00            [12] 2354 	addc	a,#(_display >> 8)
      000811 FE               [12] 2355 	mov	r6,a
      000812 E5*15            [12] 2356 	mov	a,_box_j_1_35
      000814 2D               [12] 2357 	add	a,r5
      000815 F5 82            [12] 2358 	mov	dpl,a
      000817 E4               [12] 2359 	clr	a
      000818 3E               [12] 2360 	addc	a,r6
      000819 F5 83            [12] 2361 	mov	dph,a
      00081B E0               [24] 2362 	movx	a,@dptr
      00081C FE               [12] 2363 	mov	r6,a
      00081D E5*16            [12] 2364 	mov	a,_box_t_1_35
      00081F 52 06            [12] 2365 	anl	ar6,a
      000821 8B 82            [24] 2366 	mov	dpl,r3
      000823 8C 83            [24] 2367 	mov	dph,r4
      000825 EE               [12] 2368 	mov	a,r6
      000826 F0               [24] 2369 	movx	@dptr,a
      000827 0F               [12] 2370 	inc	r7
      000828 80 C4            [24] 2371 	sjmp	00158$
      00082A                       2372 00162$:
                                   2373 ;	888n.c:268: for (j=z1;j<=z2;j+=(z2-z1)) {
      00082A E5*11            [12] 2374 	mov	a,_box_PARM_6
      00082C C3               [12] 2375 	clr	c
      00082D 95*0E            [12] 2376 	subb	a,_box_PARM_3
      00082F 25*15            [12] 2377 	add	a,_box_j_1_35
      000831 F5*15            [12] 2378 	mov	_box_j_1_35,a
      000833 80 AE            [24] 2379 	sjmp	00161$
      000835                       2380 00121$:
                                   2381 ;	888n.c:271: for (j=y1;j<=y2;j+=(y2-y1)) {
      000835 85*0D*15         [24] 2382 	mov	_box_j_1_35,_box_PARM_2
      000838                       2383 00167$:
      000838 C3               [12] 2384 	clr	c
      000839 E5*10            [12] 2385 	mov	a,_box_PARM_5
      00083B 95*15            [12] 2386 	subb	a,_box_j_1_35
      00083D 40 49            [24] 2387 	jc	00169$
                                   2388 ;	888n.c:272: for (i=z1;i<=z2;i++) display[j][i]&=t;
      00083F AF*0E            [24] 2389 	mov	r7,_box_PARM_3
      000841 E5*15            [12] 2390 	mov	a,_box_j_1_35
      000843 75 F0 08         [24] 2391 	mov	b,#0x08
      000846 A4               [48] 2392 	mul	ab
      000847 FD               [12] 2393 	mov	r5,a
      000848 AE F0            [24] 2394 	mov	r6,b
      00084A                       2395 00164$:
      00084A C3               [12] 2396 	clr	c
      00084B E5*11            [12] 2397 	mov	a,_box_PARM_6
      00084D 9F               [12] 2398 	subb	a,r7
      00084E 40 2D            [24] 2399 	jc	00168$
      000850 ED               [12] 2400 	mov	a,r5
      000851 24r00            [12] 2401 	add	a,#_display
      000853 FB               [12] 2402 	mov	r3,a
      000854 EE               [12] 2403 	mov	a,r6
      000855 34s00            [12] 2404 	addc	a,#(_display >> 8)
      000857 FC               [12] 2405 	mov	r4,a
      000858 EF               [12] 2406 	mov	a,r7
      000859 2B               [12] 2407 	add	a,r3
      00085A FB               [12] 2408 	mov	r3,a
      00085B E4               [12] 2409 	clr	a
      00085C 3C               [12] 2410 	addc	a,r4
      00085D FC               [12] 2411 	mov	r4,a
      00085E ED               [12] 2412 	mov	a,r5
      00085F 24r00            [12] 2413 	add	a,#_display
      000861 F9               [12] 2414 	mov	r1,a
      000862 EE               [12] 2415 	mov	a,r6
      000863 34s00            [12] 2416 	addc	a,#(_display >> 8)
      000865 FA               [12] 2417 	mov	r2,a
      000866 EF               [12] 2418 	mov	a,r7
      000867 29               [12] 2419 	add	a,r1
      000868 F5 82            [12] 2420 	mov	dpl,a
      00086A E4               [12] 2421 	clr	a
      00086B 3A               [12] 2422 	addc	a,r2
      00086C F5 83            [12] 2423 	mov	dph,a
      00086E E0               [24] 2424 	movx	a,@dptr
      00086F FA               [12] 2425 	mov	r2,a
      000870 E5*16            [12] 2426 	mov	a,_box_t_1_35
      000872 52 02            [12] 2427 	anl	ar2,a
      000874 8B 82            [24] 2428 	mov	dpl,r3
      000876 8C 83            [24] 2429 	mov	dph,r4
      000878 EA               [12] 2430 	mov	a,r2
      000879 F0               [24] 2431 	movx	@dptr,a
      00087A 0F               [12] 2432 	inc	r7
      00087B 80 CD            [24] 2433 	sjmp	00164$
      00087D                       2434 00168$:
                                   2435 ;	888n.c:271: for (j=y1;j<=y2;j+=(y2-y1)) {
      00087D E5*10            [12] 2436 	mov	a,_box_PARM_5
      00087F C3               [12] 2437 	clr	c
      000880 95*0D            [12] 2438 	subb	a,_box_PARM_2
      000882 25*15            [12] 2439 	add	a,_box_j_1_35
      000884 F5*15            [12] 2440 	mov	_box_j_1_35,a
      000886 80 B0            [24] 2441 	sjmp	00167$
      000888                       2442 00169$:
      000888 22               [24] 2443 	ret
                                   2444 ;------------------------------------------------------------
                                   2445 ;Allocation info for local variables in function 'box_apeak_xy'
                                   2446 ;------------------------------------------------------------
                                   2447 ;y1                        Allocated with name '_box_apeak_xy_PARM_2'
                                   2448 ;z1                        Allocated with name '_box_apeak_xy_PARM_3'
                                   2449 ;x2                        Allocated with name '_box_apeak_xy_PARM_4'
                                   2450 ;y2                        Allocated with name '_box_apeak_xy_PARM_5'
                                   2451 ;z2                        Allocated with name '_box_apeak_xy_PARM_6'
                                   2452 ;fill                      Allocated with name '_box_apeak_xy_PARM_7'
                                   2453 ;le                        Allocated with name '_box_apeak_xy_PARM_8'
                                   2454 ;x1                        Allocated to registers r7 
                                   2455 ;i                         Allocated to registers 
                                   2456 ;------------------------------------------------------------
                                   2457 ;	888n.c:278: void box_apeak_xy(uchar x1, uchar y1, uchar z1, uchar x2, uchar y2, uchar z2, uchar fill, uchar le)
                                   2458 ;	-----------------------------------------
                                   2459 ;	 function box_apeak_xy
                                   2460 ;	-----------------------------------------
      000889                       2461 _box_apeak_xy:
      000889 AF 82            [24] 2462 	mov	r7,dpl
                                   2463 ;	888n.c:282: max(&z1, &z2);
      00088B 75*00r1B         [24] 2464 	mov	_max_PARM_2,#_box_apeak_xy_PARM_6
      00088E 75*01 00         [24] 2465 	mov	(_max_PARM_2 + 1),#0x00
      000891 75*02 40         [24] 2466 	mov	(_max_PARM_2 + 2),#0x40
      000894 90r00r18         [24] 2467 	mov	dptr,#_box_apeak_xy_PARM_3
      000897 75 F0 40         [24] 2468 	mov	b,#0x40
      00089A C0 07            [24] 2469 	push	ar7
      00089C 12r00r82         [24] 2470 	lcall	_max
      00089F D0 07            [24] 2471 	pop	ar7
                                   2472 ;	888n.c:283: if (fill) {
      0008A1 E5*1C            [12] 2473 	mov	a,_box_apeak_xy_PARM_7
      0008A3 60 29            [24] 2474 	jz	00103$
                                   2475 ;	888n.c:284: for (i=z1;i<=z2;i++) line (x1, y1, i, x2, y2, i, le);
      0008A5 AE*18            [24] 2476 	mov	r6,_box_apeak_xy_PARM_3
      0008A7                       2477 00106$:
      0008A7 C3               [12] 2478 	clr	c
      0008A8 E5*1B            [12] 2479 	mov	a,_box_apeak_xy_PARM_6
      0008AA 9E               [12] 2480 	subb	a,r6
      0008AB 50 01            [24] 2481 	jnc	00121$
      0008AD 22               [24] 2482 	ret
      0008AE                       2483 00121$:
      0008AE 85*17*04         [24] 2484 	mov	_line_PARM_2,_box_apeak_xy_PARM_2
      0008B1 8E*05            [24] 2485 	mov	_line_PARM_3,r6
      0008B3 85*19*06         [24] 2486 	mov	_line_PARM_4,_box_apeak_xy_PARM_4
      0008B6 85*1A*07         [24] 2487 	mov	_line_PARM_5,_box_apeak_xy_PARM_5
      0008B9 8E*08            [24] 2488 	mov	_line_PARM_6,r6
      0008BB 85*1D*09         [24] 2489 	mov	_line_PARM_7,_box_apeak_xy_PARM_8
      0008BE 8F 82            [24] 2490 	mov	dpl,r7
      0008C0 C0 07            [24] 2491 	push	ar7
      0008C2 C0 06            [24] 2492 	push	ar6
      0008C4 12r02rAD         [24] 2493 	lcall	_line
      0008C7 D0 06            [24] 2494 	pop	ar6
      0008C9 D0 07            [24] 2495 	pop	ar7
      0008CB 0E               [12] 2496 	inc	r6
      0008CC 80 D9            [24] 2497 	sjmp	00106$
      0008CE                       2498 00103$:
                                   2499 ;	888n.c:286: line (x1,y1,z1,x2,y2,z1,le);
      0008CE 85*17*04         [24] 2500 	mov	_line_PARM_2,_box_apeak_xy_PARM_2
      0008D1 85*18*05         [24] 2501 	mov	_line_PARM_3,_box_apeak_xy_PARM_3
      0008D4 85*19*06         [24] 2502 	mov	_line_PARM_4,_box_apeak_xy_PARM_4
      0008D7 85*1A*07         [24] 2503 	mov	_line_PARM_5,_box_apeak_xy_PARM_5
      0008DA 85*18*08         [24] 2504 	mov	_line_PARM_6,_box_apeak_xy_PARM_3
      0008DD 85*1D*09         [24] 2505 	mov	_line_PARM_7,_box_apeak_xy_PARM_8
      0008E0 8F 82            [24] 2506 	mov	dpl,r7
      0008E2 C0 07            [24] 2507 	push	ar7
      0008E4 12r02rAD         [24] 2508 	lcall	_line
      0008E7 D0 07            [24] 2509 	pop	ar7
                                   2510 ;	888n.c:287: line (x1,y1,z2,x2,y2,z2,le);
      0008E9 85*17*04         [24] 2511 	mov	_line_PARM_2,_box_apeak_xy_PARM_2
      0008EC 85*1B*05         [24] 2512 	mov	_line_PARM_3,_box_apeak_xy_PARM_6
      0008EF 85*19*06         [24] 2513 	mov	_line_PARM_4,_box_apeak_xy_PARM_4
      0008F2 85*1A*07         [24] 2514 	mov	_line_PARM_5,_box_apeak_xy_PARM_5
      0008F5 85*1B*08         [24] 2515 	mov	_line_PARM_6,_box_apeak_xy_PARM_6
      0008F8 85*1D*09         [24] 2516 	mov	_line_PARM_7,_box_apeak_xy_PARM_8
      0008FB 8F 82            [24] 2517 	mov	dpl,r7
      0008FD C0 07            [24] 2518 	push	ar7
      0008FF 12r02rAD         [24] 2519 	lcall	_line
                                   2520 ;	888n.c:288: line (x2,y2,z1,x2,y2,z2,le);
      000902 85*1A*04         [24] 2521 	mov	_line_PARM_2,_box_apeak_xy_PARM_5
      000905 85*18*05         [24] 2522 	mov	_line_PARM_3,_box_apeak_xy_PARM_3
      000908 85*19*06         [24] 2523 	mov	_line_PARM_4,_box_apeak_xy_PARM_4
      00090B 85*1A*07         [24] 2524 	mov	_line_PARM_5,_box_apeak_xy_PARM_5
      00090E 85*1B*08         [24] 2525 	mov	_line_PARM_6,_box_apeak_xy_PARM_6
      000911 85*1D*09         [24] 2526 	mov	_line_PARM_7,_box_apeak_xy_PARM_8
      000914 85*19 82         [24] 2527 	mov	dpl,_box_apeak_xy_PARM_4
      000917 12r02rAD         [24] 2528 	lcall	_line
      00091A D0 07            [24] 2529 	pop	ar7
                                   2530 ;	888n.c:289: line (x1,y1,z1,x1,y1,z2,le);
      00091C 85*17*04         [24] 2531 	mov	_line_PARM_2,_box_apeak_xy_PARM_2
      00091F 85*18*05         [24] 2532 	mov	_line_PARM_3,_box_apeak_xy_PARM_3
      000922 8F*06            [24] 2533 	mov	_line_PARM_4,r7
      000924 85*17*07         [24] 2534 	mov	_line_PARM_5,_box_apeak_xy_PARM_2
      000927 85*1B*08         [24] 2535 	mov	_line_PARM_6,_box_apeak_xy_PARM_6
      00092A 85*1D*09         [24] 2536 	mov	_line_PARM_7,_box_apeak_xy_PARM_8
      00092D 8F 82            [24] 2537 	mov	dpl,r7
      00092F 02r02rAD         [24] 2538 	ljmp	_line
                                   2539 ;------------------------------------------------------------
                                   2540 ;Allocation info for local variables in function 'poke'
                                   2541 ;------------------------------------------------------------
                                   2542 ;x                         Allocated with name '_poke_PARM_2'
                                   2543 ;y                         Allocated with name '_poke_PARM_3'
                                   2544 ;n                         Allocated to registers r7 
                                   2545 ;i                         Allocated to registers r6 
                                   2546 ;------------------------------------------------------------
                                   2547 ;	888n.c:293: void poke(uchar n, uchar x, uchar y)
                                   2548 ;	-----------------------------------------
                                   2549 ;	 function poke
                                   2550 ;	-----------------------------------------
      000932                       2551 _poke:
      000932 AF 82            [24] 2552 	mov	r7,dpl
                                   2553 ;	888n.c:297: for (i=0; i<8; i++) point(x, y, i, judgebit(n,i));
      000934 7E 00            [12] 2554 	mov	r6,#0x00
      000936                       2555 00102$:
      000936 8E*00            [24] 2556 	mov	_judgebit_PARM_2,r6
      000938 8F 82            [24] 2557 	mov	dpl,r7
      00093A C0 07            [24] 2558 	push	ar7
      00093C C0 06            [24] 2559 	push	ar6
      00093E 12r00r3F         [24] 2560 	lcall	_judgebit
      000941 85 82*02         [24] 2561 	mov	_point_PARM_4,dpl
      000944 D0 06            [24] 2562 	pop	ar6
      000946 85*1F*00         [24] 2563 	mov	_point_PARM_2,_poke_PARM_3
      000949 8E*01            [24] 2564 	mov	_point_PARM_3,r6
      00094B 85*1E 82         [24] 2565 	mov	dpl,_poke_PARM_2
      00094E C0 06            [24] 2566 	push	ar6
      000950 12r01rB1         [24] 2567 	lcall	_point
      000953 D0 06            [24] 2568 	pop	ar6
      000955 D0 07            [24] 2569 	pop	ar7
      000957 0E               [12] 2570 	inc	r6
      000958 BE 08 00         [24] 2571 	cjne	r6,#0x08,00110$
      00095B                       2572 00110$:
      00095B 40 D9            [24] 2573 	jc	00102$
      00095D 22               [24] 2574 	ret
                                   2575 ;------------------------------------------------------------
                                   2576 ;Allocation info for local variables in function 'boxtola'
                                   2577 ;------------------------------------------------------------
                                   2578 ;n                         Allocated with name '_boxtola_PARM_2'
                                   2579 ;i                         Allocated to registers r7 
                                   2580 ;------------------------------------------------------------
                                   2581 ;	888n.c:300: void boxtola(char i,uchar n)
                                   2582 ;	-----------------------------------------
                                   2583 ;	 function boxtola
                                   2584 ;	-----------------------------------------
      00095E                       2585 _boxtola:
                                   2586 ;	888n.c:302: if ((i>=0)&(i<8)) poke(n,0,7-i);
      00095E E5 82            [12] 2587 	mov	a,dpl
      000960 FF               [12] 2588 	mov	r7,a
      000961 33               [12] 2589 	rlc	a
      000962 B3               [12] 2590 	cpl	c
      000963 92*00            [24] 2591 	mov	_boxtola_sloc0_1_0,c
      000965 C3               [12] 2592 	clr	c
      000966 EF               [12] 2593 	mov	a,r7
      000967 64 80            [12] 2594 	xrl	a,#0x80
      000969 94 88            [12] 2595 	subb	a,#0x88
      00096B E4               [12] 2596 	clr	a
      00096C 33               [12] 2597 	rlc	a
      00096D FE               [12] 2598 	mov	r6,a
      00096E A2*00            [12] 2599 	mov	c,_boxtola_sloc0_1_0
      000970 E4               [12] 2600 	clr	a
      000971 33               [12] 2601 	rlc	a
      000972 FD               [12] 2602 	mov	r5,a
      000973 EE               [12] 2603 	mov	a,r6
      000974 5D               [12] 2604 	anl	a,r5
      000975 60 13            [24] 2605 	jz	00102$
      000977 74 07            [12] 2606 	mov	a,#0x07
      000979 C3               [12] 2607 	clr	c
      00097A 9F               [12] 2608 	subb	a,r7
      00097B F5*1F            [12] 2609 	mov	_poke_PARM_3,a
      00097D 75*1E 00         [24] 2610 	mov	_poke_PARM_2,#0x00
      000980 85*20 82         [24] 2611 	mov	dpl,_boxtola_PARM_2
      000983 C0 07            [24] 2612 	push	ar7
      000985 12r09r32         [24] 2613 	lcall	_poke
      000988 D0 07            [24] 2614 	pop	ar7
      00098A                       2615 00102$:
                                   2616 ;	888n.c:303: if ((i>=8)&(i<16)) poke(n,i-8,0);
      00098A C3               [12] 2617 	clr	c
      00098B EF               [12] 2618 	mov	a,r7
      00098C 64 80            [12] 2619 	xrl	a,#0x80
      00098E 94 88            [12] 2620 	subb	a,#0x88
      000990 B3               [12] 2621 	cpl	c
      000991 92*00            [24] 2622 	mov	_boxtola_sloc0_1_0,c
      000993 C3               [12] 2623 	clr	c
      000994 EF               [12] 2624 	mov	a,r7
      000995 64 80            [12] 2625 	xrl	a,#0x80
      000997 94 90            [12] 2626 	subb	a,#0x90
      000999 E4               [12] 2627 	clr	a
      00099A 33               [12] 2628 	rlc	a
      00099B FE               [12] 2629 	mov	r6,a
      00099C A2*00            [12] 2630 	mov	c,_boxtola_sloc0_1_0
      00099E E4               [12] 2631 	clr	a
      00099F 33               [12] 2632 	rlc	a
      0009A0 FD               [12] 2633 	mov	r5,a
      0009A1 EE               [12] 2634 	mov	a,r6
      0009A2 5D               [12] 2635 	anl	a,r5
      0009A3 60 12            [24] 2636 	jz	00104$
      0009A5 EF               [12] 2637 	mov	a,r7
      0009A6 24 F8            [12] 2638 	add	a,#0xf8
      0009A8 F5*1E            [12] 2639 	mov	_poke_PARM_2,a
      0009AA 75*1F 00         [24] 2640 	mov	_poke_PARM_3,#0x00
      0009AD 85*20 82         [24] 2641 	mov	dpl,_boxtola_PARM_2
      0009B0 C0 07            [24] 2642 	push	ar7
      0009B2 12r09r32         [24] 2643 	lcall	_poke
      0009B5 D0 07            [24] 2644 	pop	ar7
      0009B7                       2645 00104$:
                                   2646 ;	888n.c:304: if ((i>=16)&(i<24)) poke(n,7,i-16);
      0009B7 C3               [12] 2647 	clr	c
      0009B8 EF               [12] 2648 	mov	a,r7
      0009B9 64 80            [12] 2649 	xrl	a,#0x80
      0009BB 94 90            [12] 2650 	subb	a,#0x90
      0009BD B3               [12] 2651 	cpl	c
      0009BE 92*00            [24] 2652 	mov	_boxtola_sloc0_1_0,c
      0009C0 C3               [12] 2653 	clr	c
      0009C1 EF               [12] 2654 	mov	a,r7
      0009C2 64 80            [12] 2655 	xrl	a,#0x80
      0009C4 94 98            [12] 2656 	subb	a,#0x98
      0009C6 E4               [12] 2657 	clr	a
      0009C7 33               [12] 2658 	rlc	a
      0009C8 FE               [12] 2659 	mov	r6,a
      0009C9 A2*00            [12] 2660 	mov	c,_boxtola_sloc0_1_0
      0009CB E4               [12] 2661 	clr	a
      0009CC 33               [12] 2662 	rlc	a
      0009CD FD               [12] 2663 	mov	r5,a
      0009CE EE               [12] 2664 	mov	a,r6
      0009CF 5D               [12] 2665 	anl	a,r5
      0009D0 60 0E            [24] 2666 	jz	00107$
      0009D2 EF               [12] 2667 	mov	a,r7
      0009D3 24 F0            [12] 2668 	add	a,#0xf0
      0009D5 F5*1F            [12] 2669 	mov	_poke_PARM_3,a
      0009D7 75*1E 07         [24] 2670 	mov	_poke_PARM_2,#0x07
      0009DA 85*20 82         [24] 2671 	mov	dpl,_boxtola_PARM_2
      0009DD 02r09r32         [24] 2672 	ljmp	_poke
      0009E0                       2673 00107$:
      0009E0 22               [24] 2674 	ret
                                   2675 ;------------------------------------------------------------
                                   2676 ;Allocation info for local variables in function 'rolldisplay'
                                   2677 ;------------------------------------------------------------
                                   2678 ;speed                     Allocated to registers r6 r7 
                                   2679 ;j                         Allocated to registers r4 
                                   2680 ;i                         Allocated to registers r5 
                                   2681 ;a                         Allocated to registers r3 
                                   2682 ;------------------------------------------------------------
                                   2683 ;	888n.c:307: void rolldisplay(uint speed)
                                   2684 ;	-----------------------------------------
                                   2685 ;	 function rolldisplay
                                   2686 ;	-----------------------------------------
      0009E1                       2687 _rolldisplay:
      0009E1 AE 82            [24] 2688 	mov	r6,dpl
      0009E3 AF 83            [24] 2689 	mov	r7,dph
                                   2690 ;	888n.c:312: for (i=23;i>-40;i--) {
      0009E5 7D 17            [12] 2691 	mov	r5,#0x17
                                   2692 ;	888n.c:313: for (j=0;j<40;j++) {
      0009E7                       2693 00114$:
      0009E7 7C 00            [12] 2694 	mov	r4,#0x00
      0009E9                       2695 00106$:
                                   2696 ;	888n.c:314: a=i+j;
      0009E9 8C 03            [24] 2697 	mov	ar3,r4
      0009EB EB               [12] 2698 	mov	a,r3
      0009EC 2D               [12] 2699 	add	a,r5
                                   2700 ;	888n.c:315: if ((a>=0) && (a<24)) boxtola(a, table_id[j]);
      0009ED FB               [12] 2701 	mov	r3,a
      0009EE 20 E7 24         [24] 2702 	jb	acc.7,00107$
      0009F1 C3               [12] 2703 	clr	c
      0009F2 EB               [12] 2704 	mov	a,r3
      0009F3 64 80            [12] 2705 	xrl	a,#0x80
      0009F5 94 98            [12] 2706 	subb	a,#0x98
      0009F7 50 1C            [24] 2707 	jnc	00107$
      0009F9 EC               [12] 2708 	mov	a,r4
      0009FA 90r00r40         [24] 2709 	mov	dptr,#_table_id
      0009FD 93               [24] 2710 	movc	a,@a+dptr
      0009FE F5*20            [12] 2711 	mov	_boxtola_PARM_2,a
      000A00 8B 82            [24] 2712 	mov	dpl,r3
      000A02 C0 07            [24] 2713 	push	ar7
      000A04 C0 06            [24] 2714 	push	ar6
      000A06 C0 05            [24] 2715 	push	ar5
      000A08 C0 04            [24] 2716 	push	ar4
      000A0A 12r09r5E         [24] 2717 	lcall	_boxtola
      000A0D D0 04            [24] 2718 	pop	ar4
      000A0F D0 05            [24] 2719 	pop	ar5
      000A11 D0 06            [24] 2720 	pop	ar6
      000A13 D0 07            [24] 2721 	pop	ar7
      000A15                       2722 00107$:
                                   2723 ;	888n.c:313: for (j=0;j<40;j++) {
      000A15 0C               [12] 2724 	inc	r4
      000A16 BC 28 00         [24] 2725 	cjne	r4,#0x28,00131$
      000A19                       2726 00131$:
      000A19 40 CE            [24] 2727 	jc	00106$
                                   2728 ;	888n.c:318: delay(speed);
      000A1B 8E 82            [24] 2729 	mov	dpl,r6
      000A1D 8F 83            [24] 2730 	mov	dph,r7
      000A1F C0 07            [24] 2731 	push	ar7
      000A21 C0 06            [24] 2732 	push	ar6
      000A23 C0 05            [24] 2733 	push	ar5
      000A25 12r00r20         [24] 2734 	lcall	_delay
      000A28 D0 05            [24] 2735 	pop	ar5
      000A2A D0 06            [24] 2736 	pop	ar6
      000A2C D0 07            [24] 2737 	pop	ar7
                                   2738 ;	888n.c:312: for (i=23;i>-40;i--) {
      000A2E 1D               [12] 2739 	dec	r5
      000A2F C3               [12] 2740 	clr	c
      000A30 74 58            [12] 2741 	mov	a,#(0xd8 ^ 0x80)
      000A32 8D F0            [24] 2742 	mov	b,r5
      000A34 63 F0 80         [24] 2743 	xrl	b,#0x80
      000A37 95 F0            [12] 2744 	subb	a,b
      000A39 40 AC            [24] 2745 	jc	00114$
      000A3B 22               [24] 2746 	ret
                                   2747 ;------------------------------------------------------------
                                   2748 ;Allocation info for local variables in function 'roll_apeak_yz'
                                   2749 ;------------------------------------------------------------
                                   2750 ;speed                     Allocated with name '_roll_apeak_yz_PARM_2'
                                   2751 ;n                         Allocated to registers r7 
                                   2752 ;i                         Allocated to registers r7 
                                   2753 ;------------------------------------------------------------
                                   2754 ;	888n.c:322: void roll_apeak_yz(uchar n,uint speed)
                                   2755 ;	-----------------------------------------
                                   2756 ;	 function roll_apeak_yz
                                   2757 ;	-----------------------------------------
      000A3C                       2758 _roll_apeak_yz:
                                   2759 ;	888n.c:326: switch(n) {
      000A3C E5 82            [12] 2760 	mov	a,dpl
      000A3E FF               [12] 2761 	mov	r7,a
      000A3F 24 FC            [12] 2762 	add	a,#0xff - 0x03
      000A41 50 01            [24] 2763 	jnc	00147$
      000A43 22               [24] 2764 	ret
      000A44                       2765 00147$:
      000A44 EF               [12] 2766 	mov	a,r7
      000A45 2F               [12] 2767 	add	a,r7
      000A46 2F               [12] 2768 	add	a,r7
      000A47 90r0Ar4B         [24] 2769 	mov	dptr,#00148$
      000A4A 73               [24] 2770 	jmp	@a+dptr
      000A4B                       2771 00148$:
      000A4B 02r0Br09         [24] 2772 	ljmp	00107$
      000A4E 02r0Ar57         [24] 2773 	ljmp	00101$
      000A51 02r0Ar95         [24] 2774 	ljmp	00103$
      000A54 02r0ArCF         [24] 2775 	ljmp	00105$
                                   2776 ;	888n.c:327: case 1:
      000A57                       2777 00101$:
                                   2778 ;	888n.c:328: for (i=0;i<7;i++) {
      000A57 7F 00            [12] 2779 	mov	r7,#0x00
      000A59                       2780 00111$:
                                   2781 ;	888n.c:329: display[i][7]=0;
      000A59 EF               [12] 2782 	mov	a,r7
      000A5A 75 F0 08         [24] 2783 	mov	b,#0x08
      000A5D A4               [48] 2784 	mul	ab
      000A5E 24r00            [12] 2785 	add	a,#_display
      000A60 FD               [12] 2786 	mov	r5,a
      000A61 74s00            [12] 2787 	mov	a,#(_display >> 8)
      000A63 35 F0            [12] 2788 	addc	a,b
      000A65 FE               [12] 2789 	mov	r6,a
      000A66 74 07            [12] 2790 	mov	a,#0x07
      000A68 2D               [12] 2791 	add	a,r5
      000A69 F5 82            [12] 2792 	mov	dpl,a
      000A6B E4               [12] 2793 	clr	a
      000A6C 3E               [12] 2794 	addc	a,r6
      000A6D F5 83            [12] 2795 	mov	dph,a
      000A6F E4               [12] 2796 	clr	a
      000A70 F0               [24] 2797 	movx	@dptr,a
                                   2798 ;	888n.c:330: display[7][6-i]=255;
      000A71 74 06            [12] 2799 	mov	a,#0x06
      000A73 C3               [12] 2800 	clr	c
      000A74 9F               [12] 2801 	subb	a,r7
      000A75 24r38            [12] 2802 	add	a,#(_display + 0x0038)
      000A77 F5 82            [12] 2803 	mov	dpl,a
      000A79 E4               [12] 2804 	clr	a
      000A7A 34s00            [12] 2805 	addc	a,#((_display + 0x0038) >> 8)
      000A7C F5 83            [12] 2806 	mov	dph,a
      000A7E 74 FF            [12] 2807 	mov	a,#0xff
      000A80 F0               [24] 2808 	movx	@dptr,a
                                   2809 ;	888n.c:331: delay(speed);
      000A81 85*21 82         [24] 2810 	mov	dpl,_roll_apeak_yz_PARM_2
      000A84 85*22 83         [24] 2811 	mov	dph,(_roll_apeak_yz_PARM_2 + 1)
      000A87 C0 07            [24] 2812 	push	ar7
      000A89 12r00r20         [24] 2813 	lcall	_delay
      000A8C D0 07            [24] 2814 	pop	ar7
                                   2815 ;	888n.c:328: for (i=0;i<7;i++) {
      000A8E 0F               [12] 2816 	inc	r7
      000A8F BF 07 00         [24] 2817 	cjne	r7,#0x07,00149$
      000A92                       2818 00149$:
      000A92 40 C5            [24] 2819 	jc	00111$
                                   2820 ;	888n.c:333: break;
      000A94 22               [24] 2821 	ret
                                   2822 ;	888n.c:334: case 2:
      000A95                       2823 00103$:
                                   2824 ;	888n.c:335: for (i=0;i<7;i++) {
      000A95 7F 00            [12] 2825 	mov	r7,#0x00
      000A97                       2826 00113$:
                                   2827 ;	888n.c:336: display[7][7-i]=0;
      000A97 74 07            [12] 2828 	mov	a,#0x07
      000A99 C3               [12] 2829 	clr	c
      000A9A 9F               [12] 2830 	subb	a,r7
      000A9B 24r38            [12] 2831 	add	a,#(_display + 0x0038)
      000A9D F5 82            [12] 2832 	mov	dpl,a
      000A9F E4               [12] 2833 	clr	a
      000AA0 34s00            [12] 2834 	addc	a,#((_display + 0x0038) >> 8)
      000AA2 F5 83            [12] 2835 	mov	dph,a
      000AA4 E4               [12] 2836 	clr	a
      000AA5 F0               [24] 2837 	movx	@dptr,a
                                   2838 ;	888n.c:337: display[6-i][0]=255;
      000AA6 74 06            [12] 2839 	mov	a,#0x06
      000AA8 C3               [12] 2840 	clr	c
      000AA9 9F               [12] 2841 	subb	a,r7
      000AAA 75 F0 08         [24] 2842 	mov	b,#0x08
      000AAD A4               [48] 2843 	mul	ab
      000AAE 24r00            [12] 2844 	add	a,#_display
      000AB0 F5 82            [12] 2845 	mov	dpl,a
      000AB2 74s00            [12] 2846 	mov	a,#(_display >> 8)
      000AB4 35 F0            [12] 2847 	addc	a,b
      000AB6 F5 83            [12] 2848 	mov	dph,a
      000AB8 74 FF            [12] 2849 	mov	a,#0xff
      000ABA F0               [24] 2850 	movx	@dptr,a
                                   2851 ;	888n.c:338: delay(speed);
      000ABB 85*21 82         [24] 2852 	mov	dpl,_roll_apeak_yz_PARM_2
      000ABE 85*22 83         [24] 2853 	mov	dph,(_roll_apeak_yz_PARM_2 + 1)
      000AC1 C0 07            [24] 2854 	push	ar7
      000AC3 12r00r20         [24] 2855 	lcall	_delay
      000AC6 D0 07            [24] 2856 	pop	ar7
                                   2857 ;	888n.c:335: for (i=0;i<7;i++) {
      000AC8 0F               [12] 2858 	inc	r7
      000AC9 BF 07 00         [24] 2859 	cjne	r7,#0x07,00151$
      000ACC                       2860 00151$:
      000ACC 40 C9            [24] 2861 	jc	00113$
                                   2862 ;	888n.c:340: break;
      000ACE 22               [24] 2863 	ret
                                   2864 ;	888n.c:341: case 3:
      000ACF                       2865 00105$:
                                   2866 ;	888n.c:342: for (i=0;i<7;i++) {
      000ACF 7F 00            [12] 2867 	mov	r7,#0x00
      000AD1                       2868 00115$:
                                   2869 ;	888n.c:343: display[7-i][0]=0;
      000AD1 74 07            [12] 2870 	mov	a,#0x07
      000AD3 C3               [12] 2871 	clr	c
      000AD4 9F               [12] 2872 	subb	a,r7
      000AD5 75 F0 08         [24] 2873 	mov	b,#0x08
      000AD8 A4               [48] 2874 	mul	ab
      000AD9 24r00            [12] 2875 	add	a,#_display
      000ADB F5 82            [12] 2876 	mov	dpl,a
      000ADD 74s00            [12] 2877 	mov	a,#(_display >> 8)
      000ADF 35 F0            [12] 2878 	addc	a,b
      000AE1 F5 83            [12] 2879 	mov	dph,a
      000AE3 E4               [12] 2880 	clr	a
      000AE4 F0               [24] 2881 	movx	@dptr,a
                                   2882 ;	888n.c:344: display[0][i+1]=255;
      000AE5 EF               [12] 2883 	mov	a,r7
      000AE6 04               [12] 2884 	inc	a
      000AE7 FE               [12] 2885 	mov	r6,a
      000AE8 24r00            [12] 2886 	add	a,#_display
      000AEA F5 82            [12] 2887 	mov	dpl,a
      000AEC E4               [12] 2888 	clr	a
      000AED 34s00            [12] 2889 	addc	a,#(_display >> 8)
      000AEF F5 83            [12] 2890 	mov	dph,a
      000AF1 74 FF            [12] 2891 	mov	a,#0xff
      000AF3 F0               [24] 2892 	movx	@dptr,a
                                   2893 ;	888n.c:345: delay(speed);
      000AF4 85*21 82         [24] 2894 	mov	dpl,_roll_apeak_yz_PARM_2
      000AF7 85*22 83         [24] 2895 	mov	dph,(_roll_apeak_yz_PARM_2 + 1)
      000AFA C0 06            [24] 2896 	push	ar6
      000AFC 12r00r20         [24] 2897 	lcall	_delay
      000AFF D0 06            [24] 2898 	pop	ar6
                                   2899 ;	888n.c:342: for (i=0;i<7;i++) {
      000B01 8E 07            [24] 2900 	mov	ar7,r6
      000B03 BF 07 00         [24] 2901 	cjne	r7,#0x07,00153$
      000B06                       2902 00153$:
      000B06 40 C9            [24] 2903 	jc	00115$
                                   2904 ;	888n.c:347: break;
                                   2905 ;	888n.c:348: case 0:
      000B08 22               [24] 2906 	ret
      000B09                       2907 00107$:
                                   2908 ;	888n.c:349: for (i=0;i<7;i++) {
      000B09 7F 00            [12] 2909 	mov	r7,#0x00
      000B0B                       2910 00117$:
                                   2911 ;	888n.c:350: display[0][i]=0;
      000B0B EF               [12] 2912 	mov	a,r7
      000B0C 24r00            [12] 2913 	add	a,#_display
      000B0E F5 82            [12] 2914 	mov	dpl,a
      000B10 E4               [12] 2915 	clr	a
      000B11 34s00            [12] 2916 	addc	a,#(_display >> 8)
      000B13 F5 83            [12] 2917 	mov	dph,a
      000B15 E4               [12] 2918 	clr	a
      000B16 F0               [24] 2919 	movx	@dptr,a
                                   2920 ;	888n.c:351: display[i+1][7]=255;
      000B17 EF               [12] 2921 	mov	a,r7
      000B18 04               [12] 2922 	inc	a
      000B19 FE               [12] 2923 	mov	r6,a
      000B1A 75 F0 08         [24] 2924 	mov	b,#0x08
      000B1D A4               [48] 2925 	mul	ab
      000B1E 24r00            [12] 2926 	add	a,#_display
      000B20 FC               [12] 2927 	mov	r4,a
      000B21 74s00            [12] 2928 	mov	a,#(_display >> 8)
      000B23 35 F0            [12] 2929 	addc	a,b
      000B25 FD               [12] 2930 	mov	r5,a
      000B26 74 07            [12] 2931 	mov	a,#0x07
      000B28 2C               [12] 2932 	add	a,r4
      000B29 F5 82            [12] 2933 	mov	dpl,a
      000B2B E4               [12] 2934 	clr	a
      000B2C 3D               [12] 2935 	addc	a,r5
      000B2D F5 83            [12] 2936 	mov	dph,a
      000B2F 74 FF            [12] 2937 	mov	a,#0xff
      000B31 F0               [24] 2938 	movx	@dptr,a
                                   2939 ;	888n.c:352: delay(speed);
      000B32 85*21 82         [24] 2940 	mov	dpl,_roll_apeak_yz_PARM_2
      000B35 85*22 83         [24] 2941 	mov	dph,(_roll_apeak_yz_PARM_2 + 1)
      000B38 C0 06            [24] 2942 	push	ar6
      000B3A 12r00r20         [24] 2943 	lcall	_delay
      000B3D D0 06            [24] 2944 	pop	ar6
                                   2945 ;	888n.c:349: for (i=0;i<7;i++) {
      000B3F 8E 07            [24] 2946 	mov	ar7,r6
      000B41 BF 07 00         [24] 2947 	cjne	r7,#0x07,00155$
      000B44                       2948 00155$:
      000B44 40 C5            [24] 2949 	jc	00117$
                                   2950 ;	888n.c:357: }
      000B46 22               [24] 2951 	ret
                                   2952 ;------------------------------------------------------------
                                   2953 ;Allocation info for local variables in function 'roll_apeak_xy'
                                   2954 ;------------------------------------------------------------
                                   2955 ;speed                     Allocated with name '_roll_apeak_xy_PARM_2'
                                   2956 ;n                         Allocated to registers r7 
                                   2957 ;i                         Allocated to registers r7 
                                   2958 ;------------------------------------------------------------
                                   2959 ;	888n.c:360: void roll_apeak_xy(uchar n,uint speed)
                                   2960 ;	-----------------------------------------
                                   2961 ;	 function roll_apeak_xy
                                   2962 ;	-----------------------------------------
      000B47                       2963 _roll_apeak_xy:
                                   2964 ;	888n.c:364: switch(n) {
      000B47 E5 82            [12] 2965 	mov	a,dpl
      000B49 FF               [12] 2966 	mov	r7,a
      000B4A 24 FC            [12] 2967 	add	a,#0xff - 0x03
      000B4C 50 01            [24] 2968 	jnc	00147$
      000B4E 22               [24] 2969 	ret
      000B4F                       2970 00147$:
      000B4F EF               [12] 2971 	mov	a,r7
      000B50 2F               [12] 2972 	add	a,r7
      000B51 2F               [12] 2973 	add	a,r7
      000B52 90r0Br56         [24] 2974 	mov	dptr,#00148$
      000B55 73               [24] 2975 	jmp	@a+dptr
      000B56                       2976 00148$:
      000B56 02r0Cr47         [24] 2977 	ljmp	00107$
      000B59 02r0Br62         [24] 2978 	ljmp	00101$
      000B5C 02r0BrAC         [24] 2979 	ljmp	00103$
      000B5F 02r0BrF7         [24] 2980 	ljmp	00105$
                                   2981 ;	888n.c:365: case 1:
      000B62                       2982 00101$:
                                   2983 ;	888n.c:366: for (i=0;i<7;i++) {
      000B62 7F 00            [12] 2984 	mov	r7,#0x00
      000B64                       2985 00111$:
                                   2986 ;	888n.c:367: line(0,i,0,0,i,7,0);
      000B64 8F*04            [24] 2987 	mov	_line_PARM_2,r7
      000B66 75*05 00         [24] 2988 	mov	_line_PARM_3,#0x00
      000B69 75*06 00         [24] 2989 	mov	_line_PARM_4,#0x00
      000B6C 8F*07            [24] 2990 	mov	_line_PARM_5,r7
      000B6E 75*08 07         [24] 2991 	mov	_line_PARM_6,#0x07
      000B71 75*09 00         [24] 2992 	mov	_line_PARM_7,#0x00
      000B74 75 82 00         [24] 2993 	mov	dpl,#0x00
      000B77 C0 07            [24] 2994 	push	ar7
      000B79 12r02rAD         [24] 2995 	lcall	_line
      000B7C D0 07            [24] 2996 	pop	ar7
                                   2997 ;	888n.c:368: line(i+1,7,0,i+1,7,7,1);
      000B7E EF               [12] 2998 	mov	a,r7
      000B7F 04               [12] 2999 	inc	a
      000B80 FE               [12] 3000 	mov	r6,a
      000B81 75*04 07         [24] 3001 	mov	_line_PARM_2,#0x07
      000B84 75*05 00         [24] 3002 	mov	_line_PARM_3,#0x00
      000B87 8E*06            [24] 3003 	mov	_line_PARM_4,r6
      000B89 75*07 07         [24] 3004 	mov	_line_PARM_5,#0x07
      000B8C 75*08 07         [24] 3005 	mov	_line_PARM_6,#0x07
      000B8F 75*09 01         [24] 3006 	mov	_line_PARM_7,#0x01
      000B92 8E 82            [24] 3007 	mov	dpl,r6
      000B94 C0 06            [24] 3008 	push	ar6
      000B96 12r02rAD         [24] 3009 	lcall	_line
                                   3010 ;	888n.c:369: delay(speed);
      000B99 85*23 82         [24] 3011 	mov	dpl,_roll_apeak_xy_PARM_2
      000B9C 85*24 83         [24] 3012 	mov	dph,(_roll_apeak_xy_PARM_2 + 1)
      000B9F 12r00r20         [24] 3013 	lcall	_delay
      000BA2 D0 06            [24] 3014 	pop	ar6
                                   3015 ;	888n.c:366: for (i=0;i<7;i++) {
      000BA4 8E 07            [24] 3016 	mov	ar7,r6
      000BA6 BF 07 00         [24] 3017 	cjne	r7,#0x07,00149$
      000BA9                       3018 00149$:
      000BA9 40 B9            [24] 3019 	jc	00111$
                                   3020 ;	888n.c:371: break;
      000BAB 22               [24] 3021 	ret
                                   3022 ;	888n.c:372: case 2:
      000BAC                       3023 00103$:
                                   3024 ;	888n.c:373: for (i=0;i<7;i++) {
      000BAC 7E 00            [12] 3025 	mov	r6,#0x00
      000BAE                       3026 00113$:
                                   3027 ;	888n.c:374: line(i,7,0,i,7,7,0);
      000BAE 75*04 07         [24] 3028 	mov	_line_PARM_2,#0x07
      000BB1 75*05 00         [24] 3029 	mov	_line_PARM_3,#0x00
      000BB4 8E*06            [24] 3030 	mov	_line_PARM_4,r6
      000BB6 75*07 07         [24] 3031 	mov	_line_PARM_5,#0x07
      000BB9 75*08 07         [24] 3032 	mov	_line_PARM_6,#0x07
      000BBC 75*09 00         [24] 3033 	mov	_line_PARM_7,#0x00
      000BBF 8E 82            [24] 3034 	mov	dpl,r6
      000BC1 C0 06            [24] 3035 	push	ar6
      000BC3 12r02rAD         [24] 3036 	lcall	_line
      000BC6 D0 06            [24] 3037 	pop	ar6
                                   3038 ;	888n.c:375: line(7,6-i,0,7,6-i,7,1);
      000BC8 74 06            [12] 3039 	mov	a,#0x06
      000BCA C3               [12] 3040 	clr	c
      000BCB 9E               [12] 3041 	subb	a,r6
      000BCC FD               [12] 3042 	mov	r5,a
      000BCD 8D*04            [24] 3043 	mov	_line_PARM_2,r5
      000BCF 75*05 00         [24] 3044 	mov	_line_PARM_3,#0x00
      000BD2 75*06 07         [24] 3045 	mov	_line_PARM_4,#0x07
      000BD5 8D*07            [24] 3046 	mov	_line_PARM_5,r5
      000BD7 75*08 07         [24] 3047 	mov	_line_PARM_6,#0x07
      000BDA 75*09 01         [24] 3048 	mov	_line_PARM_7,#0x01
      000BDD 75 82 07         [24] 3049 	mov	dpl,#0x07
      000BE0 C0 06            [24] 3050 	push	ar6
      000BE2 12r02rAD         [24] 3051 	lcall	_line
                                   3052 ;	888n.c:376: delay(speed);
      000BE5 85*23 82         [24] 3053 	mov	dpl,_roll_apeak_xy_PARM_2
      000BE8 85*24 83         [24] 3054 	mov	dph,(_roll_apeak_xy_PARM_2 + 1)
      000BEB 12r00r20         [24] 3055 	lcall	_delay
      000BEE D0 06            [24] 3056 	pop	ar6
                                   3057 ;	888n.c:373: for (i=0;i<7;i++) {
      000BF0 0E               [12] 3058 	inc	r6
      000BF1 BE 07 00         [24] 3059 	cjne	r6,#0x07,00151$
      000BF4                       3060 00151$:
      000BF4 40 B8            [24] 3061 	jc	00113$
                                   3062 ;	888n.c:378: break;
      000BF6 22               [24] 3063 	ret
                                   3064 ;	888n.c:379: case 3:
      000BF7                       3065 00105$:
                                   3066 ;	888n.c:380: for (i=0;i<7;i++) {
      000BF7 7E 00            [12] 3067 	mov	r6,#0x00
      000BF9                       3068 00115$:
                                   3069 ;	888n.c:381: line(7,7-i,0,7,7-i,7,0);
      000BF9 74 07            [12] 3070 	mov	a,#0x07
      000BFB C3               [12] 3071 	clr	c
      000BFC 9E               [12] 3072 	subb	a,r6
      000BFD FD               [12] 3073 	mov	r5,a
      000BFE 8D*04            [24] 3074 	mov	_line_PARM_2,r5
      000C00 75*05 00         [24] 3075 	mov	_line_PARM_3,#0x00
      000C03 75*06 07         [24] 3076 	mov	_line_PARM_4,#0x07
      000C06 8D*07            [24] 3077 	mov	_line_PARM_5,r5
      000C08 75*08 07         [24] 3078 	mov	_line_PARM_6,#0x07
      000C0B 75*09 00         [24] 3079 	mov	_line_PARM_7,#0x00
      000C0E 75 82 07         [24] 3080 	mov	dpl,#0x07
      000C11 C0 06            [24] 3081 	push	ar6
      000C13 12r02rAD         [24] 3082 	lcall	_line
      000C16 D0 06            [24] 3083 	pop	ar6
                                   3084 ;	888n.c:382: line(6-i,0,0,6-i,0,7,1);
      000C18 74 06            [12] 3085 	mov	a,#0x06
      000C1A C3               [12] 3086 	clr	c
      000C1B 9E               [12] 3087 	subb	a,r6
      000C1C FD               [12] 3088 	mov	r5,a
      000C1D 75*04 00         [24] 3089 	mov	_line_PARM_2,#0x00
      000C20 75*05 00         [24] 3090 	mov	_line_PARM_3,#0x00
      000C23 8D*06            [24] 3091 	mov	_line_PARM_4,r5
      000C25 75*07 00         [24] 3092 	mov	_line_PARM_5,#0x00
      000C28 75*08 07         [24] 3093 	mov	_line_PARM_6,#0x07
      000C2B 75*09 01         [24] 3094 	mov	_line_PARM_7,#0x01
      000C2E 8D 82            [24] 3095 	mov	dpl,r5
      000C30 C0 06            [24] 3096 	push	ar6
      000C32 12r02rAD         [24] 3097 	lcall	_line
                                   3098 ;	888n.c:383: delay(speed);
      000C35 85*23 82         [24] 3099 	mov	dpl,_roll_apeak_xy_PARM_2
      000C38 85*24 83         [24] 3100 	mov	dph,(_roll_apeak_xy_PARM_2 + 1)
      000C3B 12r00r20         [24] 3101 	lcall	_delay
      000C3E D0 06            [24] 3102 	pop	ar6
                                   3103 ;	888n.c:380: for (i=0;i<7;i++) {
      000C40 0E               [12] 3104 	inc	r6
      000C41 BE 07 00         [24] 3105 	cjne	r6,#0x07,00153$
      000C44                       3106 00153$:
      000C44 40 B3            [24] 3107 	jc	00115$
                                   3108 ;	888n.c:385: break;
                                   3109 ;	888n.c:386: case 0:
      000C46 22               [24] 3110 	ret
      000C47                       3111 00107$:
                                   3112 ;	888n.c:387: for (i=0;i<7;i++) {
      000C47 7F 00            [12] 3113 	mov	r7,#0x00
      000C49                       3114 00117$:
                                   3115 ;	888n.c:388: line(7-i,0,0,7-i,0,7,0);
      000C49 74 07            [12] 3116 	mov	a,#0x07
      000C4B C3               [12] 3117 	clr	c
      000C4C 9F               [12] 3118 	subb	a,r7
      000C4D FE               [12] 3119 	mov	r6,a
      000C4E 75*04 00         [24] 3120 	mov	_line_PARM_2,#0x00
      000C51 75*05 00         [24] 3121 	mov	_line_PARM_3,#0x00
      000C54 8E*06            [24] 3122 	mov	_line_PARM_4,r6
      000C56 75*07 00         [24] 3123 	mov	_line_PARM_5,#0x00
      000C59 75*08 07         [24] 3124 	mov	_line_PARM_6,#0x07
      000C5C 75*09 00         [24] 3125 	mov	_line_PARM_7,#0x00
      000C5F 8E 82            [24] 3126 	mov	dpl,r6
      000C61 C0 07            [24] 3127 	push	ar7
      000C63 12r02rAD         [24] 3128 	lcall	_line
      000C66 D0 07            [24] 3129 	pop	ar7
                                   3130 ;	888n.c:389: line(0,i+1,0,0,i+1,7,1);
      000C68 EF               [12] 3131 	mov	a,r7
      000C69 04               [12] 3132 	inc	a
      000C6A FE               [12] 3133 	mov	r6,a
      000C6B 8E*04            [24] 3134 	mov	_line_PARM_2,r6
      000C6D 75*05 00         [24] 3135 	mov	_line_PARM_3,#0x00
      000C70 75*06 00         [24] 3136 	mov	_line_PARM_4,#0x00
      000C73 8E*07            [24] 3137 	mov	_line_PARM_5,r6
      000C75 75*08 07         [24] 3138 	mov	_line_PARM_6,#0x07
      000C78 75*09 01         [24] 3139 	mov	_line_PARM_7,#0x01
      000C7B 75 82 00         [24] 3140 	mov	dpl,#0x00
      000C7E C0 06            [24] 3141 	push	ar6
      000C80 12r02rAD         [24] 3142 	lcall	_line
                                   3143 ;	888n.c:390: delay(speed);
      000C83 85*23 82         [24] 3144 	mov	dpl,_roll_apeak_xy_PARM_2
      000C86 85*24 83         [24] 3145 	mov	dph,(_roll_apeak_xy_PARM_2 + 1)
      000C89 12r00r20         [24] 3146 	lcall	_delay
      000C8C D0 06            [24] 3147 	pop	ar6
                                   3148 ;	888n.c:387: for (i=0;i<7;i++) {
      000C8E 8E 07            [24] 3149 	mov	ar7,r6
      000C90 BF 07 00         [24] 3150 	cjne	r7,#0x07,00155$
      000C93                       3151 00155$:
      000C93 40 B4            [24] 3152 	jc	00117$
                                   3153 ;	888n.c:395: }
      000C95 22               [24] 3154 	ret
                                   3155 ;------------------------------------------------------------
                                   3156 ;Allocation info for local variables in function 'roll_3_xy'
                                   3157 ;------------------------------------------------------------
                                   3158 ;speed                     Allocated with name '_roll_3_xy_PARM_2'
                                   3159 ;n                         Allocated to registers r7 
                                   3160 ;i                         Allocated to registers r7 
                                   3161 ;------------------------------------------------------------
                                   3162 ;	888n.c:398: void roll_3_xy(uchar n,uint speed)
                                   3163 ;	-----------------------------------------
                                   3164 ;	 function roll_3_xy
                                   3165 ;	-----------------------------------------
      000C96                       3166 _roll_3_xy:
                                   3167 ;	888n.c:402: switch(n) {
      000C96 E5 82            [12] 3168 	mov	a,dpl
      000C98 FF               [12] 3169 	mov	r7,a
      000C99 24 FC            [12] 3170 	add	a,#0xff - 0x03
      000C9B 50 01            [24] 3171 	jnc	00169$
      000C9D 22               [24] 3172 	ret
      000C9E                       3173 00169$:
      000C9E EF               [12] 3174 	mov	a,r7
      000C9F 2F               [12] 3175 	add	a,r7
      000CA0 2F               [12] 3176 	add	a,r7
      000CA1 90r0CrA5         [24] 3177 	mov	dptr,#00170$
      000CA4 73               [24] 3178 	jmp	@a+dptr
      000CA5                       3179 00170$:
      000CA5 02r0DrB7         [24] 3180 	ljmp	00113$
      000CA8 02r0CrB1         [24] 3181 	ljmp	00101$
      000CAB 02r0Dr07         [24] 3182 	ljmp	00105$
      000CAE 02r0Dr5D         [24] 3183 	ljmp	00109$
                                   3184 ;	888n.c:403: case 1:
      000CB1                       3185 00101$:
                                   3186 ;	888n.c:404: for (i=0;i<8;i++) {
      000CB1 7F 00            [12] 3187 	mov	r7,#0x00
      000CB3                       3188 00119$:
                                   3189 ;	888n.c:405: box_apeak_xy (0,i,0,7,7-i,7,1,1);
      000CB3 74 07            [12] 3190 	mov	a,#0x07
      000CB5 C3               [12] 3191 	clr	c
      000CB6 9F               [12] 3192 	subb	a,r7
      000CB7 F5*1A            [12] 3193 	mov	_box_apeak_xy_PARM_5,a
      000CB9 8F*17            [24] 3194 	mov	_box_apeak_xy_PARM_2,r7
      000CBB 75*18 00         [24] 3195 	mov	_box_apeak_xy_PARM_3,#0x00
      000CBE 75*19 07         [24] 3196 	mov	_box_apeak_xy_PARM_4,#0x07
      000CC1 75*1B 07         [24] 3197 	mov	_box_apeak_xy_PARM_6,#0x07
      000CC4 75*1C 01         [24] 3198 	mov	_box_apeak_xy_PARM_7,#0x01
      000CC7 75*1D 01         [24] 3199 	mov	_box_apeak_xy_PARM_8,#0x01
      000CCA 75 82 00         [24] 3200 	mov	dpl,#0x00
      000CCD C0 07            [24] 3201 	push	ar7
      000CCF 12r08r89         [24] 3202 	lcall	_box_apeak_xy
                                   3203 ;	888n.c:406: delay(speed);
      000CD2 85*25 82         [24] 3204 	mov	dpl,_roll_3_xy_PARM_2
      000CD5 85*26 83         [24] 3205 	mov	dph,(_roll_3_xy_PARM_2 + 1)
      000CD8 12r00r20         [24] 3206 	lcall	_delay
      000CDB D0 07            [24] 3207 	pop	ar7
                                   3208 ;	888n.c:407: if (i<7) box_apeak_xy (3,3,0,0,i,7,1,0);
      000CDD BF 07 00         [24] 3209 	cjne	r7,#0x07,00171$
      000CE0                       3210 00171$:
      000CE0 50 1E            [24] 3211 	jnc	00120$
      000CE2 75*17 03         [24] 3212 	mov	_box_apeak_xy_PARM_2,#0x03
      000CE5 75*18 00         [24] 3213 	mov	_box_apeak_xy_PARM_3,#0x00
      000CE8 75*19 00         [24] 3214 	mov	_box_apeak_xy_PARM_4,#0x00
      000CEB 8F*1A            [24] 3215 	mov	_box_apeak_xy_PARM_5,r7
      000CED 75*1B 07         [24] 3216 	mov	_box_apeak_xy_PARM_6,#0x07
      000CF0 75*1C 01         [24] 3217 	mov	_box_apeak_xy_PARM_7,#0x01
      000CF3 75*1D 00         [24] 3218 	mov	_box_apeak_xy_PARM_8,#0x00
      000CF6 75 82 03         [24] 3219 	mov	dpl,#0x03
      000CF9 C0 07            [24] 3220 	push	ar7
      000CFB 12r08r89         [24] 3221 	lcall	_box_apeak_xy
      000CFE D0 07            [24] 3222 	pop	ar7
      000D00                       3223 00120$:
                                   3224 ;	888n.c:404: for (i=0;i<8;i++) {
      000D00 0F               [12] 3225 	inc	r7
      000D01 BF 08 00         [24] 3226 	cjne	r7,#0x08,00173$
      000D04                       3227 00173$:
      000D04 40 AD            [24] 3228 	jc	00119$
                                   3229 ;	888n.c:409: break;
      000D06 22               [24] 3230 	ret
                                   3231 ;	888n.c:410: case 2:
      000D07                       3232 00105$:
                                   3233 ;	888n.c:411: for (i=0;i<8;i++) {
      000D07 7F 00            [12] 3234 	mov	r7,#0x00
      000D09                       3235 00121$:
                                   3236 ;	888n.c:412: box_apeak_xy (7-i,0,0,i,7,7,1,1);
      000D09 74 07            [12] 3237 	mov	a,#0x07
      000D0B C3               [12] 3238 	clr	c
      000D0C 9F               [12] 3239 	subb	a,r7
      000D0D F5 82            [12] 3240 	mov	dpl,a
      000D0F 75*17 00         [24] 3241 	mov	_box_apeak_xy_PARM_2,#0x00
      000D12 75*18 00         [24] 3242 	mov	_box_apeak_xy_PARM_3,#0x00
      000D15 8F*19            [24] 3243 	mov	_box_apeak_xy_PARM_4,r7
      000D17 75*1A 07         [24] 3244 	mov	_box_apeak_xy_PARM_5,#0x07
      000D1A 75*1B 07         [24] 3245 	mov	_box_apeak_xy_PARM_6,#0x07
      000D1D 75*1C 01         [24] 3246 	mov	_box_apeak_xy_PARM_7,#0x01
      000D20 75*1D 01         [24] 3247 	mov	_box_apeak_xy_PARM_8,#0x01
      000D23 C0 07            [24] 3248 	push	ar7
      000D25 12r08r89         [24] 3249 	lcall	_box_apeak_xy
                                   3250 ;	888n.c:413: delay(speed);
      000D28 85*25 82         [24] 3251 	mov	dpl,_roll_3_xy_PARM_2
      000D2B 85*26 83         [24] 3252 	mov	dph,(_roll_3_xy_PARM_2 + 1)
      000D2E 12r00r20         [24] 3253 	lcall	_delay
      000D31 D0 07            [24] 3254 	pop	ar7
                                   3255 ;	888n.c:414: if (i<7) box_apeak_xy (3,4,0,i,7,7,1,0);
      000D33 BF 07 00         [24] 3256 	cjne	r7,#0x07,00175$
      000D36                       3257 00175$:
      000D36 50 1E            [24] 3258 	jnc	00122$
      000D38 75*17 04         [24] 3259 	mov	_box_apeak_xy_PARM_2,#0x04
      000D3B 75*18 00         [24] 3260 	mov	_box_apeak_xy_PARM_3,#0x00
      000D3E 8F*19            [24] 3261 	mov	_box_apeak_xy_PARM_4,r7
      000D40 75*1A 07         [24] 3262 	mov	_box_apeak_xy_PARM_5,#0x07
      000D43 75*1B 07         [24] 3263 	mov	_box_apeak_xy_PARM_6,#0x07
      000D46 75*1C 01         [24] 3264 	mov	_box_apeak_xy_PARM_7,#0x01
      000D49 75*1D 00         [24] 3265 	mov	_box_apeak_xy_PARM_8,#0x00
      000D4C 75 82 03         [24] 3266 	mov	dpl,#0x03
      000D4F C0 07            [24] 3267 	push	ar7
      000D51 12r08r89         [24] 3268 	lcall	_box_apeak_xy
      000D54 D0 07            [24] 3269 	pop	ar7
      000D56                       3270 00122$:
                                   3271 ;	888n.c:411: for (i=0;i<8;i++) {
      000D56 0F               [12] 3272 	inc	r7
      000D57 BF 08 00         [24] 3273 	cjne	r7,#0x08,00177$
      000D5A                       3274 00177$:
      000D5A 40 AD            [24] 3275 	jc	00121$
                                   3276 ;	888n.c:416: break;
      000D5C 22               [24] 3277 	ret
                                   3278 ;	888n.c:417: case 3:
      000D5D                       3279 00109$:
                                   3280 ;	888n.c:418: for (i=0;i<8;i++) {
      000D5D 7F 00            [12] 3281 	mov	r7,#0x00
      000D5F                       3282 00123$:
                                   3283 ;	888n.c:419: box_apeak_xy (0,i,0,7,7-i,7,1,1);
      000D5F 74 07            [12] 3284 	mov	a,#0x07
      000D61 C3               [12] 3285 	clr	c
      000D62 9F               [12] 3286 	subb	a,r7
      000D63 F5*1A            [12] 3287 	mov	_box_apeak_xy_PARM_5,a
      000D65 8F*17            [24] 3288 	mov	_box_apeak_xy_PARM_2,r7
      000D67 75*18 00         [24] 3289 	mov	_box_apeak_xy_PARM_3,#0x00
      000D6A 75*19 07         [24] 3290 	mov	_box_apeak_xy_PARM_4,#0x07
      000D6D 75*1B 07         [24] 3291 	mov	_box_apeak_xy_PARM_6,#0x07
      000D70 75*1C 01         [24] 3292 	mov	_box_apeak_xy_PARM_7,#0x01
      000D73 75*1D 01         [24] 3293 	mov	_box_apeak_xy_PARM_8,#0x01
      000D76 75 82 00         [24] 3294 	mov	dpl,#0x00
      000D79 C0 07            [24] 3295 	push	ar7
      000D7B 12r08r89         [24] 3296 	lcall	_box_apeak_xy
                                   3297 ;	888n.c:420: delay(speed);
      000D7E 85*25 82         [24] 3298 	mov	dpl,_roll_3_xy_PARM_2
      000D81 85*26 83         [24] 3299 	mov	dph,(_roll_3_xy_PARM_2 + 1)
      000D84 12r00r20         [24] 3300 	lcall	_delay
      000D87 D0 07            [24] 3301 	pop	ar7
                                   3302 ;	888n.c:421: if (i<7) box_apeak_xy (4,4,0,7,7-i,7,1,0);
      000D89 BF 07 00         [24] 3303 	cjne	r7,#0x07,00179$
      000D8C                       3304 00179$:
      000D8C 50 22            [24] 3305 	jnc	00124$
      000D8E 74 07            [12] 3306 	mov	a,#0x07
      000D90 C3               [12] 3307 	clr	c
      000D91 9F               [12] 3308 	subb	a,r7
      000D92 F5*1A            [12] 3309 	mov	_box_apeak_xy_PARM_5,a
      000D94 75*17 04         [24] 3310 	mov	_box_apeak_xy_PARM_2,#0x04
      000D97 75*18 00         [24] 3311 	mov	_box_apeak_xy_PARM_3,#0x00
      000D9A 75*19 07         [24] 3312 	mov	_box_apeak_xy_PARM_4,#0x07
      000D9D 75*1B 07         [24] 3313 	mov	_box_apeak_xy_PARM_6,#0x07
      000DA0 75*1C 01         [24] 3314 	mov	_box_apeak_xy_PARM_7,#0x01
      000DA3 75*1D 00         [24] 3315 	mov	_box_apeak_xy_PARM_8,#0x00
      000DA6 75 82 04         [24] 3316 	mov	dpl,#0x04
      000DA9 C0 07            [24] 3317 	push	ar7
      000DAB 12r08r89         [24] 3318 	lcall	_box_apeak_xy
      000DAE D0 07            [24] 3319 	pop	ar7
      000DB0                       3320 00124$:
                                   3321 ;	888n.c:418: for (i=0;i<8;i++) {
      000DB0 0F               [12] 3322 	inc	r7
      000DB1 BF 08 00         [24] 3323 	cjne	r7,#0x08,00181$
      000DB4                       3324 00181$:
      000DB4 40 A9            [24] 3325 	jc	00123$
                                   3326 ;	888n.c:423: break;
                                   3327 ;	888n.c:424: case 0:
      000DB6 22               [24] 3328 	ret
      000DB7                       3329 00113$:
                                   3330 ;	888n.c:425: for (i=0;i<8;i++) {
      000DB7 7F 00            [12] 3331 	mov	r7,#0x00
      000DB9                       3332 00125$:
                                   3333 ;	888n.c:426: box_apeak_xy (7-i,0,0,i,7,7,1,1);
      000DB9 74 07            [12] 3334 	mov	a,#0x07
      000DBB C3               [12] 3335 	clr	c
      000DBC 9F               [12] 3336 	subb	a,r7
      000DBD F5 82            [12] 3337 	mov	dpl,a
      000DBF 75*17 00         [24] 3338 	mov	_box_apeak_xy_PARM_2,#0x00
      000DC2 75*18 00         [24] 3339 	mov	_box_apeak_xy_PARM_3,#0x00
      000DC5 8F*19            [24] 3340 	mov	_box_apeak_xy_PARM_4,r7
      000DC7 75*1A 07         [24] 3341 	mov	_box_apeak_xy_PARM_5,#0x07
      000DCA 75*1B 07         [24] 3342 	mov	_box_apeak_xy_PARM_6,#0x07
      000DCD 75*1C 01         [24] 3343 	mov	_box_apeak_xy_PARM_7,#0x01
      000DD0 75*1D 01         [24] 3344 	mov	_box_apeak_xy_PARM_8,#0x01
      000DD3 C0 07            [24] 3345 	push	ar7
      000DD5 12r08r89         [24] 3346 	lcall	_box_apeak_xy
                                   3347 ;	888n.c:427: delay(speed);
      000DD8 85*25 82         [24] 3348 	mov	dpl,_roll_3_xy_PARM_2
      000DDB 85*26 83         [24] 3349 	mov	dph,(_roll_3_xy_PARM_2 + 1)
      000DDE 12r00r20         [24] 3350 	lcall	_delay
      000DE1 D0 07            [24] 3351 	pop	ar7
                                   3352 ;	888n.c:428: if (i<7) box_apeak_xy (4,3,0,7-i,0,7,1,0);
      000DE3 BF 07 00         [24] 3353 	cjne	r7,#0x07,00183$
      000DE6                       3354 00183$:
      000DE6 50 22            [24] 3355 	jnc	00126$
      000DE8 74 07            [12] 3356 	mov	a,#0x07
      000DEA C3               [12] 3357 	clr	c
      000DEB 9F               [12] 3358 	subb	a,r7
      000DEC F5*19            [12] 3359 	mov	_box_apeak_xy_PARM_4,a
      000DEE 75*17 03         [24] 3360 	mov	_box_apeak_xy_PARM_2,#0x03
      000DF1 75*18 00         [24] 3361 	mov	_box_apeak_xy_PARM_3,#0x00
      000DF4 75*1A 00         [24] 3362 	mov	_box_apeak_xy_PARM_5,#0x00
      000DF7 75*1B 07         [24] 3363 	mov	_box_apeak_xy_PARM_6,#0x07
      000DFA 75*1C 01         [24] 3364 	mov	_box_apeak_xy_PARM_7,#0x01
      000DFD 75*1D 00         [24] 3365 	mov	_box_apeak_xy_PARM_8,#0x00
      000E00 75 82 04         [24] 3366 	mov	dpl,#0x04
      000E03 C0 07            [24] 3367 	push	ar7
      000E05 12r08r89         [24] 3368 	lcall	_box_apeak_xy
      000E08 D0 07            [24] 3369 	pop	ar7
      000E0A                       3370 00126$:
                                   3371 ;	888n.c:425: for (i=0;i<8;i++) {
      000E0A 0F               [12] 3372 	inc	r7
      000E0B BF 08 00         [24] 3373 	cjne	r7,#0x08,00185$
      000E0E                       3374 00185$:
      000E0E 40 A9            [24] 3375 	jc	00125$
                                   3376 ;	888n.c:433: }
      000E10 22               [24] 3377 	ret
                                   3378 ;------------------------------------------------------------
                                   3379 ;Allocation info for local variables in function 'trans'
                                   3380 ;------------------------------------------------------------
                                   3381 ;speed                     Allocated with name '_trans_PARM_2'
                                   3382 ;z                         Allocated to registers r7 
                                   3383 ;i                         Allocated to registers r4 
                                   3384 ;j                         Allocated to registers r5 
                                   3385 ;------------------------------------------------------------
                                   3386 ;	888n.c:436: void trans(uchar z, uint speed)
                                   3387 ;	-----------------------------------------
                                   3388 ;	 function trans
                                   3389 ;	-----------------------------------------
      000E11                       3390 _trans:
                                   3391 ;	888n.c:440: for (j=0; j<8; j++) {
      000E11 E5 82            [12] 3392 	mov	a,dpl
      000E13 75 F0 08         [24] 3393 	mov	b,#0x08
      000E16 A4               [48] 3394 	mul	ab
      000E17 FE               [12] 3395 	mov	r6,a
      000E18 AF F0            [24] 3396 	mov	r7,b
      000E1A 7D 00            [12] 3397 	mov	r5,#0x00
                                   3398 ;	888n.c:441: for (i=0;i<8;i++)
      000E1C                       3399 00109$:
      000E1C 7C 00            [12] 3400 	mov	r4,#0x00
      000E1E                       3401 00103$:
                                   3402 ;	888n.c:442: display[z][i]>>=1;
      000E1E EE               [12] 3403 	mov	a,r6
      000E1F 24r00            [12] 3404 	add	a,#_display
      000E21 FA               [12] 3405 	mov	r2,a
      000E22 EF               [12] 3406 	mov	a,r7
      000E23 34s00            [12] 3407 	addc	a,#(_display >> 8)
      000E25 FB               [12] 3408 	mov	r3,a
      000E26 EC               [12] 3409 	mov	a,r4
      000E27 2A               [12] 3410 	add	a,r2
      000E28 FA               [12] 3411 	mov	r2,a
      000E29 E4               [12] 3412 	clr	a
      000E2A 3B               [12] 3413 	addc	a,r3
      000E2B FB               [12] 3414 	mov	r3,a
      000E2C EE               [12] 3415 	mov	a,r6
      000E2D 24r00            [12] 3416 	add	a,#_display
      000E2F F8               [12] 3417 	mov	r0,a
      000E30 EF               [12] 3418 	mov	a,r7
      000E31 34s00            [12] 3419 	addc	a,#(_display >> 8)
      000E33 F9               [12] 3420 	mov	r1,a
      000E34 EC               [12] 3421 	mov	a,r4
      000E35 28               [12] 3422 	add	a,r0
      000E36 F5 82            [12] 3423 	mov	dpl,a
      000E38 E4               [12] 3424 	clr	a
      000E39 39               [12] 3425 	addc	a,r1
      000E3A F5 83            [12] 3426 	mov	dph,a
      000E3C E0               [24] 3427 	movx	a,@dptr
      000E3D C3               [12] 3428 	clr	c
      000E3E 13               [12] 3429 	rrc	a
      000E3F F9               [12] 3430 	mov	r1,a
      000E40 8A 82            [24] 3431 	mov	dpl,r2
      000E42 8B 83            [24] 3432 	mov	dph,r3
      000E44 F0               [24] 3433 	movx	@dptr,a
                                   3434 ;	888n.c:441: for (i=0;i<8;i++)
      000E45 0C               [12] 3435 	inc	r4
      000E46 BC 08 00         [24] 3436 	cjne	r4,#0x08,00120$
      000E49                       3437 00120$:
      000E49 40 D3            [24] 3438 	jc	00103$
                                   3439 ;	888n.c:443: delay(speed);
      000E4B 85*27 82         [24] 3440 	mov	dpl,_trans_PARM_2
      000E4E 85*28 83         [24] 3441 	mov	dph,(_trans_PARM_2 + 1)
      000E51 C0 07            [24] 3442 	push	ar7
      000E53 C0 06            [24] 3443 	push	ar6
      000E55 C0 05            [24] 3444 	push	ar5
      000E57 12r00r20         [24] 3445 	lcall	_delay
      000E5A D0 05            [24] 3446 	pop	ar5
      000E5C D0 06            [24] 3447 	pop	ar6
      000E5E D0 07            [24] 3448 	pop	ar7
                                   3449 ;	888n.c:440: for (j=0; j<8; j++) {
      000E60 0D               [12] 3450 	inc	r5
      000E61 BD 08 00         [24] 3451 	cjne	r5,#0x08,00122$
      000E64                       3452 00122$:
      000E64 40 B6            [24] 3453 	jc	00109$
      000E66 22               [24] 3454 	ret
                                   3455 ;------------------------------------------------------------
                                   3456 ;Allocation info for local variables in function 'tranoutchar'
                                   3457 ;------------------------------------------------------------
                                   3458 ;speed                     Allocated with name '_tranoutchar_PARM_2'
                                   3459 ;c                         Allocated to registers r7 
                                   3460 ;i                         Allocated with name '_tranoutchar_i_1_85'
                                   3461 ;j                         Allocated to registers r2 
                                   3462 ;k                         Allocated with name '_tranoutchar_k_1_85'
                                   3463 ;a                         Allocated with name '_tranoutchar_a_1_85'
                                   3464 ;i2                        Allocated with name '_tranoutchar_i2_1_85'
                                   3465 ;sloc0                     Allocated with name '_tranoutchar_sloc0_1_0'
                                   3466 ;sloc1                     Allocated with name '_tranoutchar_sloc1_1_0'
                                   3467 ;------------------------------------------------------------
                                   3468 ;	888n.c:447: void tranoutchar(uchar c, uint speed)
                                   3469 ;	-----------------------------------------
                                   3470 ;	 function tranoutchar
                                   3471 ;	-----------------------------------------
      000E67                       3472 _tranoutchar:
      000E67 AF 82            [24] 3473 	mov	r7,dpl
                                   3474 ;	888n.c:449: uchar i, j, k, a, i2=0;
      000E69 75*2E 00         [24] 3475 	mov	_tranoutchar_i2_1_85,#0x00
                                   3476 ;	888n.c:451: for (i=0; i<8; i++) {
      000E6C EF               [12] 3477 	mov	a,r7
      000E6D 75 F0 08         [24] 3478 	mov	b,#0x08
      000E70 A4               [48] 3479 	mul	ab
      000E71 24r00            [12] 3480 	add	a,#_table_cha
      000E73 F5*2F            [12] 3481 	mov	_tranoutchar_sloc0_1_0,a
      000E75 74s00            [12] 3482 	mov	a,#(_table_cha >> 8)
      000E77 35 F0            [12] 3483 	addc	a,b
      000E79 F5*30            [12] 3484 	mov	(_tranoutchar_sloc0_1_0 + 1),a
      000E7B 75*2B 00         [24] 3485 	mov	_tranoutchar_i_1_85,#0x00
      000E7E                       3486 00110$:
                                   3487 ;	888n.c:452: if (i<7) box_apeak_xy (i+1,0,0,i+1,7,7,1,1);
      000E7E 74 F9            [12] 3488 	mov	a,#0x100 - 0x07
      000E80 25*2B            [12] 3489 	add	a,_tranoutchar_i_1_85
      000E82 40 1D            [24] 3490 	jc	00102$
      000E84 E5*2B            [12] 3491 	mov	a,_tranoutchar_i_1_85
      000E86 04               [12] 3492 	inc	a
      000E87 FB               [12] 3493 	mov	r3,a
      000E88 75*17 00         [24] 3494 	mov	_box_apeak_xy_PARM_2,#0x00
      000E8B 75*18 00         [24] 3495 	mov	_box_apeak_xy_PARM_3,#0x00
      000E8E 8B*19            [24] 3496 	mov	_box_apeak_xy_PARM_4,r3
      000E90 75*1A 07         [24] 3497 	mov	_box_apeak_xy_PARM_5,#0x07
      000E93 75*1B 07         [24] 3498 	mov	_box_apeak_xy_PARM_6,#0x07
      000E96 75*1C 01         [24] 3499 	mov	_box_apeak_xy_PARM_7,#0x01
      000E99 75*1D 01         [24] 3500 	mov	_box_apeak_xy_PARM_8,#0x01
      000E9C 8B 82            [24] 3501 	mov	dpl,r3
      000E9E 12r08r89         [24] 3502 	lcall	_box_apeak_xy
      000EA1                       3503 00102$:
                                   3504 ;	888n.c:453: box_apeak_xy (i2,0,0,i2,7,7,1,0);
      000EA1 75*17 00         [24] 3505 	mov	_box_apeak_xy_PARM_2,#0x00
      000EA4 75*18 00         [24] 3506 	mov	_box_apeak_xy_PARM_3,#0x00
      000EA7 85*2E*19         [24] 3507 	mov	_box_apeak_xy_PARM_4,_tranoutchar_i2_1_85
      000EAA 75*1A 07         [24] 3508 	mov	_box_apeak_xy_PARM_5,#0x07
      000EAD 75*1B 07         [24] 3509 	mov	_box_apeak_xy_PARM_6,#0x07
      000EB0 75*1C 01         [24] 3510 	mov	_box_apeak_xy_PARM_7,#0x01
      000EB3 75*1D 00         [24] 3511 	mov	_box_apeak_xy_PARM_8,#0x00
      000EB6 85*2E 82         [24] 3512 	mov	dpl,_tranoutchar_i2_1_85
      000EB9 12r08r89         [24] 3513 	lcall	_box_apeak_xy
                                   3514 ;	888n.c:454: a=0;
      000EBC 75*2D 00         [24] 3515 	mov	_tranoutchar_a_1_85,#0x00
                                   3516 ;	888n.c:455: i2=i+1;
      000EBF E5*2B            [12] 3517 	mov	a,_tranoutchar_i_1_85
      000EC1 04               [12] 3518 	inc	a
      000EC2 F5*2E            [12] 3519 	mov	_tranoutchar_i2_1_85,a
                                   3520 ;	888n.c:456: for (j=0; j <= i; j++)
      000EC4 7A 00            [12] 3521 	mov	r2,#0x00
      000EC6                       3522 00106$:
                                   3523 ;	888n.c:457: a |= (1<<j);
      000EC6 8A F0            [24] 3524 	mov	b,r2
      000EC8 05 F0            [12] 3525 	inc	b
      000ECA 74 01            [12] 3526 	mov	a,#0x01
      000ECC 80 02            [24] 3527 	sjmp	00138$
      000ECE                       3528 00136$:
      000ECE 25 E0            [12] 3529 	add	a,acc
      000ED0                       3530 00138$:
      000ED0 D5 F0 FB         [24] 3531 	djnz	b,00136$
      000ED3 F9               [12] 3532 	mov	r1,a
      000ED4 42*2D            [12] 3533 	orl	_tranoutchar_a_1_85,a
                                   3534 ;	888n.c:456: for (j=0; j <= i; j++)
      000ED6 0A               [12] 3535 	inc	r2
      000ED7 C3               [12] 3536 	clr	c
      000ED8 E5*2B            [12] 3537 	mov	a,_tranoutchar_i_1_85
      000EDA 9A               [12] 3538 	subb	a,r2
      000EDB 50 E9            [24] 3539 	jnc	00106$
                                   3540 ;	888n.c:458: for (k=0;k<8;k++) {
      000EDD 75*2C 00         [24] 3541 	mov	_tranoutchar_k_1_85,#0x00
      000EE0                       3542 00108$:
                                   3543 ;	888n.c:459: display[k][3]|=table_cha[c][k]&a;
      000EE0 E5*2C            [12] 3544 	mov	a,_tranoutchar_k_1_85
      000EE2 75 F0 08         [24] 3545 	mov	b,#0x08
      000EE5 A4               [48] 3546 	mul	ab
      000EE6 F8               [12] 3547 	mov	r0,a
      000EE7 A9 F0            [24] 3548 	mov	r1,b
      000EE9 24r00            [12] 3549 	add	a,#_display
      000EEB FC               [12] 3550 	mov	r4,a
      000EEC E9               [12] 3551 	mov	a,r1
      000EED 34s00            [12] 3552 	addc	a,#(_display >> 8)
      000EEF FE               [12] 3553 	mov	r6,a
      000EF0 74 03            [12] 3554 	mov	a,#0x03
      000EF2 2C               [12] 3555 	add	a,r4
      000EF3 FC               [12] 3556 	mov	r4,a
      000EF4 E4               [12] 3557 	clr	a
      000EF5 3E               [12] 3558 	addc	a,r6
      000EF6 FE               [12] 3559 	mov	r6,a
      000EF7 E8               [12] 3560 	mov	a,r0
      000EF8 24r00            [12] 3561 	add	a,#_display
      000EFA FA               [12] 3562 	mov	r2,a
      000EFB E9               [12] 3563 	mov	a,r1
      000EFC 34s00            [12] 3564 	addc	a,#(_display >> 8)
      000EFE FB               [12] 3565 	mov	r3,a
      000EFF 74 03            [12] 3566 	mov	a,#0x03
      000F01 2A               [12] 3567 	add	a,r2
      000F02 F5*31            [12] 3568 	mov	_tranoutchar_sloc1_1_0,a
      000F04 E4               [12] 3569 	clr	a
      000F05 3B               [12] 3570 	addc	a,r3
      000F06 F5*32            [12] 3571 	mov	(_tranoutchar_sloc1_1_0 + 1),a
      000F08 E5*2C            [12] 3572 	mov	a,_tranoutchar_k_1_85
      000F0A 25*2F            [12] 3573 	add	a,_tranoutchar_sloc0_1_0
      000F0C FD               [12] 3574 	mov	r5,a
      000F0D E4               [12] 3575 	clr	a
      000F0E 35*30            [12] 3576 	addc	a,(_tranoutchar_sloc0_1_0 + 1)
      000F10 FF               [12] 3577 	mov	r7,a
      000F11 8D 82            [24] 3578 	mov	dpl,r5
      000F13 8F 83            [24] 3579 	mov	dph,r7
      000F15 E4               [12] 3580 	clr	a
      000F16 93               [24] 3581 	movc	a,@a+dptr
      000F17 FB               [12] 3582 	mov	r3,a
      000F18 E5*2D            [12] 3583 	mov	a,_tranoutchar_a_1_85
      000F1A 52 03            [12] 3584 	anl	ar3,a
      000F1C 85*31 82         [24] 3585 	mov	dpl,_tranoutchar_sloc1_1_0
      000F1F 85*32 83         [24] 3586 	mov	dph,(_tranoutchar_sloc1_1_0 + 1)
      000F22 E0               [24] 3587 	movx	a,@dptr
      000F23 FA               [12] 3588 	mov	r2,a
      000F24 42 03            [12] 3589 	orl	ar3,a
      000F26 8C 82            [24] 3590 	mov	dpl,r4
      000F28 8E 83            [24] 3591 	mov	dph,r6
      000F2A EB               [12] 3592 	mov	a,r3
      000F2B F0               [24] 3593 	movx	@dptr,a
                                   3594 ;	888n.c:460: display[k][4]|=table_cha[c][k]&a;
      000F2C E8               [12] 3595 	mov	a,r0
      000F2D 24r00            [12] 3596 	add	a,#_display
      000F2F FC               [12] 3597 	mov	r4,a
      000F30 E9               [12] 3598 	mov	a,r1
      000F31 34s00            [12] 3599 	addc	a,#(_display >> 8)
      000F33 FE               [12] 3600 	mov	r6,a
      000F34 74 04            [12] 3601 	mov	a,#0x04
      000F36 2C               [12] 3602 	add	a,r4
      000F37 FC               [12] 3603 	mov	r4,a
      000F38 E4               [12] 3604 	clr	a
      000F39 3E               [12] 3605 	addc	a,r6
      000F3A FE               [12] 3606 	mov	r6,a
      000F3B E8               [12] 3607 	mov	a,r0
      000F3C 24r00            [12] 3608 	add	a,#_display
      000F3E F8               [12] 3609 	mov	r0,a
      000F3F E9               [12] 3610 	mov	a,r1
      000F40 34s00            [12] 3611 	addc	a,#(_display >> 8)
      000F42 F9               [12] 3612 	mov	r1,a
      000F43 74 04            [12] 3613 	mov	a,#0x04
      000F45 28               [12] 3614 	add	a,r0
      000F46 F8               [12] 3615 	mov	r0,a
      000F47 E4               [12] 3616 	clr	a
      000F48 39               [12] 3617 	addc	a,r1
      000F49 F9               [12] 3618 	mov	r1,a
      000F4A 8D 82            [24] 3619 	mov	dpl,r5
      000F4C 8F 83            [24] 3620 	mov	dph,r7
      000F4E E4               [12] 3621 	clr	a
      000F4F 93               [24] 3622 	movc	a,@a+dptr
      000F50 FD               [12] 3623 	mov	r5,a
      000F51 E5*2D            [12] 3624 	mov	a,_tranoutchar_a_1_85
      000F53 52 05            [12] 3625 	anl	ar5,a
      000F55 88 82            [24] 3626 	mov	dpl,r0
      000F57 89 83            [24] 3627 	mov	dph,r1
      000F59 E0               [24] 3628 	movx	a,@dptr
      000F5A F8               [12] 3629 	mov	r0,a
      000F5B 42 05            [12] 3630 	orl	ar5,a
      000F5D 8C 82            [24] 3631 	mov	dpl,r4
      000F5F 8E 83            [24] 3632 	mov	dph,r6
      000F61 ED               [12] 3633 	mov	a,r5
      000F62 F0               [24] 3634 	movx	@dptr,a
                                   3635 ;	888n.c:458: for (k=0;k<8;k++) {
      000F63 05*2C            [12] 3636 	inc	_tranoutchar_k_1_85
      000F65 74 F8            [12] 3637 	mov	a,#0x100 - 0x08
      000F67 25*2C            [12] 3638 	add	a,_tranoutchar_k_1_85
      000F69 40 03            [24] 3639 	jc	00140$
      000F6B 02r0ErE0         [24] 3640 	ljmp	00108$
      000F6E                       3641 00140$:
                                   3642 ;	888n.c:462: delay(speed);
      000F6E 85*29 82         [24] 3643 	mov	dpl,_tranoutchar_PARM_2
      000F71 85*2A 83         [24] 3644 	mov	dph,(_tranoutchar_PARM_2 + 1)
      000F74 12r00r20         [24] 3645 	lcall	_delay
                                   3646 ;	888n.c:451: for (i=0; i<8; i++) {
      000F77 05*2B            [12] 3647 	inc	_tranoutchar_i_1_85
      000F79 74 F8            [12] 3648 	mov	a,#0x100 - 0x08
      000F7B 25*2B            [12] 3649 	add	a,_tranoutchar_i_1_85
      000F7D 40 03            [24] 3650 	jc	00141$
      000F7F 02r0Er7E         [24] 3651 	ljmp	00110$
      000F82                       3652 00141$:
      000F82 22               [24] 3653 	ret
                                   3654 ;------------------------------------------------------------
                                   3655 ;Allocation info for local variables in function 'transss'
                                   3656 ;------------------------------------------------------------
                                   3657 ;i                         Allocated to registers r7 
                                   3658 ;j                         Allocated to registers r4 
                                   3659 ;------------------------------------------------------------
                                   3660 ;	888n.c:466: void transss()
                                   3661 ;	-----------------------------------------
                                   3662 ;	 function transss
                                   3663 ;	-----------------------------------------
      000F83                       3664 _transss:
                                   3665 ;	888n.c:470: for (i=0;i<8;i++) 
      000F83 7F 00            [12] 3666 	mov	r7,#0x00
                                   3667 ;	888n.c:471: for (j=0;j<8;j++) display[i][j]<<=1;
      000F85                       3668 00109$:
      000F85 EF               [12] 3669 	mov	a,r7
      000F86 75 F0 08         [24] 3670 	mov	b,#0x08
      000F89 A4               [48] 3671 	mul	ab
      000F8A FD               [12] 3672 	mov	r5,a
      000F8B AE F0            [24] 3673 	mov	r6,b
      000F8D 7C 00            [12] 3674 	mov	r4,#0x00
      000F8F                       3675 00103$:
      000F8F ED               [12] 3676 	mov	a,r5
      000F90 24r00            [12] 3677 	add	a,#_display
      000F92 FA               [12] 3678 	mov	r2,a
      000F93 EE               [12] 3679 	mov	a,r6
      000F94 34s00            [12] 3680 	addc	a,#(_display >> 8)
      000F96 FB               [12] 3681 	mov	r3,a
      000F97 EC               [12] 3682 	mov	a,r4
      000F98 2A               [12] 3683 	add	a,r2
      000F99 FA               [12] 3684 	mov	r2,a
      000F9A E4               [12] 3685 	clr	a
      000F9B 3B               [12] 3686 	addc	a,r3
      000F9C FB               [12] 3687 	mov	r3,a
      000F9D ED               [12] 3688 	mov	a,r5
      000F9E 24r00            [12] 3689 	add	a,#_display
      000FA0 F8               [12] 3690 	mov	r0,a
      000FA1 EE               [12] 3691 	mov	a,r6
      000FA2 34s00            [12] 3692 	addc	a,#(_display >> 8)
      000FA4 F9               [12] 3693 	mov	r1,a
      000FA5 EC               [12] 3694 	mov	a,r4
      000FA6 28               [12] 3695 	add	a,r0
      000FA7 F5 82            [12] 3696 	mov	dpl,a
      000FA9 E4               [12] 3697 	clr	a
      000FAA 39               [12] 3698 	addc	a,r1
      000FAB F5 83            [12] 3699 	mov	dph,a
      000FAD E0               [24] 3700 	movx	a,@dptr
      000FAE 25 E0            [12] 3701 	add	a,acc
      000FB0 F9               [12] 3702 	mov	r1,a
      000FB1 8A 82            [24] 3703 	mov	dpl,r2
      000FB3 8B 83            [24] 3704 	mov	dph,r3
      000FB5 F0               [24] 3705 	movx	@dptr,a
      000FB6 0C               [12] 3706 	inc	r4
      000FB7 BC 08 00         [24] 3707 	cjne	r4,#0x08,00120$
      000FBA                       3708 00120$:
      000FBA 40 D3            [24] 3709 	jc	00103$
                                   3710 ;	888n.c:470: for (i=0;i<8;i++) 
      000FBC 0F               [12] 3711 	inc	r7
      000FBD BF 08 00         [24] 3712 	cjne	r7,#0x08,00122$
      000FC0                       3713 00122$:
      000FC0 40 C3            [24] 3714 	jc	00109$
      000FC2 22               [24] 3715 	ret
                                   3716 ;------------------------------------------------------------
                                   3717 ;Allocation info for local variables in function 'flash_1'
                                   3718 ;------------------------------------------------------------
                                   3719 ;	888n.c:477: void flash_1()
                                   3720 ;	-----------------------------------------
                                   3721 ;	 function flash_1
                                   3722 ;	-----------------------------------------
      000FC3                       3723 _flash_1:
                                   3724 ;	888n.c:479: clear(0);
      000FC3 75 82 00         [24] 3725 	mov	dpl,#0x00
      000FC6 12r00rCA         [24] 3726 	lcall	_clear
                                   3727 ;	888n.c:480: type(1,0);
      000FC9 75*00 00         [24] 3728 	mov	_type_PARM_2,#0x00
      000FCC 75 82 01         [24] 3729 	mov	dpl,#0x01
      000FCF 12r02r2B         [24] 3730 	lcall	_type
                                   3731 ;	888n.c:481: delay(60000);
      000FD2 90 EA 60         [24] 3732 	mov	dptr,#0xea60
      000FD5 12r00r20         [24] 3733 	lcall	_delay
                                   3734 ;	888n.c:482: type(2,0);
      000FD8 75*00 00         [24] 3735 	mov	_type_PARM_2,#0x00
      000FDB 75 82 02         [24] 3736 	mov	dpl,#0x02
      000FDE 12r02r2B         [24] 3737 	lcall	_type
                                   3738 ;	888n.c:483: delay(60000);
      000FE1 90 EA 60         [24] 3739 	mov	dptr,#0xea60
      000FE4 12r00r20         [24] 3740 	lcall	_delay
                                   3741 ;	888n.c:484: type(3,0);
      000FE7 75*00 00         [24] 3742 	mov	_type_PARM_2,#0x00
      000FEA 75 82 03         [24] 3743 	mov	dpl,#0x03
      000FED 12r02r2B         [24] 3744 	lcall	_type
                                   3745 ;	888n.c:485: delay(60000);
      000FF0 90 EA 60         [24] 3746 	mov	dptr,#0xea60
      000FF3 12r00r20         [24] 3747 	lcall	_delay
                                   3748 ;	888n.c:486: type(4,0);
      000FF6 75*00 00         [24] 3749 	mov	_type_PARM_2,#0x00
      000FF9 75 82 04         [24] 3750 	mov	dpl,#0x04
      000FFC 12r02r2B         [24] 3751 	lcall	_type
                                   3752 ;	888n.c:487: delay(60000);
      000FFF 90 EA 60         [24] 3753 	mov	dptr,#0xea60
      001002 12r00r20         [24] 3754 	lcall	_delay
                                   3755 ;	888n.c:488: delay(60000);
      001005 90 EA 60         [24] 3756 	mov	dptr,#0xea60
      001008 12r00r20         [24] 3757 	lcall	_delay
                                   3758 ;	888n.c:489: clear(0);
      00100B 75 82 00         [24] 3759 	mov	dpl,#0x00
      00100E 12r00rCA         [24] 3760 	lcall	_clear
                                   3761 ;	888n.c:490: rolldisplay(30000);
      001011 90 75 30         [24] 3762 	mov	dptr,#0x7530
      001014 12r09rE1         [24] 3763 	lcall	_rolldisplay
                                   3764 ;	888n.c:491: type(0,7);
      001017 75*00 07         [24] 3765 	mov	_type_PARM_2,#0x07
      00101A 75 82 00         [24] 3766 	mov	dpl,#0x00
      00101D 12r02r2B         [24] 3767 	lcall	_type
                                   3768 ;	888n.c:492: delay(60000);
      001020 90 EA 60         [24] 3769 	mov	dptr,#0xea60
      001023 12r00r20         [24] 3770 	lcall	_delay
                                   3771 ;	888n.c:493: trailler(6000);
      001026 90 17 70         [24] 3772 	mov	dptr,#0x1770
      001029 12r00rF7         [24] 3773 	lcall	_trailler
                                   3774 ;	888n.c:494: delay(60000);
      00102C 90 EA 60         [24] 3775 	mov	dptr,#0xea60
      00102F 02r00r20         [24] 3776 	ljmp	_delay
                                   3777 ;------------------------------------------------------------
                                   3778 ;Allocation info for local variables in function 'flash_2'
                                   3779 ;------------------------------------------------------------
                                   3780 ;i                         Allocated to registers r7 
                                   3781 ;------------------------------------------------------------
                                   3782 ;	888n.c:497: void flash_2()
                                   3783 ;	-----------------------------------------
                                   3784 ;	 function flash_2
                                   3785 ;	-----------------------------------------
      001032                       3786 _flash_2:
                                   3787 ;	888n.c:501: for (i=129;i>0;i--) {
      001032 7F 81            [12] 3788 	mov	r7,#0x81
      001034                       3789 00105$:
                                   3790 ;	888n.c:502: cirp(i-2,0,1);
      001034 EF               [12] 3791 	mov	a,r7
      001035 24 FE            [12] 3792 	add	a,#0xfe
      001037 F5 82            [12] 3793 	mov	dpl,a
      001039 75*02 00         [24] 3794 	mov	_cirp_PARM_2,#0x00
      00103C 75*03 01         [24] 3795 	mov	_cirp_PARM_3,#0x01
      00103F C0 07            [24] 3796 	push	ar7
      001041 12r02r68         [24] 3797 	lcall	_cirp
                                   3798 ;	888n.c:503: delay(8000);
      001044 90 1F 40         [24] 3799 	mov	dptr,#0x1f40
      001047 12r00r20         [24] 3800 	lcall	_delay
      00104A D0 07            [24] 3801 	pop	ar7
                                   3802 ;	888n.c:504: cirp(i-1,0,0);
      00104C EF               [12] 3803 	mov	a,r7
      00104D 14               [12] 3804 	dec	a
      00104E FE               [12] 3805 	mov	r6,a
      00104F 75*02 00         [24] 3806 	mov	_cirp_PARM_2,#0x00
      001052 75*03 00         [24] 3807 	mov	_cirp_PARM_3,#0x00
      001055 8E 82            [24] 3808 	mov	dpl,r6
      001057 C0 06            [24] 3809 	push	ar6
      001059 12r02r68         [24] 3810 	lcall	_cirp
      00105C D0 06            [24] 3811 	pop	ar6
                                   3812 ;	888n.c:501: for (i=129;i>0;i--) {
      00105E 8E 07            [24] 3813 	mov	ar7,r6
      001060 EF               [12] 3814 	mov	a,r7
      001061 70 D1            [24] 3815 	jnz	00105$
                                   3816 ;	888n.c:507: delay(8000);     
      001063 90 1F 40         [24] 3817 	mov	dptr,#0x1f40
      001066 12r00r20         [24] 3818 	lcall	_delay
                                   3819 ;	888n.c:509: for (i=0;i<136;i++) {
      001069 7F 00            [12] 3820 	mov	r7,#0x00
      00106B                       3821 00107$:
                                   3822 ;	888n.c:510: cirp(i,1,1);
      00106B 75*02 01         [24] 3823 	mov	_cirp_PARM_2,#0x01
      00106E 75*03 01         [24] 3824 	mov	_cirp_PARM_3,#0x01
      001071 8F 82            [24] 3825 	mov	dpl,r7
      001073 C0 07            [24] 3826 	push	ar7
      001075 12r02r68         [24] 3827 	lcall	_cirp
                                   3828 ;	888n.c:511: delay(8000);
      001078 90 1F 40         [24] 3829 	mov	dptr,#0x1f40
      00107B 12r00r20         [24] 3830 	lcall	_delay
      00107E D0 07            [24] 3831 	pop	ar7
                                   3832 ;	888n.c:512: cirp(i-8,1,0);
      001080 EF               [12] 3833 	mov	a,r7
      001081 24 F8            [12] 3834 	add	a,#0xf8
      001083 F5 82            [12] 3835 	mov	dpl,a
      001085 75*02 01         [24] 3836 	mov	_cirp_PARM_2,#0x01
      001088 75*03 00         [24] 3837 	mov	_cirp_PARM_3,#0x00
      00108B C0 07            [24] 3838 	push	ar7
      00108D 12r02r68         [24] 3839 	lcall	_cirp
      001090 D0 07            [24] 3840 	pop	ar7
                                   3841 ;	888n.c:509: for (i=0;i<136;i++) {
      001092 0F               [12] 3842 	inc	r7
      001093 BF 88 00         [24] 3843 	cjne	r7,#0x88,00147$
      001096                       3844 00147$:
      001096 40 D3            [24] 3845 	jc	00107$
                                   3846 ;	888n.c:515: delay(8000);
      001098 90 1F 40         [24] 3847 	mov	dptr,#0x1f40
      00109B 12r00r20         [24] 3848 	lcall	_delay
                                   3849 ;	888n.c:517: for (i=129;i>0;i--) {
      00109E 7F 81            [12] 3850 	mov	r7,#0x81
      0010A0                       3851 00109$:
                                   3852 ;	888n.c:518: cirp(i-2,0,1);
      0010A0 EF               [12] 3853 	mov	a,r7
      0010A1 24 FE            [12] 3854 	add	a,#0xfe
      0010A3 F5 82            [12] 3855 	mov	dpl,a
      0010A5 75*02 00         [24] 3856 	mov	_cirp_PARM_2,#0x00
      0010A8 75*03 01         [24] 3857 	mov	_cirp_PARM_3,#0x01
      0010AB C0 07            [24] 3858 	push	ar7
      0010AD 12r02r68         [24] 3859 	lcall	_cirp
                                   3860 ;	888n.c:519: delay(8000);
      0010B0 90 1F 40         [24] 3861 	mov	dptr,#0x1f40
      0010B3 12r00r20         [24] 3862 	lcall	_delay
      0010B6 D0 07            [24] 3863 	pop	ar7
                                   3864 ;	888n.c:517: for (i=129;i>0;i--) {
      0010B8 DF E6            [24] 3865 	djnz	r7,00109$
                                   3866 ;	888n.c:522: delay(8000);
      0010BA 90 1F 40         [24] 3867 	mov	dptr,#0x1f40
      0010BD 12r00r20         [24] 3868 	lcall	_delay
                                   3869 ;	888n.c:524: for (i=0;i<128;i++) {
      0010C0 7F 00            [12] 3870 	mov	r7,#0x00
      0010C2                       3871 00111$:
                                   3872 ;	888n.c:525: cirp(i-8,1,0);
      0010C2 EF               [12] 3873 	mov	a,r7
      0010C3 24 F8            [12] 3874 	add	a,#0xf8
      0010C5 F5 82            [12] 3875 	mov	dpl,a
      0010C7 75*02 01         [24] 3876 	mov	_cirp_PARM_2,#0x01
      0010CA 75*03 00         [24] 3877 	mov	_cirp_PARM_3,#0x00
      0010CD C0 07            [24] 3878 	push	ar7
      0010CF 12r02r68         [24] 3879 	lcall	_cirp
                                   3880 ;	888n.c:526: delay(8000);
      0010D2 90 1F 40         [24] 3881 	mov	dptr,#0x1f40
      0010D5 12r00r20         [24] 3882 	lcall	_delay
      0010D8 D0 07            [24] 3883 	pop	ar7
                                   3884 ;	888n.c:524: for (i=0;i<128;i++) {
      0010DA 0F               [12] 3885 	inc	r7
      0010DB BF 80 00         [24] 3886 	cjne	r7,#0x80,00151$
      0010DE                       3887 00151$:
      0010DE 40 E2            [24] 3888 	jc	00111$
                                   3889 ;	888n.c:529: delay(60000);  
      0010E0 90 EA 60         [24] 3890 	mov	dptr,#0xea60
      0010E3 02r00r20         [24] 3891 	ljmp	_delay
                                   3892 ;------------------------------------------------------------
                                   3893 ;Allocation info for local variables in function 'flash_3'
                                   3894 ;------------------------------------------------------------
                                   3895 ;i                         Allocated to registers r7 
                                   3896 ;------------------------------------------------------------
                                   3897 ;	888n.c:532: void flash_3()
                                   3898 ;	-----------------------------------------
                                   3899 ;	 function flash_3
                                   3900 ;	-----------------------------------------
      0010E6                       3901 _flash_3:
                                   3902 ;	888n.c:536: for (i=0;i<8;i++) {
      0010E6 7F 00            [12] 3903 	mov	r7,#0x00
      0010E8                       3904 00110$:
                                   3905 ;	888n.c:537: box_apeak_xy(0,i,0,7,i,7,1,1);
      0010E8 8F*17            [24] 3906 	mov	_box_apeak_xy_PARM_2,r7
      0010EA 75*18 00         [24] 3907 	mov	_box_apeak_xy_PARM_3,#0x00
      0010ED 75*19 07         [24] 3908 	mov	_box_apeak_xy_PARM_4,#0x07
      0010F0 8F*1A            [24] 3909 	mov	_box_apeak_xy_PARM_5,r7
      0010F2 75*1B 07         [24] 3910 	mov	_box_apeak_xy_PARM_6,#0x07
      0010F5 75*1C 01         [24] 3911 	mov	_box_apeak_xy_PARM_7,#0x01
      0010F8 75*1D 01         [24] 3912 	mov	_box_apeak_xy_PARM_8,#0x01
      0010FB 75 82 00         [24] 3913 	mov	dpl,#0x00
      0010FE C0 07            [24] 3914 	push	ar7
      001100 12r08r89         [24] 3915 	lcall	_box_apeak_xy
                                   3916 ;	888n.c:538: delay(20000);
      001103 90 4E 20         [24] 3917 	mov	dptr,#0x4e20
      001106 12r00r20         [24] 3918 	lcall	_delay
      001109 D0 07            [24] 3919 	pop	ar7
                                   3920 ;	888n.c:539: if (i<7) box_apeak_xy(0,i,0,7,i,7,1,0);
      00110B C3               [12] 3921 	clr	c
      00110C EF               [12] 3922 	mov	a,r7
      00110D 64 80            [12] 3923 	xrl	a,#0x80
      00110F 94 87            [12] 3924 	subb	a,#0x87
      001111 50 1D            [24] 3925 	jnc	00111$
      001113 8F*17            [24] 3926 	mov	_box_apeak_xy_PARM_2,r7
      001115 75*18 00         [24] 3927 	mov	_box_apeak_xy_PARM_3,#0x00
      001118 75*19 07         [24] 3928 	mov	_box_apeak_xy_PARM_4,#0x07
      00111B 8F*1A            [24] 3929 	mov	_box_apeak_xy_PARM_5,r7
      00111D 75*1B 07         [24] 3930 	mov	_box_apeak_xy_PARM_6,#0x07
      001120 75*1C 01         [24] 3931 	mov	_box_apeak_xy_PARM_7,#0x01
      001123 75*1D 00         [24] 3932 	mov	_box_apeak_xy_PARM_8,#0x00
      001126 75 82 00         [24] 3933 	mov	dpl,#0x00
      001129 C0 07            [24] 3934 	push	ar7
      00112B 12r08r89         [24] 3935 	lcall	_box_apeak_xy
      00112E D0 07            [24] 3936 	pop	ar7
      001130                       3937 00111$:
                                   3938 ;	888n.c:536: for (i=0;i<8;i++) {
      001130 0F               [12] 3939 	inc	r7
      001131 C3               [12] 3940 	clr	c
      001132 EF               [12] 3941 	mov	a,r7
      001133 64 80            [12] 3942 	xrl	a,#0x80
      001135 94 88            [12] 3943 	subb	a,#0x88
      001137 40 AF            [24] 3944 	jc	00110$
                                   3945 ;	888n.c:542: for (i=7; i>=0; i--) {
      001139 7F 07            [12] 3946 	mov	r7,#0x07
      00113B                       3947 00112$:
                                   3948 ;	888n.c:543: box_apeak_xy(0,i,0,7,i,7,1,1);
      00113B 8F*17            [24] 3949 	mov	_box_apeak_xy_PARM_2,r7
      00113D 75*18 00         [24] 3950 	mov	_box_apeak_xy_PARM_3,#0x00
      001140 75*19 07         [24] 3951 	mov	_box_apeak_xy_PARM_4,#0x07
      001143 8F*1A            [24] 3952 	mov	_box_apeak_xy_PARM_5,r7
      001145 75*1B 07         [24] 3953 	mov	_box_apeak_xy_PARM_6,#0x07
      001148 75*1C 01         [24] 3954 	mov	_box_apeak_xy_PARM_7,#0x01
      00114B 75*1D 01         [24] 3955 	mov	_box_apeak_xy_PARM_8,#0x01
      00114E 75 82 00         [24] 3956 	mov	dpl,#0x00
      001151 C0 07            [24] 3957 	push	ar7
      001153 12r08r89         [24] 3958 	lcall	_box_apeak_xy
                                   3959 ;	888n.c:544: delay(20000);
      001156 90 4E 20         [24] 3960 	mov	dptr,#0x4e20
      001159 12r00r20         [24] 3961 	lcall	_delay
      00115C D0 07            [24] 3962 	pop	ar7
                                   3963 ;	888n.c:545: if (i>0) box_apeak_xy(0,i,0,7,i,7,1,0);
      00115E C3               [12] 3964 	clr	c
      00115F 74 80            [12] 3965 	mov	a,#(0x00 ^ 0x80)
      001161 8F F0            [24] 3966 	mov	b,r7
      001163 63 F0 80         [24] 3967 	xrl	b,#0x80
      001166 95 F0            [12] 3968 	subb	a,b
      001168 50 1D            [24] 3969 	jnc	00113$
      00116A 8F*17            [24] 3970 	mov	_box_apeak_xy_PARM_2,r7
      00116C 75*18 00         [24] 3971 	mov	_box_apeak_xy_PARM_3,#0x00
      00116F 75*19 07         [24] 3972 	mov	_box_apeak_xy_PARM_4,#0x07
      001172 8F*1A            [24] 3973 	mov	_box_apeak_xy_PARM_5,r7
      001174 75*1B 07         [24] 3974 	mov	_box_apeak_xy_PARM_6,#0x07
      001177 75*1C 01         [24] 3975 	mov	_box_apeak_xy_PARM_7,#0x01
      00117A 75*1D 00         [24] 3976 	mov	_box_apeak_xy_PARM_8,#0x00
      00117D 75 82 00         [24] 3977 	mov	dpl,#0x00
      001180 C0 07            [24] 3978 	push	ar7
      001182 12r08r89         [24] 3979 	lcall	_box_apeak_xy
      001185 D0 07            [24] 3980 	pop	ar7
      001187                       3981 00113$:
                                   3982 ;	888n.c:542: for (i=7; i>=0; i--) {
      001187 1F               [12] 3983 	dec	r7
      001188 EF               [12] 3984 	mov	a,r7
      001189 30 E7 AF         [24] 3985 	jnb	acc.7,00112$
                                   3986 ;	888n.c:548: for (i=0; i<8; i++) {
      00118C 7F 00            [12] 3987 	mov	r7,#0x00
      00118E                       3988 00114$:
                                   3989 ;	888n.c:549: box_apeak_xy(0,i,0,7,i,7,1,1);
      00118E 8F*17            [24] 3990 	mov	_box_apeak_xy_PARM_2,r7
      001190 75*18 00         [24] 3991 	mov	_box_apeak_xy_PARM_3,#0x00
      001193 75*19 07         [24] 3992 	mov	_box_apeak_xy_PARM_4,#0x07
      001196 8F*1A            [24] 3993 	mov	_box_apeak_xy_PARM_5,r7
      001198 75*1B 07         [24] 3994 	mov	_box_apeak_xy_PARM_6,#0x07
      00119B 75*1C 01         [24] 3995 	mov	_box_apeak_xy_PARM_7,#0x01
      00119E 75*1D 01         [24] 3996 	mov	_box_apeak_xy_PARM_8,#0x01
      0011A1 75 82 00         [24] 3997 	mov	dpl,#0x00
      0011A4 C0 07            [24] 3998 	push	ar7
      0011A6 12r08r89         [24] 3999 	lcall	_box_apeak_xy
                                   4000 ;	888n.c:550: delay(20000);
      0011A9 90 4E 20         [24] 4001 	mov	dptr,#0x4e20
      0011AC 12r00r20         [24] 4002 	lcall	_delay
      0011AF D0 07            [24] 4003 	pop	ar7
                                   4004 ;	888n.c:551: if (i<7) box_apeak_xy(0,i,0,7,i,7,1,0);
      0011B1 C3               [12] 4005 	clr	c
      0011B2 EF               [12] 4006 	mov	a,r7
      0011B3 64 80            [12] 4007 	xrl	a,#0x80
      0011B5 94 87            [12] 4008 	subb	a,#0x87
      0011B7 50 1D            [24] 4009 	jnc	00115$
      0011B9 8F*17            [24] 4010 	mov	_box_apeak_xy_PARM_2,r7
      0011BB 75*18 00         [24] 4011 	mov	_box_apeak_xy_PARM_3,#0x00
      0011BE 75*19 07         [24] 4012 	mov	_box_apeak_xy_PARM_4,#0x07
      0011C1 8F*1A            [24] 4013 	mov	_box_apeak_xy_PARM_5,r7
      0011C3 75*1B 07         [24] 4014 	mov	_box_apeak_xy_PARM_6,#0x07
      0011C6 75*1C 01         [24] 4015 	mov	_box_apeak_xy_PARM_7,#0x01
      0011C9 75*1D 00         [24] 4016 	mov	_box_apeak_xy_PARM_8,#0x00
      0011CC 75 82 00         [24] 4017 	mov	dpl,#0x00
      0011CF C0 07            [24] 4018 	push	ar7
      0011D1 12r08r89         [24] 4019 	lcall	_box_apeak_xy
      0011D4 D0 07            [24] 4020 	pop	ar7
      0011D6                       4021 00115$:
                                   4022 ;	888n.c:548: for (i=0; i<8; i++) {
      0011D6 0F               [12] 4023 	inc	r7
      0011D7 C3               [12] 4024 	clr	c
      0011D8 EF               [12] 4025 	mov	a,r7
      0011D9 64 80            [12] 4026 	xrl	a,#0x80
      0011DB 94 88            [12] 4027 	subb	a,#0x88
      0011DD 40 AF            [24] 4028 	jc	00114$
      0011DF 22               [24] 4029 	ret
                                   4030 ;------------------------------------------------------------
                                   4031 ;Allocation info for local variables in function 'flash_4'
                                   4032 ;------------------------------------------------------------
                                   4033 ;i                         Allocated to registers r7 
                                   4034 ;j                         Allocated to registers r7 
                                   4035 ;an                        Allocated with name '_flash_4_an_1_99'
                                   4036 ;------------------------------------------------------------
                                   4037 ;	888n.c:555: void flash_4()
                                   4038 ;	-----------------------------------------
                                   4039 ;	 function flash_4
                                   4040 ;	-----------------------------------------
      0011E0                       4041 _flash_4:
                                   4042 ;	888n.c:560: for (j=7;j<15;j++) an[j-7]=j;
      0011E0 7F 07            [12] 4043 	mov	r7,#0x07
      0011E2                       4044 00124$:
      0011E2 EF               [12] 4045 	mov	a,r7
      0011E3 24 F9            [12] 4046 	add	a,#0xf9
      0011E5 24r33            [12] 4047 	add	a,#_flash_4_an_1_99
      0011E7 F8               [12] 4048 	mov	r0,a
      0011E8 A6 07            [24] 4049 	mov	@r0,ar7
      0011EA 0F               [12] 4050 	inc	r7
      0011EB C3               [12] 4051 	clr	c
      0011EC EF               [12] 4052 	mov	a,r7
      0011ED 64 80            [12] 4053 	xrl	a,#0x80
      0011EF 94 8F            [12] 4054 	subb	a,#0x8f
      0011F1 40 EF            [24] 4055 	jc	00124$
                                   4056 ;	888n.c:562: for (i=0;i<=16;i++) {
      0011F3 7F 00            [12] 4057 	mov	r7,#0x00
                                   4058 ;	888n.c:563: for (j=0;j<8;j++)
      0011F5                       4059 00150$:
      0011F5 7E 00            [12] 4060 	mov	r6,#0x00
      0011F7                       4061 00126$:
                                   4062 ;	888n.c:564: if ((an[j]<8) && (an[j]>=0)) line(0,an[j],j,7,an[j],j,1);
      0011F7 EE               [12] 4063 	mov	a,r6
      0011F8 24r33            [12] 4064 	add	a,#_flash_4_an_1_99
      0011FA F9               [12] 4065 	mov	r1,a
      0011FB 87 05            [24] 4066 	mov	ar5,@r1
      0011FD C3               [12] 4067 	clr	c
      0011FE ED               [12] 4068 	mov	a,r5
      0011FF 64 80            [12] 4069 	xrl	a,#0x80
      001201 94 88            [12] 4070 	subb	a,#0x88
      001203 50 20            [24] 4071 	jnc	00127$
      001205 ED               [12] 4072 	mov	a,r5
      001206 20 E7 1C         [24] 4073 	jb	acc.7,00127$
      001209 8D*04            [24] 4074 	mov	_line_PARM_2,r5
      00120B 8E*05            [24] 4075 	mov	_line_PARM_3,r6
      00120D 75*06 07         [24] 4076 	mov	_line_PARM_4,#0x07
      001210 8D*07            [24] 4077 	mov	_line_PARM_5,r5
      001212 8E*08            [24] 4078 	mov	_line_PARM_6,r6
      001214 75*09 01         [24] 4079 	mov	_line_PARM_7,#0x01
      001217 75 82 00         [24] 4080 	mov	dpl,#0x00
      00121A C0 07            [24] 4081 	push	ar7
      00121C C0 06            [24] 4082 	push	ar6
      00121E 12r02rAD         [24] 4083 	lcall	_line
      001221 D0 06            [24] 4084 	pop	ar6
      001223 D0 07            [24] 4085 	pop	ar7
      001225                       4086 00127$:
                                   4087 ;	888n.c:563: for (j=0;j<8;j++)
      001225 0E               [12] 4088 	inc	r6
      001226 C3               [12] 4089 	clr	c
      001227 EE               [12] 4090 	mov	a,r6
      001228 64 80            [12] 4091 	xrl	a,#0x80
      00122A 94 88            [12] 4092 	subb	a,#0x88
      00122C 40 C9            [24] 4093 	jc	00126$
                                   4094 ;	888n.c:565: for (j=0;j<8;j++) {
      00122E 7E 00            [12] 4095 	mov	r6,#0x00
      001230                       4096 00128$:
                                   4097 ;	888n.c:566: if (((an[j]+1)<8)&(an[j]>=0)) line(0,an[j]+1,j,7,an[j]+1,j,0);
      001230 EE               [12] 4098 	mov	a,r6
      001231 24r33            [12] 4099 	add	a,#_flash_4_an_1_99
      001233 F9               [12] 4100 	mov	r1,a
      001234 E7               [12] 4101 	mov	a,@r1
      001235 FD               [12] 4102 	mov	r5,a
      001236 FB               [12] 4103 	mov	r3,a
      001237 33               [12] 4104 	rlc	a
      001238 95 E0            [12] 4105 	subb	a,acc
      00123A FC               [12] 4106 	mov	r4,a
      00123B 0B               [12] 4107 	inc	r3
      00123C BB 00 01         [24] 4108 	cjne	r3,#0x00,00238$
      00123F 0C               [12] 4109 	inc	r4
      001240                       4110 00238$:
      001240 C3               [12] 4111 	clr	c
      001241 EB               [12] 4112 	mov	a,r3
      001242 94 08            [12] 4113 	subb	a,#0x08
      001244 EC               [12] 4114 	mov	a,r4
      001245 64 80            [12] 4115 	xrl	a,#0x80
      001247 94 80            [12] 4116 	subb	a,#0x80
      001249 E4               [12] 4117 	clr	a
      00124A 33               [12] 4118 	rlc	a
      00124B FB               [12] 4119 	mov	r3,a
      00124C ED               [12] 4120 	mov	a,r5
      00124D 33               [12] 4121 	rlc	a
      00124E B3               [12] 4122 	cpl	c
      00124F 92*01            [24] 4123 	mov	_flash_4_sloc0_1_0,c
      001251 E4               [12] 4124 	clr	a
      001252 33               [12] 4125 	rlc	a
      001253 FC               [12] 4126 	mov	r4,a
      001254 5B               [12] 4127 	anl	a,r3
      001255 60 1D            [24] 4128 	jz	00129$
      001257 0D               [12] 4129 	inc	r5
      001258 8D*04            [24] 4130 	mov	_line_PARM_2,r5
      00125A 8E*05            [24] 4131 	mov	_line_PARM_3,r6
      00125C 75*06 07         [24] 4132 	mov	_line_PARM_4,#0x07
      00125F 8D*07            [24] 4133 	mov	_line_PARM_5,r5
      001261 8E*08            [24] 4134 	mov	_line_PARM_6,r6
      001263 75*09 00         [24] 4135 	mov	_line_PARM_7,#0x00
      001266 75 82 00         [24] 4136 	mov	dpl,#0x00
      001269 C0 07            [24] 4137 	push	ar7
      00126B C0 06            [24] 4138 	push	ar6
      00126D 12r02rAD         [24] 4139 	lcall	_line
      001270 D0 06            [24] 4140 	pop	ar6
      001272 D0 07            [24] 4141 	pop	ar7
      001274                       4142 00129$:
                                   4143 ;	888n.c:565: for (j=0;j<8;j++) {
      001274 0E               [12] 4144 	inc	r6
      001275 C3               [12] 4145 	clr	c
      001276 EE               [12] 4146 	mov	a,r6
      001277 64 80            [12] 4147 	xrl	a,#0x80
      001279 94 88            [12] 4148 	subb	a,#0x88
      00127B 40 B3            [24] 4149 	jc	00128$
                                   4150 ;	888n.c:569: for (j=0;j<8;j++) {
      00127D 7E 00            [12] 4151 	mov	r6,#0x00
      00127F                       4152 00130$:
                                   4153 ;	888n.c:570: if (an[j]>0)
      00127F EE               [12] 4154 	mov	a,r6
      001280 24r33            [12] 4155 	add	a,#_flash_4_an_1_99
      001282 F9               [12] 4156 	mov	r1,a
      001283 87 05            [24] 4157 	mov	ar5,@r1
      001285 C3               [12] 4158 	clr	c
      001286 74 80            [12] 4159 	mov	a,#(0x00 ^ 0x80)
      001288 8D F0            [24] 4160 	mov	b,r5
      00128A 63 F0 80         [24] 4161 	xrl	b,#0x80
      00128D 95 F0            [12] 4162 	subb	a,b
      00128F 50 03            [24] 4163 	jnc	00131$
                                   4164 ;	888n.c:571: an[j]--;
      001291 ED               [12] 4165 	mov	a,r5
      001292 14               [12] 4166 	dec	a
      001293 F7               [12] 4167 	mov	@r1,a
      001294                       4168 00131$:
                                   4169 ;	888n.c:569: for (j=0;j<8;j++) {
      001294 0E               [12] 4170 	inc	r6
      001295 C3               [12] 4171 	clr	c
      001296 EE               [12] 4172 	mov	a,r6
      001297 64 80            [12] 4173 	xrl	a,#0x80
      001299 94 88            [12] 4174 	subb	a,#0x88
      00129B 40 E2            [24] 4175 	jc	00130$
                                   4176 ;	888n.c:573: delay(15000);
      00129D 90 3A 98         [24] 4177 	mov	dptr,#0x3a98
      0012A0 C0 07            [24] 4178 	push	ar7
      0012A2 12r00r20         [24] 4179 	lcall	_delay
      0012A5 D0 07            [24] 4180 	pop	ar7
                                   4181 ;	888n.c:562: for (i=0;i<=16;i++) {
      0012A7 0F               [12] 4182 	inc	r7
      0012A8 C3               [12] 4183 	clr	c
      0012A9 74 90            [12] 4184 	mov	a,#(0x10 ^ 0x80)
      0012AB 8F F0            [24] 4185 	mov	b,r7
      0012AD 63 F0 80         [24] 4186 	xrl	b,#0x80
      0012B0 95 F0            [12] 4187 	subb	a,b
      0012B2 40 03            [24] 4188 	jc	00243$
      0012B4 02r11rF5         [24] 4189 	ljmp	00150$
      0012B7                       4190 00243$:
                                   4191 ;	888n.c:576: for (j=0;j<8;j++) an[j]=1-j;
      0012B7 7F 00            [12] 4192 	mov	r7,#0x00
      0012B9                       4193 00134$:
      0012B9 EF               [12] 4194 	mov	a,r7
      0012BA 24r33            [12] 4195 	add	a,#_flash_4_an_1_99
      0012BC F9               [12] 4196 	mov	r1,a
      0012BD 74 01            [12] 4197 	mov	a,#0x01
      0012BF C3               [12] 4198 	clr	c
      0012C0 9F               [12] 4199 	subb	a,r7
      0012C1 F7               [12] 4200 	mov	@r1,a
      0012C2 0F               [12] 4201 	inc	r7
      0012C3 C3               [12] 4202 	clr	c
      0012C4 EF               [12] 4203 	mov	a,r7
      0012C5 64 80            [12] 4204 	xrl	a,#0x80
      0012C7 94 88            [12] 4205 	subb	a,#0x88
      0012C9 40 EE            [24] 4206 	jc	00134$
                                   4207 ;	888n.c:578: for (i=0;i<=16;i++) {
      0012CB 7F 00            [12] 4208 	mov	r7,#0x00
                                   4209 ;	888n.c:579: for (j=0;j<8;j++) if ((an[j]<8)&(an[j]>=0)) line(0,an[j],j,7,an[j],j,1);
      0012CD                       4210 00163$:
      0012CD 7E 00            [12] 4211 	mov	r6,#0x00
      0012CF                       4212 00136$:
      0012CF EE               [12] 4213 	mov	a,r6
      0012D0 24r33            [12] 4214 	add	a,#_flash_4_an_1_99
      0012D2 F9               [12] 4215 	mov	r1,a
      0012D3 87 05            [24] 4216 	mov	ar5,@r1
      0012D5 C3               [12] 4217 	clr	c
      0012D6 ED               [12] 4218 	mov	a,r5
      0012D7 64 80            [12] 4219 	xrl	a,#0x80
      0012D9 94 88            [12] 4220 	subb	a,#0x88
      0012DB E4               [12] 4221 	clr	a
      0012DC 33               [12] 4222 	rlc	a
      0012DD FC               [12] 4223 	mov	r4,a
      0012DE ED               [12] 4224 	mov	a,r5
      0012DF 33               [12] 4225 	rlc	a
      0012E0 B3               [12] 4226 	cpl	c
      0012E1 92*01            [24] 4227 	mov	_flash_4_sloc0_1_0,c
      0012E3 E4               [12] 4228 	clr	a
      0012E4 33               [12] 4229 	rlc	a
      0012E5 FB               [12] 4230 	mov	r3,a
      0012E6 5C               [12] 4231 	anl	a,r4
      0012E7 60 1C            [24] 4232 	jz	00137$
      0012E9 8D*04            [24] 4233 	mov	_line_PARM_2,r5
      0012EB 8E*05            [24] 4234 	mov	_line_PARM_3,r6
      0012ED 75*06 07         [24] 4235 	mov	_line_PARM_4,#0x07
      0012F0 8D*07            [24] 4236 	mov	_line_PARM_5,r5
      0012F2 8E*08            [24] 4237 	mov	_line_PARM_6,r6
      0012F4 75*09 01         [24] 4238 	mov	_line_PARM_7,#0x01
      0012F7 75 82 00         [24] 4239 	mov	dpl,#0x00
      0012FA C0 07            [24] 4240 	push	ar7
      0012FC C0 06            [24] 4241 	push	ar6
      0012FE 12r02rAD         [24] 4242 	lcall	_line
      001301 D0 06            [24] 4243 	pop	ar6
      001303 D0 07            [24] 4244 	pop	ar7
      001305                       4245 00137$:
      001305 0E               [12] 4246 	inc	r6
      001306 C3               [12] 4247 	clr	c
      001307 EE               [12] 4248 	mov	a,r6
      001308 64 80            [12] 4249 	xrl	a,#0x80
      00130A 94 88            [12] 4250 	subb	a,#0x88
      00130C 40 C1            [24] 4251 	jc	00136$
                                   4252 ;	888n.c:580: for (j=0;j<8;j++) {
      00130E 7E 00            [12] 4253 	mov	r6,#0x00
      001310                       4254 00138$:
                                   4255 ;	888n.c:581: if (((an[j]-1)<7)&(an[j]>0))
      001310 EE               [12] 4256 	mov	a,r6
      001311 24r33            [12] 4257 	add	a,#_flash_4_an_1_99
      001313 F9               [12] 4258 	mov	r1,a
      001314 E7               [12] 4259 	mov	a,@r1
      001315 FD               [12] 4260 	mov	r5,a
      001316 FB               [12] 4261 	mov	r3,a
      001317 33               [12] 4262 	rlc	a
      001318 95 E0            [12] 4263 	subb	a,acc
      00131A FC               [12] 4264 	mov	r4,a
      00131B 1B               [12] 4265 	dec	r3
      00131C BB FF 01         [24] 4266 	cjne	r3,#0xff,00247$
      00131F 1C               [12] 4267 	dec	r4
      001320                       4268 00247$:
      001320 C3               [12] 4269 	clr	c
      001321 EB               [12] 4270 	mov	a,r3
      001322 94 07            [12] 4271 	subb	a,#0x07
      001324 EC               [12] 4272 	mov	a,r4
      001325 64 80            [12] 4273 	xrl	a,#0x80
      001327 94 80            [12] 4274 	subb	a,#0x80
      001329 E4               [12] 4275 	clr	a
      00132A 33               [12] 4276 	rlc	a
      00132B FB               [12] 4277 	mov	r3,a
      00132C C3               [12] 4278 	clr	c
      00132D 74 80            [12] 4279 	mov	a,#(0x00 ^ 0x80)
      00132F 8D F0            [24] 4280 	mov	b,r5
      001331 63 F0 80         [24] 4281 	xrl	b,#0x80
      001334 95 F0            [12] 4282 	subb	a,b
      001336 E4               [12] 4283 	clr	a
      001337 33               [12] 4284 	rlc	a
      001338 FC               [12] 4285 	mov	r4,a
      001339 5B               [12] 4286 	anl	a,r3
      00133A 60 1D            [24] 4287 	jz	00139$
                                   4288 ;	888n.c:582: line(0,an[j]-1,j,7,an[j]-1,j,0);
      00133C 1D               [12] 4289 	dec	r5
      00133D 8D*04            [24] 4290 	mov	_line_PARM_2,r5
      00133F 8E*05            [24] 4291 	mov	_line_PARM_3,r6
      001341 75*06 07         [24] 4292 	mov	_line_PARM_4,#0x07
      001344 8D*07            [24] 4293 	mov	_line_PARM_5,r5
      001346 8E*08            [24] 4294 	mov	_line_PARM_6,r6
      001348 75*09 00         [24] 4295 	mov	_line_PARM_7,#0x00
      00134B 75 82 00         [24] 4296 	mov	dpl,#0x00
      00134E C0 07            [24] 4297 	push	ar7
      001350 C0 06            [24] 4298 	push	ar6
      001352 12r02rAD         [24] 4299 	lcall	_line
      001355 D0 06            [24] 4300 	pop	ar6
      001357 D0 07            [24] 4301 	pop	ar7
      001359                       4302 00139$:
                                   4303 ;	888n.c:580: for (j=0;j<8;j++) {
      001359 0E               [12] 4304 	inc	r6
      00135A C3               [12] 4305 	clr	c
      00135B EE               [12] 4306 	mov	a,r6
      00135C 64 80            [12] 4307 	xrl	a,#0x80
      00135E 94 88            [12] 4308 	subb	a,#0x88
      001360 40 AE            [24] 4309 	jc	00138$
                                   4310 ;	888n.c:585: for (j=0;j<8;j++) {
      001362 7E 00            [12] 4311 	mov	r6,#0x00
      001364                       4312 00140$:
                                   4313 ;	888n.c:586: if (an[j]<7) an[j]++;
      001364 EE               [12] 4314 	mov	a,r6
      001365 24r33            [12] 4315 	add	a,#_flash_4_an_1_99
      001367 F9               [12] 4316 	mov	r1,a
      001368 87 05            [24] 4317 	mov	ar5,@r1
      00136A C3               [12] 4318 	clr	c
      00136B ED               [12] 4319 	mov	a,r5
      00136C 64 80            [12] 4320 	xrl	a,#0x80
      00136E 94 87            [12] 4321 	subb	a,#0x87
      001370 50 03            [24] 4322 	jnc	00141$
      001372 ED               [12] 4323 	mov	a,r5
      001373 04               [12] 4324 	inc	a
      001374 F7               [12] 4325 	mov	@r1,a
      001375                       4326 00141$:
                                   4327 ;	888n.c:585: for (j=0;j<8;j++) {
      001375 0E               [12] 4328 	inc	r6
      001376 C3               [12] 4329 	clr	c
      001377 EE               [12] 4330 	mov	a,r6
      001378 64 80            [12] 4331 	xrl	a,#0x80
      00137A 94 88            [12] 4332 	subb	a,#0x88
      00137C 40 E6            [24] 4333 	jc	00140$
                                   4334 ;	888n.c:588: delay(15000);
      00137E 90 3A 98         [24] 4335 	mov	dptr,#0x3a98
      001381 C0 07            [24] 4336 	push	ar7
      001383 12r00r20         [24] 4337 	lcall	_delay
      001386 D0 07            [24] 4338 	pop	ar7
                                   4339 ;	888n.c:578: for (i=0;i<=16;i++) {
      001388 0F               [12] 4340 	inc	r7
      001389 C3               [12] 4341 	clr	c
      00138A 74 90            [12] 4342 	mov	a,#(0x10 ^ 0x80)
      00138C 8F F0            [24] 4343 	mov	b,r7
      00138E 63 F0 80         [24] 4344 	xrl	b,#0x80
      001391 95 F0            [12] 4345 	subb	a,b
      001393 40 03            [24] 4346 	jc	00252$
      001395 02r12rCD         [24] 4347 	ljmp	00163$
      001398                       4348 00252$:
      001398 22               [24] 4349 	ret
                                   4350 ;------------------------------------------------------------
                                   4351 ;Allocation info for local variables in function 'flash_5'
                                   4352 ;------------------------------------------------------------
                                   4353 ;a                         Allocated to registers 
                                   4354 ;i                         Allocated to registers r7 
                                   4355 ;j                         Allocated to registers r7 
                                   4356 ;an                        Allocated with name '_flash_5_an_1_106'
                                   4357 ;------------------------------------------------------------
                                   4358 ;	888n.c:592: void flash_5()
                                   4359 ;	-----------------------------------------
                                   4360 ;	 function flash_5
                                   4361 ;	-----------------------------------------
      001399                       4362 _flash_5:
                                   4363 ;	888n.c:598: for (j=7;j<11;j++) an[j-7]=j;
      001399 7F 07            [12] 4364 	mov	r7,#0x07
      00139B                       4365 00191$:
      00139B EF               [12] 4366 	mov	a,r7
      00139C 24 F9            [12] 4367 	add	a,#0xf9
      00139E 24r3B            [12] 4368 	add	a,#_flash_5_an_1_106
      0013A0 F8               [12] 4369 	mov	r0,a
      0013A1 A6 07            [24] 4370 	mov	@r0,ar7
      0013A3 0F               [12] 4371 	inc	r7
      0013A4 C3               [12] 4372 	clr	c
      0013A5 EF               [12] 4373 	mov	a,r7
      0013A6 64 80            [12] 4374 	xrl	a,#0x80
      0013A8 94 8B            [12] 4375 	subb	a,#0x8b
      0013AA 40 EF            [24] 4376 	jc	00191$
                                   4377 ;	888n.c:599: while (i--) {
      0013AC 7F 08            [12] 4378 	mov	r7,#0x08
      0013AE                       4379 00110$:
      0013AE 8F 06            [24] 4380 	mov	ar6,r7
      0013B0 1F               [12] 4381 	dec	r7
      0013B1 EE               [12] 4382 	mov	a,r6
      0013B2 70 03            [24] 4383 	jnz	00521$
      0013B4 02r14r50         [24] 4384 	ljmp	00112$
      0013B7                       4385 00521$:
                                   4386 ;	888n.c:600: for (j=0;j<4;j++) {
      0013B7 7E 00            [12] 4387 	mov	r6,#0x00
      0013B9                       4388 00193$:
                                   4389 ;	888n.c:601: if (an[j]<8) box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);
      0013B9 EE               [12] 4390 	mov	a,r6
      0013BA 24r3B            [12] 4391 	add	a,#_flash_5_an_1_106
      0013BC F9               [12] 4392 	mov	r1,a
      0013BD 87 05            [24] 4393 	mov	ar5,@r1
      0013BF C3               [12] 4394 	clr	c
      0013C0 ED               [12] 4395 	mov	a,r5
      0013C1 64 80            [12] 4396 	xrl	a,#0x80
      0013C3 94 88            [12] 4397 	subb	a,#0x88
      0013C5 50 22            [24] 4398 	jnc	00103$
      0013C7 74 07            [12] 4399 	mov	a,#0x07
      0013C9 C3               [12] 4400 	clr	c
      0013CA 9E               [12] 4401 	subb	a,r6
      0013CB FC               [12] 4402 	mov	r4,a
      0013CC 8D*17            [24] 4403 	mov	_box_apeak_xy_PARM_2,r5
      0013CE 8E*18            [24] 4404 	mov	_box_apeak_xy_PARM_3,r6
      0013D0 8C*19            [24] 4405 	mov	_box_apeak_xy_PARM_4,r4
      0013D2 8D*1A            [24] 4406 	mov	_box_apeak_xy_PARM_5,r5
      0013D4 8C*1B            [24] 4407 	mov	_box_apeak_xy_PARM_6,r4
      0013D6 75*1C 00         [24] 4408 	mov	_box_apeak_xy_PARM_7,#0x00
      0013D9 75*1D 01         [24] 4409 	mov	_box_apeak_xy_PARM_8,#0x01
      0013DC 8E 82            [24] 4410 	mov	dpl,r6
      0013DE C0 07            [24] 4411 	push	ar7
      0013E0 C0 06            [24] 4412 	push	ar6
      0013E2 12r08r89         [24] 4413 	lcall	_box_apeak_xy
      0013E5 D0 06            [24] 4414 	pop	ar6
      0013E7 D0 07            [24] 4415 	pop	ar7
      0013E9                       4416 00103$:
                                   4417 ;	888n.c:602: if (an[j]<7) box_apeak_xy(j,an[j]+1,j,7-j,an[j]+1,7-j,0,0);
      0013E9 EE               [12] 4418 	mov	a,r6
      0013EA 24r3B            [12] 4419 	add	a,#_flash_5_an_1_106
      0013EC F9               [12] 4420 	mov	r1,a
      0013ED 87 05            [24] 4421 	mov	ar5,@r1
      0013EF C3               [12] 4422 	clr	c
      0013F0 ED               [12] 4423 	mov	a,r5
      0013F1 64 80            [12] 4424 	xrl	a,#0x80
      0013F3 94 87            [12] 4425 	subb	a,#0x87
      0013F5 50 23            [24] 4426 	jnc	00194$
      0013F7 0D               [12] 4427 	inc	r5
      0013F8 74 07            [12] 4428 	mov	a,#0x07
      0013FA C3               [12] 4429 	clr	c
      0013FB 9E               [12] 4430 	subb	a,r6
      0013FC FC               [12] 4431 	mov	r4,a
      0013FD 8D*17            [24] 4432 	mov	_box_apeak_xy_PARM_2,r5
      0013FF 8E*18            [24] 4433 	mov	_box_apeak_xy_PARM_3,r6
      001401 8C*19            [24] 4434 	mov	_box_apeak_xy_PARM_4,r4
      001403 8D*1A            [24] 4435 	mov	_box_apeak_xy_PARM_5,r5
      001405 8C*1B            [24] 4436 	mov	_box_apeak_xy_PARM_6,r4
      001407 75*1C 00         [24] 4437 	mov	_box_apeak_xy_PARM_7,#0x00
      00140A 75*1D 00         [24] 4438 	mov	_box_apeak_xy_PARM_8,#0x00
      00140D 8E 82            [24] 4439 	mov	dpl,r6
      00140F C0 07            [24] 4440 	push	ar7
      001411 C0 06            [24] 4441 	push	ar6
      001413 12r08r89         [24] 4442 	lcall	_box_apeak_xy
      001416 D0 06            [24] 4443 	pop	ar6
      001418 D0 07            [24] 4444 	pop	ar7
      00141A                       4445 00194$:
                                   4446 ;	888n.c:600: for (j=0;j<4;j++) {
      00141A 0E               [12] 4447 	inc	r6
      00141B C3               [12] 4448 	clr	c
      00141C EE               [12] 4449 	mov	a,r6
      00141D 64 80            [12] 4450 	xrl	a,#0x80
      00141F 94 84            [12] 4451 	subb	a,#0x84
      001421 40 96            [24] 4452 	jc	00193$
                                   4453 ;	888n.c:604: for (j=0;j<4;j++)
      001423 7E 00            [12] 4454 	mov	r6,#0x00
      001425                       4455 00195$:
                                   4456 ;	888n.c:605: if (an[j]>3) an[j]--;
      001425 EE               [12] 4457 	mov	a,r6
      001426 24r3B            [12] 4458 	add	a,#_flash_5_an_1_106
      001428 F9               [12] 4459 	mov	r1,a
      001429 87 05            [24] 4460 	mov	ar5,@r1
      00142B C3               [12] 4461 	clr	c
      00142C 74 83            [12] 4462 	mov	a,#(0x03 ^ 0x80)
      00142E 8D F0            [24] 4463 	mov	b,r5
      001430 63 F0 80         [24] 4464 	xrl	b,#0x80
      001433 95 F0            [12] 4465 	subb	a,b
      001435 50 03            [24] 4466 	jnc	00196$
      001437 ED               [12] 4467 	mov	a,r5
      001438 14               [12] 4468 	dec	a
      001439 F7               [12] 4469 	mov	@r1,a
      00143A                       4470 00196$:
                                   4471 ;	888n.c:604: for (j=0;j<4;j++)
      00143A 0E               [12] 4472 	inc	r6
      00143B C3               [12] 4473 	clr	c
      00143C EE               [12] 4474 	mov	a,r6
      00143D 64 80            [12] 4475 	xrl	a,#0x80
      00143F 94 84            [12] 4476 	subb	a,#0x84
      001441 40 E2            [24] 4477 	jc	00195$
                                   4478 ;	888n.c:606: delay(a);
      001443 90 3A 98         [24] 4479 	mov	dptr,#0x3a98
      001446 C0 07            [24] 4480 	push	ar7
      001448 12r00r20         [24] 4481 	lcall	_delay
      00144B D0 07            [24] 4482 	pop	ar7
      00144D 02r13rAE         [24] 4483 	ljmp	00110$
      001450                       4484 00112$:
                                   4485 ;	888n.c:611: for (j=0;j<4;j++) an[j]=5-j;
      001450 7F 00            [12] 4486 	mov	r7,#0x00
      001452                       4487 00197$:
      001452 EF               [12] 4488 	mov	a,r7
      001453 24r3B            [12] 4489 	add	a,#_flash_5_an_1_106
      001455 F9               [12] 4490 	mov	r1,a
      001456 74 05            [12] 4491 	mov	a,#0x05
      001458 C3               [12] 4492 	clr	c
      001459 9F               [12] 4493 	subb	a,r7
      00145A F7               [12] 4494 	mov	@r1,a
      00145B 0F               [12] 4495 	inc	r7
      00145C C3               [12] 4496 	clr	c
      00145D EF               [12] 4497 	mov	a,r7
      00145E 64 80            [12] 4498 	xrl	a,#0x80
      001460 94 84            [12] 4499 	subb	a,#0x84
      001462 40 EE            [24] 4500 	jc	00197$
                                   4501 ;	888n.c:612: while (i--) {
      001464 7F 03            [12] 4502 	mov	r7,#0x03
      001466                       4503 00122$:
      001466 8F 06            [24] 4504 	mov	ar6,r7
      001468 1F               [12] 4505 	dec	r7
      001469 EE               [12] 4506 	mov	a,r6
      00146A 70 03            [24] 4507 	jnz	00528$
      00146C 02r15r08         [24] 4508 	ljmp	00124$
      00146F                       4509 00528$:
                                   4510 ;	888n.c:613: for (j=1;j<4;j++) {
      00146F 7E 01            [12] 4511 	mov	r6,#0x01
      001471                       4512 00199$:
                                   4513 ;	888n.c:614: if (an[j]<4) box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);
      001471 EE               [12] 4514 	mov	a,r6
      001472 24r3B            [12] 4515 	add	a,#_flash_5_an_1_106
      001474 F9               [12] 4516 	mov	r1,a
      001475 87 05            [24] 4517 	mov	ar5,@r1
      001477 C3               [12] 4518 	clr	c
      001478 ED               [12] 4519 	mov	a,r5
      001479 64 80            [12] 4520 	xrl	a,#0x80
      00147B 94 84            [12] 4521 	subb	a,#0x84
      00147D 50 22            [24] 4522 	jnc	00115$
      00147F 74 07            [12] 4523 	mov	a,#0x07
      001481 C3               [12] 4524 	clr	c
      001482 9E               [12] 4525 	subb	a,r6
      001483 FC               [12] 4526 	mov	r4,a
      001484 8D*17            [24] 4527 	mov	_box_apeak_xy_PARM_2,r5
      001486 8E*18            [24] 4528 	mov	_box_apeak_xy_PARM_3,r6
      001488 8C*19            [24] 4529 	mov	_box_apeak_xy_PARM_4,r4
      00148A 8D*1A            [24] 4530 	mov	_box_apeak_xy_PARM_5,r5
      00148C 8C*1B            [24] 4531 	mov	_box_apeak_xy_PARM_6,r4
      00148E 75*1C 00         [24] 4532 	mov	_box_apeak_xy_PARM_7,#0x00
      001491 75*1D 01         [24] 4533 	mov	_box_apeak_xy_PARM_8,#0x01
      001494 8E 82            [24] 4534 	mov	dpl,r6
      001496 C0 07            [24] 4535 	push	ar7
      001498 C0 06            [24] 4536 	push	ar6
      00149A 12r08r89         [24] 4537 	lcall	_box_apeak_xy
      00149D D0 06            [24] 4538 	pop	ar6
      00149F D0 07            [24] 4539 	pop	ar7
      0014A1                       4540 00115$:
                                   4541 ;	888n.c:615: if (an[j]<3) box_apeak_xy(j,an[j]+1,j,7-j,an[j]+1,7-j,0,0);
      0014A1 EE               [12] 4542 	mov	a,r6
      0014A2 24r3B            [12] 4543 	add	a,#_flash_5_an_1_106
      0014A4 F9               [12] 4544 	mov	r1,a
      0014A5 87 05            [24] 4545 	mov	ar5,@r1
      0014A7 C3               [12] 4546 	clr	c
      0014A8 ED               [12] 4547 	mov	a,r5
      0014A9 64 80            [12] 4548 	xrl	a,#0x80
      0014AB 94 83            [12] 4549 	subb	a,#0x83
      0014AD 50 23            [24] 4550 	jnc	00200$
      0014AF 0D               [12] 4551 	inc	r5
      0014B0 74 07            [12] 4552 	mov	a,#0x07
      0014B2 C3               [12] 4553 	clr	c
      0014B3 9E               [12] 4554 	subb	a,r6
      0014B4 FC               [12] 4555 	mov	r4,a
      0014B5 8D*17            [24] 4556 	mov	_box_apeak_xy_PARM_2,r5
      0014B7 8E*18            [24] 4557 	mov	_box_apeak_xy_PARM_3,r6
      0014B9 8C*19            [24] 4558 	mov	_box_apeak_xy_PARM_4,r4
      0014BB 8D*1A            [24] 4559 	mov	_box_apeak_xy_PARM_5,r5
      0014BD 8C*1B            [24] 4560 	mov	_box_apeak_xy_PARM_6,r4
      0014BF 75*1C 00         [24] 4561 	mov	_box_apeak_xy_PARM_7,#0x00
      0014C2 75*1D 00         [24] 4562 	mov	_box_apeak_xy_PARM_8,#0x00
      0014C5 8E 82            [24] 4563 	mov	dpl,r6
      0014C7 C0 07            [24] 4564 	push	ar7
      0014C9 C0 06            [24] 4565 	push	ar6
      0014CB 12r08r89         [24] 4566 	lcall	_box_apeak_xy
      0014CE D0 06            [24] 4567 	pop	ar6
      0014D0 D0 07            [24] 4568 	pop	ar7
      0014D2                       4569 00200$:
                                   4570 ;	888n.c:613: for (j=1;j<4;j++) {
      0014D2 0E               [12] 4571 	inc	r6
      0014D3 C3               [12] 4572 	clr	c
      0014D4 EE               [12] 4573 	mov	a,r6
      0014D5 64 80            [12] 4574 	xrl	a,#0x80
      0014D7 94 84            [12] 4575 	subb	a,#0x84
      0014D9 40 96            [24] 4576 	jc	00199$
                                   4577 ;	888n.c:617: for (j=0;j<4;j++)
      0014DB 7E 00            [12] 4578 	mov	r6,#0x00
      0014DD                       4579 00201$:
                                   4580 ;	888n.c:618: if (an[j]>0) an[j]--;
      0014DD EE               [12] 4581 	mov	a,r6
      0014DE 24r3B            [12] 4582 	add	a,#_flash_5_an_1_106
      0014E0 F9               [12] 4583 	mov	r1,a
      0014E1 87 05            [24] 4584 	mov	ar5,@r1
      0014E3 C3               [12] 4585 	clr	c
      0014E4 74 80            [12] 4586 	mov	a,#(0x00 ^ 0x80)
      0014E6 8D F0            [24] 4587 	mov	b,r5
      0014E8 63 F0 80         [24] 4588 	xrl	b,#0x80
      0014EB 95 F0            [12] 4589 	subb	a,b
      0014ED 50 03            [24] 4590 	jnc	00202$
      0014EF ED               [12] 4591 	mov	a,r5
      0014F0 14               [12] 4592 	dec	a
      0014F1 F7               [12] 4593 	mov	@r1,a
      0014F2                       4594 00202$:
                                   4595 ;	888n.c:617: for (j=0;j<4;j++)
      0014F2 0E               [12] 4596 	inc	r6
      0014F3 C3               [12] 4597 	clr	c
      0014F4 EE               [12] 4598 	mov	a,r6
      0014F5 64 80            [12] 4599 	xrl	a,#0x80
      0014F7 94 84            [12] 4600 	subb	a,#0x84
      0014F9 40 E2            [24] 4601 	jc	00201$
                                   4602 ;	888n.c:619: delay(a);
      0014FB 90 3A 98         [24] 4603 	mov	dptr,#0x3a98
      0014FE C0 07            [24] 4604 	push	ar7
      001500 12r00r20         [24] 4605 	lcall	_delay
      001503 D0 07            [24] 4606 	pop	ar7
      001505 02r14r66         [24] 4607 	ljmp	00122$
      001508                       4608 00124$:
                                   4609 ;	888n.c:624: for (j=1;j<4;j++) an[j]=4-j;
      001508 7F 01            [12] 4610 	mov	r7,#0x01
      00150A                       4611 00203$:
      00150A EF               [12] 4612 	mov	a,r7
      00150B 24r3B            [12] 4613 	add	a,#_flash_5_an_1_106
      00150D F9               [12] 4614 	mov	r1,a
      00150E 74 04            [12] 4615 	mov	a,#0x04
      001510 C3               [12] 4616 	clr	c
      001511 9F               [12] 4617 	subb	a,r7
      001512 F7               [12] 4618 	mov	@r1,a
      001513 0F               [12] 4619 	inc	r7
      001514 C3               [12] 4620 	clr	c
      001515 EF               [12] 4621 	mov	a,r7
      001516 64 80            [12] 4622 	xrl	a,#0x80
      001518 94 84            [12] 4623 	subb	a,#0x84
      00151A 40 EE            [24] 4624 	jc	00203$
                                   4625 ;	888n.c:625: while (i--) {
      00151C 7F 03            [12] 4626 	mov	r7,#0x03
      00151E                       4627 00134$:
      00151E 8F 06            [24] 4628 	mov	ar6,r7
      001520 1F               [12] 4629 	dec	r7
      001521 EE               [12] 4630 	mov	a,r6
      001522 70 03            [24] 4631 	jnz	00535$
      001524 02r15rBB         [24] 4632 	ljmp	00136$
      001527                       4633 00535$:
                                   4634 ;	888n.c:626: for (j=1;j<4;j++) {
      001527 7E 01            [12] 4635 	mov	r6,#0x01
      001529                       4636 00205$:
                                   4637 ;	888n.c:627: if (an[j]>=0) box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);
      001529 EE               [12] 4638 	mov	a,r6
      00152A 24r3B            [12] 4639 	add	a,#_flash_5_an_1_106
      00152C F9               [12] 4640 	mov	r1,a
      00152D E7               [12] 4641 	mov	a,@r1
      00152E FD               [12] 4642 	mov	r5,a
      00152F 20 E7 22         [24] 4643 	jb	acc.7,00127$
      001532 74 07            [12] 4644 	mov	a,#0x07
      001534 C3               [12] 4645 	clr	c
      001535 9E               [12] 4646 	subb	a,r6
      001536 FC               [12] 4647 	mov	r4,a
      001537 8D*17            [24] 4648 	mov	_box_apeak_xy_PARM_2,r5
      001539 8E*18            [24] 4649 	mov	_box_apeak_xy_PARM_3,r6
      00153B 8C*19            [24] 4650 	mov	_box_apeak_xy_PARM_4,r4
      00153D 8D*1A            [24] 4651 	mov	_box_apeak_xy_PARM_5,r5
      00153F 8C*1B            [24] 4652 	mov	_box_apeak_xy_PARM_6,r4
      001541 75*1C 00         [24] 4653 	mov	_box_apeak_xy_PARM_7,#0x00
      001544 75*1D 01         [24] 4654 	mov	_box_apeak_xy_PARM_8,#0x01
      001547 8E 82            [24] 4655 	mov	dpl,r6
      001549 C0 07            [24] 4656 	push	ar7
      00154B C0 06            [24] 4657 	push	ar6
      00154D 12r08r89         [24] 4658 	lcall	_box_apeak_xy
      001550 D0 06            [24] 4659 	pop	ar6
      001552 D0 07            [24] 4660 	pop	ar7
      001554                       4661 00127$:
                                   4662 ;	888n.c:628: if (an[j]>0) box_apeak_xy(j,an[j]-1,j,7-j,an[j]-1,7-j,0,0);
      001554 EE               [12] 4663 	mov	a,r6
      001555 24r3B            [12] 4664 	add	a,#_flash_5_an_1_106
      001557 F9               [12] 4665 	mov	r1,a
      001558 87 05            [24] 4666 	mov	ar5,@r1
      00155A C3               [12] 4667 	clr	c
      00155B 74 80            [12] 4668 	mov	a,#(0x00 ^ 0x80)
      00155D 8D F0            [24] 4669 	mov	b,r5
      00155F 63 F0 80         [24] 4670 	xrl	b,#0x80
      001562 95 F0            [12] 4671 	subb	a,b
      001564 50 23            [24] 4672 	jnc	00206$
      001566 1D               [12] 4673 	dec	r5
      001567 74 07            [12] 4674 	mov	a,#0x07
      001569 C3               [12] 4675 	clr	c
      00156A 9E               [12] 4676 	subb	a,r6
      00156B FC               [12] 4677 	mov	r4,a
      00156C 8D*17            [24] 4678 	mov	_box_apeak_xy_PARM_2,r5
      00156E 8E*18            [24] 4679 	mov	_box_apeak_xy_PARM_3,r6
      001570 8C*19            [24] 4680 	mov	_box_apeak_xy_PARM_4,r4
      001572 8D*1A            [24] 4681 	mov	_box_apeak_xy_PARM_5,r5
      001574 8C*1B            [24] 4682 	mov	_box_apeak_xy_PARM_6,r4
      001576 75*1C 00         [24] 4683 	mov	_box_apeak_xy_PARM_7,#0x00
      001579 75*1D 00         [24] 4684 	mov	_box_apeak_xy_PARM_8,#0x00
      00157C 8E 82            [24] 4685 	mov	dpl,r6
      00157E C0 07            [24] 4686 	push	ar7
      001580 C0 06            [24] 4687 	push	ar6
      001582 12r08r89         [24] 4688 	lcall	_box_apeak_xy
      001585 D0 06            [24] 4689 	pop	ar6
      001587 D0 07            [24] 4690 	pop	ar7
      001589                       4691 00206$:
                                   4692 ;	888n.c:626: for (j=1;j<4;j++) {
      001589 0E               [12] 4693 	inc	r6
      00158A C3               [12] 4694 	clr	c
      00158B EE               [12] 4695 	mov	a,r6
      00158C 64 80            [12] 4696 	xrl	a,#0x80
      00158E 94 84            [12] 4697 	subb	a,#0x84
      001590 40 97            [24] 4698 	jc	00205$
                                   4699 ;	888n.c:630: for (j=1;j<4;j++)
      001592 7E 01            [12] 4700 	mov	r6,#0x01
      001594                       4701 00207$:
                                   4702 ;	888n.c:631: if (an[j]<3) an[j]++;
      001594 EE               [12] 4703 	mov	a,r6
      001595 24r3B            [12] 4704 	add	a,#_flash_5_an_1_106
      001597 F9               [12] 4705 	mov	r1,a
      001598 87 05            [24] 4706 	mov	ar5,@r1
      00159A C3               [12] 4707 	clr	c
      00159B ED               [12] 4708 	mov	a,r5
      00159C 64 80            [12] 4709 	xrl	a,#0x80
      00159E 94 83            [12] 4710 	subb	a,#0x83
      0015A0 50 03            [24] 4711 	jnc	00208$
      0015A2 ED               [12] 4712 	mov	a,r5
      0015A3 04               [12] 4713 	inc	a
      0015A4 F7               [12] 4714 	mov	@r1,a
      0015A5                       4715 00208$:
                                   4716 ;	888n.c:630: for (j=1;j<4;j++)
      0015A5 0E               [12] 4717 	inc	r6
      0015A6 C3               [12] 4718 	clr	c
      0015A7 EE               [12] 4719 	mov	a,r6
      0015A8 64 80            [12] 4720 	xrl	a,#0x80
      0015AA 94 84            [12] 4721 	subb	a,#0x84
      0015AC 40 E6            [24] 4722 	jc	00207$
                                   4723 ;	888n.c:632: delay(a);
      0015AE 90 3A 98         [24] 4724 	mov	dptr,#0x3a98
      0015B1 C0 07            [24] 4725 	push	ar7
      0015B3 12r00r20         [24] 4726 	lcall	_delay
      0015B6 D0 07            [24] 4727 	pop	ar7
      0015B8 02r15r1E         [24] 4728 	ljmp	00134$
      0015BB                       4729 00136$:
                                   4730 ;	888n.c:637: for (j=0;j<4;j++) an[j]=j+1;
      0015BB 7F 00            [12] 4731 	mov	r7,#0x00
      0015BD                       4732 00209$:
      0015BD EF               [12] 4733 	mov	a,r7
      0015BE 24r3B            [12] 4734 	add	a,#_flash_5_an_1_106
      0015C0 F9               [12] 4735 	mov	r1,a
      0015C1 EF               [12] 4736 	mov	a,r7
      0015C2 04               [12] 4737 	inc	a
      0015C3 FE               [12] 4738 	mov	r6,a
      0015C4 F7               [12] 4739 	mov	@r1,a
      0015C5 8E 07            [24] 4740 	mov	ar7,r6
      0015C7 C3               [12] 4741 	clr	c
      0015C8 EF               [12] 4742 	mov	a,r7
      0015C9 64 80            [12] 4743 	xrl	a,#0x80
      0015CB 94 84            [12] 4744 	subb	a,#0x84
      0015CD 40 EE            [24] 4745 	jc	00209$
                                   4746 ;	888n.c:638: while (i--) {
      0015CF 7F 03            [12] 4747 	mov	r7,#0x03
      0015D1                       4748 00144$:
      0015D1 8F 06            [24] 4749 	mov	ar6,r7
      0015D3 1F               [12] 4750 	dec	r7
      0015D4 EE               [12] 4751 	mov	a,r6
      0015D5 70 03            [24] 4752 	jnz	00542$
      0015D7 02r16r6E         [24] 4753 	ljmp	00146$
      0015DA                       4754 00542$:
                                   4755 ;	888n.c:639: for (j=1;j<4;j++) {
      0015DA 7E 01            [12] 4756 	mov	r6,#0x01
      0015DC                       4757 00211$:
                                   4758 ;	888n.c:640: if (an[j]>3) box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);
      0015DC EE               [12] 4759 	mov	a,r6
      0015DD 24r3B            [12] 4760 	add	a,#_flash_5_an_1_106
      0015DF F9               [12] 4761 	mov	r1,a
      0015E0 87 05            [24] 4762 	mov	ar5,@r1
      0015E2 C3               [12] 4763 	clr	c
      0015E3 74 83            [12] 4764 	mov	a,#(0x03 ^ 0x80)
      0015E5 8D F0            [24] 4765 	mov	b,r5
      0015E7 63 F0 80         [24] 4766 	xrl	b,#0x80
      0015EA 95 F0            [12] 4767 	subb	a,b
      0015EC 50 22            [24] 4768 	jnc	00139$
      0015EE 74 07            [12] 4769 	mov	a,#0x07
      0015F0 C3               [12] 4770 	clr	c
      0015F1 9E               [12] 4771 	subb	a,r6
      0015F2 FC               [12] 4772 	mov	r4,a
      0015F3 8D*17            [24] 4773 	mov	_box_apeak_xy_PARM_2,r5
      0015F5 8E*18            [24] 4774 	mov	_box_apeak_xy_PARM_3,r6
      0015F7 8C*19            [24] 4775 	mov	_box_apeak_xy_PARM_4,r4
      0015F9 8D*1A            [24] 4776 	mov	_box_apeak_xy_PARM_5,r5
      0015FB 8C*1B            [24] 4777 	mov	_box_apeak_xy_PARM_6,r4
      0015FD 75*1C 00         [24] 4778 	mov	_box_apeak_xy_PARM_7,#0x00
      001600 75*1D 01         [24] 4779 	mov	_box_apeak_xy_PARM_8,#0x01
      001603 8E 82            [24] 4780 	mov	dpl,r6
      001605 C0 07            [24] 4781 	push	ar7
      001607 C0 06            [24] 4782 	push	ar6
      001609 12r08r89         [24] 4783 	lcall	_box_apeak_xy
      00160C D0 06            [24] 4784 	pop	ar6
      00160E D0 07            [24] 4785 	pop	ar7
      001610                       4786 00139$:
                                   4787 ;	888n.c:641: if (an[j]>3) box_apeak_xy(j,an[j]-1,j,7-j,an[j]-1,7-j,0,0);
      001610 EE               [12] 4788 	mov	a,r6
      001611 24r3B            [12] 4789 	add	a,#_flash_5_an_1_106
      001613 F9               [12] 4790 	mov	r1,a
      001614 87 05            [24] 4791 	mov	ar5,@r1
      001616 C3               [12] 4792 	clr	c
      001617 74 83            [12] 4793 	mov	a,#(0x03 ^ 0x80)
      001619 8D F0            [24] 4794 	mov	b,r5
      00161B 63 F0 80         [24] 4795 	xrl	b,#0x80
      00161E 95 F0            [12] 4796 	subb	a,b
      001620 50 23            [24] 4797 	jnc	00212$
      001622 1D               [12] 4798 	dec	r5
      001623 74 07            [12] 4799 	mov	a,#0x07
      001625 C3               [12] 4800 	clr	c
      001626 9E               [12] 4801 	subb	a,r6
      001627 FC               [12] 4802 	mov	r4,a
      001628 8D*17            [24] 4803 	mov	_box_apeak_xy_PARM_2,r5
      00162A 8E*18            [24] 4804 	mov	_box_apeak_xy_PARM_3,r6
      00162C 8C*19            [24] 4805 	mov	_box_apeak_xy_PARM_4,r4
      00162E 8D*1A            [24] 4806 	mov	_box_apeak_xy_PARM_5,r5
      001630 8C*1B            [24] 4807 	mov	_box_apeak_xy_PARM_6,r4
      001632 75*1C 00         [24] 4808 	mov	_box_apeak_xy_PARM_7,#0x00
      001635 75*1D 00         [24] 4809 	mov	_box_apeak_xy_PARM_8,#0x00
      001638 8E 82            [24] 4810 	mov	dpl,r6
      00163A C0 07            [24] 4811 	push	ar7
      00163C C0 06            [24] 4812 	push	ar6
      00163E 12r08r89         [24] 4813 	lcall	_box_apeak_xy
      001641 D0 06            [24] 4814 	pop	ar6
      001643 D0 07            [24] 4815 	pop	ar7
      001645                       4816 00212$:
                                   4817 ;	888n.c:639: for (j=1;j<4;j++) {
      001645 0E               [12] 4818 	inc	r6
      001646 C3               [12] 4819 	clr	c
      001647 EE               [12] 4820 	mov	a,r6
      001648 64 80            [12] 4821 	xrl	a,#0x80
      00164A 94 84            [12] 4822 	subb	a,#0x84
      00164C 40 8E            [24] 4823 	jc	00211$
                                   4824 ;	888n.c:643: for (j=0;j<4;j++) an[j]++;
      00164E 7E 00            [12] 4825 	mov	r6,#0x00
      001650                       4826 00213$:
      001650 EE               [12] 4827 	mov	a,r6
      001651 24r3B            [12] 4828 	add	a,#_flash_5_an_1_106
      001653 F9               [12] 4829 	mov	r1,a
      001654 E7               [12] 4830 	mov	a,@r1
      001655 FD               [12] 4831 	mov	r5,a
      001656 04               [12] 4832 	inc	a
      001657 F7               [12] 4833 	mov	@r1,a
      001658 0E               [12] 4834 	inc	r6
      001659 C3               [12] 4835 	clr	c
      00165A EE               [12] 4836 	mov	a,r6
      00165B 64 80            [12] 4837 	xrl	a,#0x80
      00165D 94 84            [12] 4838 	subb	a,#0x84
      00165F 40 EF            [24] 4839 	jc	00213$
                                   4840 ;	888n.c:644: delay(a);
      001661 90 3A 98         [24] 4841 	mov	dptr,#0x3a98
      001664 C0 07            [24] 4842 	push	ar7
      001666 12r00r20         [24] 4843 	lcall	_delay
      001669 D0 07            [24] 4844 	pop	ar7
      00166B 02r15rD1         [24] 4845 	ljmp	00144$
      00166E                       4846 00146$:
                                   4847 ;	888n.c:649: for (j=3;j<6;j++) an[j-2]=j;
      00166E 7F 03            [12] 4848 	mov	r7,#0x03
      001670                       4849 00215$:
      001670 EF               [12] 4850 	mov	a,r7
      001671 24 FE            [12] 4851 	add	a,#0xfe
      001673 24r3B            [12] 4852 	add	a,#_flash_5_an_1_106
      001675 F8               [12] 4853 	mov	r0,a
      001676 A6 07            [24] 4854 	mov	@r0,ar7
      001678 0F               [12] 4855 	inc	r7
      001679 C3               [12] 4856 	clr	c
      00167A EF               [12] 4857 	mov	a,r7
      00167B 64 80            [12] 4858 	xrl	a,#0x80
      00167D 94 86            [12] 4859 	subb	a,#0x86
      00167F 40 EF            [24] 4860 	jc	00215$
                                   4861 ;	888n.c:650: while (i--) {
      001681 7F 03            [12] 4862 	mov	r7,#0x03
      001683                       4863 00152$:
      001683 8F 06            [24] 4864 	mov	ar6,r7
      001685 1F               [12] 4865 	dec	r7
      001686 EE               [12] 4866 	mov	a,r6
      001687 70 03            [24] 4867 	jnz	00548$
      001689 02r17r10         [24] 4868 	ljmp	00154$
      00168C                       4869 00548$:
                                   4870 ;	888n.c:651: for (j=1;j<4;j++) {
      00168C 7E 01            [12] 4871 	mov	r6,#0x01
      00168E                       4872 00217$:
                                   4873 ;	888n.c:652: box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);
      00168E EE               [12] 4874 	mov	a,r6
      00168F 24r3B            [12] 4875 	add	a,#_flash_5_an_1_106
      001691 F9               [12] 4876 	mov	r1,a
      001692 87 05            [24] 4877 	mov	ar5,@r1
      001694 74 07            [12] 4878 	mov	a,#0x07
      001696 C3               [12] 4879 	clr	c
      001697 9E               [12] 4880 	subb	a,r6
      001698 FC               [12] 4881 	mov	r4,a
      001699 8D*17            [24] 4882 	mov	_box_apeak_xy_PARM_2,r5
      00169B 8E*18            [24] 4883 	mov	_box_apeak_xy_PARM_3,r6
      00169D 8C*19            [24] 4884 	mov	_box_apeak_xy_PARM_4,r4
      00169F 8D*1A            [24] 4885 	mov	_box_apeak_xy_PARM_5,r5
      0016A1 8C*1B            [24] 4886 	mov	_box_apeak_xy_PARM_6,r4
      0016A3 75*1C 00         [24] 4887 	mov	_box_apeak_xy_PARM_7,#0x00
      0016A6 75*1D 01         [24] 4888 	mov	_box_apeak_xy_PARM_8,#0x01
      0016A9 8E 82            [24] 4889 	mov	dpl,r6
      0016AB C0 07            [24] 4890 	push	ar7
      0016AD C0 06            [24] 4891 	push	ar6
      0016AF C0 04            [24] 4892 	push	ar4
      0016B1 C0 01            [24] 4893 	push	ar1
      0016B3 12r08r89         [24] 4894 	lcall	_box_apeak_xy
      0016B6 D0 01            [24] 4895 	pop	ar1
      0016B8 D0 04            [24] 4896 	pop	ar4
      0016BA D0 06            [24] 4897 	pop	ar6
                                   4898 ;	888n.c:653: box_apeak_xy(j,an[j]+1,j,7-j,an[j]+1,7-j,0,0);
      0016BC 87 05            [24] 4899 	mov	ar5,@r1
      0016BE 0D               [12] 4900 	inc	r5
      0016BF 8D*17            [24] 4901 	mov	_box_apeak_xy_PARM_2,r5
      0016C1 8E*18            [24] 4902 	mov	_box_apeak_xy_PARM_3,r6
      0016C3 8C*19            [24] 4903 	mov	_box_apeak_xy_PARM_4,r4
      0016C5 8D*1A            [24] 4904 	mov	_box_apeak_xy_PARM_5,r5
      0016C7 8C*1B            [24] 4905 	mov	_box_apeak_xy_PARM_6,r4
      0016C9 75*1C 00         [24] 4906 	mov	_box_apeak_xy_PARM_7,#0x00
      0016CC 75*1D 00         [24] 4907 	mov	_box_apeak_xy_PARM_8,#0x00
      0016CF 8E 82            [24] 4908 	mov	dpl,r6
      0016D1 C0 06            [24] 4909 	push	ar6
      0016D3 12r08r89         [24] 4910 	lcall	_box_apeak_xy
      0016D6 D0 06            [24] 4911 	pop	ar6
      0016D8 D0 07            [24] 4912 	pop	ar7
                                   4913 ;	888n.c:651: for (j=1;j<4;j++) {
      0016DA 0E               [12] 4914 	inc	r6
      0016DB C3               [12] 4915 	clr	c
      0016DC EE               [12] 4916 	mov	a,r6
      0016DD 64 80            [12] 4917 	xrl	a,#0x80
      0016DF 94 84            [12] 4918 	subb	a,#0x84
      0016E1 40 AB            [24] 4919 	jc	00217$
                                   4920 ;	888n.c:655: for (j=0;j<4;j++)
      0016E3 7E 00            [12] 4921 	mov	r6,#0x00
      0016E5                       4922 00219$:
                                   4923 ;	888n.c:656: if (an[j]>3) an[j]--;
      0016E5 EE               [12] 4924 	mov	a,r6
      0016E6 24r3B            [12] 4925 	add	a,#_flash_5_an_1_106
      0016E8 F9               [12] 4926 	mov	r1,a
      0016E9 87 05            [24] 4927 	mov	ar5,@r1
      0016EB C3               [12] 4928 	clr	c
      0016EC 74 83            [12] 4929 	mov	a,#(0x03 ^ 0x80)
      0016EE 8D F0            [24] 4930 	mov	b,r5
      0016F0 63 F0 80         [24] 4931 	xrl	b,#0x80
      0016F3 95 F0            [12] 4932 	subb	a,b
      0016F5 50 03            [24] 4933 	jnc	00220$
      0016F7 ED               [12] 4934 	mov	a,r5
      0016F8 14               [12] 4935 	dec	a
      0016F9 F7               [12] 4936 	mov	@r1,a
      0016FA                       4937 00220$:
                                   4938 ;	888n.c:655: for (j=0;j<4;j++)
      0016FA 0E               [12] 4939 	inc	r6
      0016FB C3               [12] 4940 	clr	c
      0016FC EE               [12] 4941 	mov	a,r6
      0016FD 64 80            [12] 4942 	xrl	a,#0x80
      0016FF 94 84            [12] 4943 	subb	a,#0x84
      001701 40 E2            [24] 4944 	jc	00219$
                                   4945 ;	888n.c:657: delay(a);
      001703 90 3A 98         [24] 4946 	mov	dptr,#0x3a98
      001706 C0 07            [24] 4947 	push	ar7
      001708 12r00r20         [24] 4948 	lcall	_delay
      00170B D0 07            [24] 4949 	pop	ar7
      00170D 02r16r83         [24] 4950 	ljmp	00152$
      001710                       4951 00154$:
                                   4952 ;	888n.c:662: for (j=0;j<4;j++) an[j]=5-j;
      001710 7F 00            [12] 4953 	mov	r7,#0x00
      001712                       4954 00221$:
      001712 EF               [12] 4955 	mov	a,r7
      001713 24r3B            [12] 4956 	add	a,#_flash_5_an_1_106
      001715 F9               [12] 4957 	mov	r1,a
      001716 74 05            [12] 4958 	mov	a,#0x05
      001718 C3               [12] 4959 	clr	c
      001719 9F               [12] 4960 	subb	a,r7
      00171A F7               [12] 4961 	mov	@r1,a
      00171B 0F               [12] 4962 	inc	r7
      00171C C3               [12] 4963 	clr	c
      00171D EF               [12] 4964 	mov	a,r7
      00171E 64 80            [12] 4965 	xrl	a,#0x80
      001720 94 84            [12] 4966 	subb	a,#0x84
      001722 40 EE            [24] 4967 	jc	00221$
                                   4968 ;	888n.c:663: while (i--) {
      001724 7F 03            [12] 4969 	mov	r7,#0x03
      001726                       4970 00164$:
      001726 8F 06            [24] 4971 	mov	ar6,r7
      001728 1F               [12] 4972 	dec	r7
      001729 EE               [12] 4973 	mov	a,r6
      00172A 70 03            [24] 4974 	jnz	00553$
      00172C 02r17rC8         [24] 4975 	ljmp	00166$
      00172F                       4976 00553$:
                                   4977 ;	888n.c:664: for (j=1;j<4;j++) {
      00172F 7E 01            [12] 4978 	mov	r6,#0x01
      001731                       4979 00223$:
                                   4980 ;	888n.c:665: if (an[j]<4) box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);
      001731 EE               [12] 4981 	mov	a,r6
      001732 24r3B            [12] 4982 	add	a,#_flash_5_an_1_106
      001734 F9               [12] 4983 	mov	r1,a
      001735 87 05            [24] 4984 	mov	ar5,@r1
      001737 C3               [12] 4985 	clr	c
      001738 ED               [12] 4986 	mov	a,r5
      001739 64 80            [12] 4987 	xrl	a,#0x80
      00173B 94 84            [12] 4988 	subb	a,#0x84
      00173D 50 22            [24] 4989 	jnc	00157$
      00173F 74 07            [12] 4990 	mov	a,#0x07
      001741 C3               [12] 4991 	clr	c
      001742 9E               [12] 4992 	subb	a,r6
      001743 FC               [12] 4993 	mov	r4,a
      001744 8D*17            [24] 4994 	mov	_box_apeak_xy_PARM_2,r5
      001746 8E*18            [24] 4995 	mov	_box_apeak_xy_PARM_3,r6
      001748 8C*19            [24] 4996 	mov	_box_apeak_xy_PARM_4,r4
      00174A 8D*1A            [24] 4997 	mov	_box_apeak_xy_PARM_5,r5
      00174C 8C*1B            [24] 4998 	mov	_box_apeak_xy_PARM_6,r4
      00174E 75*1C 00         [24] 4999 	mov	_box_apeak_xy_PARM_7,#0x00
      001751 75*1D 01         [24] 5000 	mov	_box_apeak_xy_PARM_8,#0x01
      001754 8E 82            [24] 5001 	mov	dpl,r6
      001756 C0 07            [24] 5002 	push	ar7
      001758 C0 06            [24] 5003 	push	ar6
      00175A 12r08r89         [24] 5004 	lcall	_box_apeak_xy
      00175D D0 06            [24] 5005 	pop	ar6
      00175F D0 07            [24] 5006 	pop	ar7
      001761                       5007 00157$:
                                   5008 ;	888n.c:666: if (an[j]<3) box_apeak_xy(j,an[j]+1,j,7-j,an[j]+1,7-j,0,0);
      001761 EE               [12] 5009 	mov	a,r6
      001762 24r3B            [12] 5010 	add	a,#_flash_5_an_1_106
      001764 F9               [12] 5011 	mov	r1,a
      001765 87 05            [24] 5012 	mov	ar5,@r1
      001767 C3               [12] 5013 	clr	c
      001768 ED               [12] 5014 	mov	a,r5
      001769 64 80            [12] 5015 	xrl	a,#0x80
      00176B 94 83            [12] 5016 	subb	a,#0x83
      00176D 50 23            [24] 5017 	jnc	00224$
      00176F 0D               [12] 5018 	inc	r5
      001770 74 07            [12] 5019 	mov	a,#0x07
      001772 C3               [12] 5020 	clr	c
      001773 9E               [12] 5021 	subb	a,r6
      001774 FC               [12] 5022 	mov	r4,a
      001775 8D*17            [24] 5023 	mov	_box_apeak_xy_PARM_2,r5
      001777 8E*18            [24] 5024 	mov	_box_apeak_xy_PARM_3,r6
      001779 8C*19            [24] 5025 	mov	_box_apeak_xy_PARM_4,r4
      00177B 8D*1A            [24] 5026 	mov	_box_apeak_xy_PARM_5,r5
      00177D 8C*1B            [24] 5027 	mov	_box_apeak_xy_PARM_6,r4
      00177F 75*1C 00         [24] 5028 	mov	_box_apeak_xy_PARM_7,#0x00
      001782 75*1D 00         [24] 5029 	mov	_box_apeak_xy_PARM_8,#0x00
      001785 8E 82            [24] 5030 	mov	dpl,r6
      001787 C0 07            [24] 5031 	push	ar7
      001789 C0 06            [24] 5032 	push	ar6
      00178B 12r08r89         [24] 5033 	lcall	_box_apeak_xy
      00178E D0 06            [24] 5034 	pop	ar6
      001790 D0 07            [24] 5035 	pop	ar7
      001792                       5036 00224$:
                                   5037 ;	888n.c:664: for (j=1;j<4;j++) {
      001792 0E               [12] 5038 	inc	r6
      001793 C3               [12] 5039 	clr	c
      001794 EE               [12] 5040 	mov	a,r6
      001795 64 80            [12] 5041 	xrl	a,#0x80
      001797 94 84            [12] 5042 	subb	a,#0x84
      001799 40 96            [24] 5043 	jc	00223$
                                   5044 ;	888n.c:668: for (j=0;j<4;j++)
      00179B 7E 00            [12] 5045 	mov	r6,#0x00
      00179D                       5046 00225$:
                                   5047 ;	888n.c:669: if (an[j]>0) an[j]--;
      00179D EE               [12] 5048 	mov	a,r6
      00179E 24r3B            [12] 5049 	add	a,#_flash_5_an_1_106
      0017A0 F9               [12] 5050 	mov	r1,a
      0017A1 87 05            [24] 5051 	mov	ar5,@r1
      0017A3 C3               [12] 5052 	clr	c
      0017A4 74 80            [12] 5053 	mov	a,#(0x00 ^ 0x80)
      0017A6 8D F0            [24] 5054 	mov	b,r5
      0017A8 63 F0 80         [24] 5055 	xrl	b,#0x80
      0017AB 95 F0            [12] 5056 	subb	a,b
      0017AD 50 03            [24] 5057 	jnc	00226$
      0017AF ED               [12] 5058 	mov	a,r5
      0017B0 14               [12] 5059 	dec	a
      0017B1 F7               [12] 5060 	mov	@r1,a
      0017B2                       5061 00226$:
                                   5062 ;	888n.c:668: for (j=0;j<4;j++)
      0017B2 0E               [12] 5063 	inc	r6
      0017B3 C3               [12] 5064 	clr	c
      0017B4 EE               [12] 5065 	mov	a,r6
      0017B5 64 80            [12] 5066 	xrl	a,#0x80
      0017B7 94 84            [12] 5067 	subb	a,#0x84
      0017B9 40 E2            [24] 5068 	jc	00225$
                                   5069 ;	888n.c:670: delay(a);
      0017BB 90 3A 98         [24] 5070 	mov	dptr,#0x3a98
      0017BE C0 07            [24] 5071 	push	ar7
      0017C0 12r00r20         [24] 5072 	lcall	_delay
      0017C3 D0 07            [24] 5073 	pop	ar7
      0017C5 02r17r26         [24] 5074 	ljmp	00164$
      0017C8                       5075 00166$:
                                   5076 ;	888n.c:675: for (j=0;j<4;j++) an[j]=3-j;
      0017C8 7F 00            [12] 5077 	mov	r7,#0x00
      0017CA                       5078 00227$:
      0017CA EF               [12] 5079 	mov	a,r7
      0017CB 24r3B            [12] 5080 	add	a,#_flash_5_an_1_106
      0017CD F9               [12] 5081 	mov	r1,a
      0017CE 74 03            [12] 5082 	mov	a,#0x03
      0017D0 C3               [12] 5083 	clr	c
      0017D1 9F               [12] 5084 	subb	a,r7
      0017D2 F7               [12] 5085 	mov	@r1,a
      0017D3 0F               [12] 5086 	inc	r7
      0017D4 C3               [12] 5087 	clr	c
      0017D5 EF               [12] 5088 	mov	a,r7
      0017D6 64 80            [12] 5089 	xrl	a,#0x80
      0017D8 94 84            [12] 5090 	subb	a,#0x84
      0017DA 40 EE            [24] 5091 	jc	00227$
                                   5092 ;	888n.c:676: an[0]=2;
      0017DC 75*3B 02         [24] 5093 	mov	_flash_5_an_1_106,#0x02
                                   5094 ;	888n.c:677: while (i--) {
      0017DF 7F 03            [12] 5095 	mov	r7,#0x03
      0017E1                       5096 00176$:
      0017E1 8F 06            [24] 5097 	mov	ar6,r7
      0017E3 1F               [12] 5098 	dec	r7
      0017E4 EE               [12] 5099 	mov	a,r6
      0017E5 70 03            [24] 5100 	jnz	00560$
      0017E7 02r18r8F         [24] 5101 	ljmp	00178$
      0017EA                       5102 00560$:
                                   5103 ;	888n.c:678: for (j=0;j<3;j++) {
      0017EA 7E 00            [12] 5104 	mov	r6,#0x00
      0017EC                       5105 00229$:
                                   5106 ;	888n.c:679: if (an[j]>=0) box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);
      0017EC EE               [12] 5107 	mov	a,r6
      0017ED 24r3B            [12] 5108 	add	a,#_flash_5_an_1_106
      0017EF F9               [12] 5109 	mov	r1,a
      0017F0 E7               [12] 5110 	mov	a,@r1
      0017F1 FD               [12] 5111 	mov	r5,a
      0017F2 20 E7 22         [24] 5112 	jb	acc.7,00169$
      0017F5 74 07            [12] 5113 	mov	a,#0x07
      0017F7 C3               [12] 5114 	clr	c
      0017F8 9E               [12] 5115 	subb	a,r6
      0017F9 FC               [12] 5116 	mov	r4,a
      0017FA 8D*17            [24] 5117 	mov	_box_apeak_xy_PARM_2,r5
      0017FC 8E*18            [24] 5118 	mov	_box_apeak_xy_PARM_3,r6
      0017FE 8C*19            [24] 5119 	mov	_box_apeak_xy_PARM_4,r4
      001800 8D*1A            [24] 5120 	mov	_box_apeak_xy_PARM_5,r5
      001802 8C*1B            [24] 5121 	mov	_box_apeak_xy_PARM_6,r4
      001804 75*1C 00         [24] 5122 	mov	_box_apeak_xy_PARM_7,#0x00
      001807 75*1D 01         [24] 5123 	mov	_box_apeak_xy_PARM_8,#0x01
      00180A 8E 82            [24] 5124 	mov	dpl,r6
      00180C C0 07            [24] 5125 	push	ar7
      00180E C0 06            [24] 5126 	push	ar6
      001810 12r08r89         [24] 5127 	lcall	_box_apeak_xy
      001813 D0 06            [24] 5128 	pop	ar6
      001815 D0 07            [24] 5129 	pop	ar7
      001817                       5130 00169$:
                                   5131 ;	888n.c:680: if (an[j]>=0) box_apeak_xy(j,an[j]+1,j,7-j,an[j]+1,7-j,0,0);
      001817 EE               [12] 5132 	mov	a,r6
      001818 24r3B            [12] 5133 	add	a,#_flash_5_an_1_106
      00181A F9               [12] 5134 	mov	r1,a
      00181B E7               [12] 5135 	mov	a,@r1
      00181C FD               [12] 5136 	mov	r5,a
      00181D 20 E7 23         [24] 5137 	jb	acc.7,00230$
      001820 0D               [12] 5138 	inc	r5
      001821 74 07            [12] 5139 	mov	a,#0x07
      001823 C3               [12] 5140 	clr	c
      001824 9E               [12] 5141 	subb	a,r6
      001825 FC               [12] 5142 	mov	r4,a
      001826 8D*17            [24] 5143 	mov	_box_apeak_xy_PARM_2,r5
      001828 8E*18            [24] 5144 	mov	_box_apeak_xy_PARM_3,r6
      00182A 8C*19            [24] 5145 	mov	_box_apeak_xy_PARM_4,r4
      00182C 8D*1A            [24] 5146 	mov	_box_apeak_xy_PARM_5,r5
      00182E 8C*1B            [24] 5147 	mov	_box_apeak_xy_PARM_6,r4
      001830 75*1C 00         [24] 5148 	mov	_box_apeak_xy_PARM_7,#0x00
      001833 75*1D 00         [24] 5149 	mov	_box_apeak_xy_PARM_8,#0x00
      001836 8E 82            [24] 5150 	mov	dpl,r6
      001838 C0 07            [24] 5151 	push	ar7
      00183A C0 06            [24] 5152 	push	ar6
      00183C 12r08r89         [24] 5153 	lcall	_box_apeak_xy
      00183F D0 06            [24] 5154 	pop	ar6
      001841 D0 07            [24] 5155 	pop	ar7
      001843                       5156 00230$:
                                   5157 ;	888n.c:678: for (j=0;j<3;j++) {
      001843 0E               [12] 5158 	inc	r6
      001844 C3               [12] 5159 	clr	c
      001845 EE               [12] 5160 	mov	a,r6
      001846 64 80            [12] 5161 	xrl	a,#0x80
      001848 94 83            [12] 5162 	subb	a,#0x83
      00184A 40 A0            [24] 5163 	jc	00229$
                                   5164 ;	888n.c:682: for (j=0;j<4;j++)
      00184C 7E 00            [12] 5165 	mov	r6,#0x00
      00184E                       5166 00231$:
                                   5167 ;	888n.c:683: if (j<5-i) an[j]--;
      00184E EF               [12] 5168 	mov	a,r7
      00184F FC               [12] 5169 	mov	r4,a
      001850 33               [12] 5170 	rlc	a
      001851 95 E0            [12] 5171 	subb	a,acc
      001853 FD               [12] 5172 	mov	r5,a
      001854 74 05            [12] 5173 	mov	a,#0x05
      001856 C3               [12] 5174 	clr	c
      001857 9C               [12] 5175 	subb	a,r4
      001858 FC               [12] 5176 	mov	r4,a
      001859 E4               [12] 5177 	clr	a
      00185A 9D               [12] 5178 	subb	a,r5
      00185B FD               [12] 5179 	mov	r5,a
      00185C EE               [12] 5180 	mov	a,r6
      00185D FA               [12] 5181 	mov	r2,a
      00185E 33               [12] 5182 	rlc	a
      00185F 95 E0            [12] 5183 	subb	a,acc
      001861 FB               [12] 5184 	mov	r3,a
      001862 C3               [12] 5185 	clr	c
      001863 EA               [12] 5186 	mov	a,r2
      001864 9C               [12] 5187 	subb	a,r4
      001865 EB               [12] 5188 	mov	a,r3
      001866 64 80            [12] 5189 	xrl	a,#0x80
      001868 8D F0            [24] 5190 	mov	b,r5
      00186A 63 F0 80         [24] 5191 	xrl	b,#0x80
      00186D 95 F0            [12] 5192 	subb	a,b
      00186F 50 08            [24] 5193 	jnc	00232$
      001871 EE               [12] 5194 	mov	a,r6
      001872 24r3B            [12] 5195 	add	a,#_flash_5_an_1_106
      001874 F9               [12] 5196 	mov	r1,a
      001875 E7               [12] 5197 	mov	a,@r1
      001876 FD               [12] 5198 	mov	r5,a
      001877 14               [12] 5199 	dec	a
      001878 F7               [12] 5200 	mov	@r1,a
      001879                       5201 00232$:
                                   5202 ;	888n.c:682: for (j=0;j<4;j++)
      001879 0E               [12] 5203 	inc	r6
      00187A C3               [12] 5204 	clr	c
      00187B EE               [12] 5205 	mov	a,r6
      00187C 64 80            [12] 5206 	xrl	a,#0x80
      00187E 94 84            [12] 5207 	subb	a,#0x84
      001880 40 CC            [24] 5208 	jc	00231$
                                   5209 ;	888n.c:684: delay(a);
      001882 90 3A 98         [24] 5210 	mov	dptr,#0x3a98
      001885 C0 07            [24] 5211 	push	ar7
      001887 12r00r20         [24] 5212 	lcall	_delay
      00188A D0 07            [24] 5213 	pop	ar7
      00188C 02r17rE1         [24] 5214 	ljmp	00176$
      00188F                       5215 00178$:
                                   5216 ;	888n.c:689: for (j=0;j<4;j++) an[j]=j-2;
      00188F 7F 00            [12] 5217 	mov	r7,#0x00
      001891                       5218 00233$:
      001891 EF               [12] 5219 	mov	a,r7
      001892 24r3B            [12] 5220 	add	a,#_flash_5_an_1_106
      001894 F9               [12] 5221 	mov	r1,a
      001895 EF               [12] 5222 	mov	a,r7
      001896 24 FE            [12] 5223 	add	a,#0xfe
      001898 F7               [12] 5224 	mov	@r1,a
      001899 0F               [12] 5225 	inc	r7
      00189A C3               [12] 5226 	clr	c
      00189B EF               [12] 5227 	mov	a,r7
      00189C 64 80            [12] 5228 	xrl	a,#0x80
      00189E 94 84            [12] 5229 	subb	a,#0x84
      0018A0 40 EF            [24] 5230 	jc	00233$
                                   5231 ;	888n.c:690: while (i--) {
      0018A2 7F 0A            [12] 5232 	mov	r7,#0x0a
      0018A4                       5233 00188$:
      0018A4 8F 06            [24] 5234 	mov	ar6,r7
      0018A6 1F               [12] 5235 	dec	r7
      0018A7 EE               [12] 5236 	mov	a,r6
      0018A8 70 01            [24] 5237 	jnz	00567$
      0018AA 22               [24] 5238 	ret
      0018AB                       5239 00567$:
                                   5240 ;	888n.c:691: for (j=0;j<4;j++) {
      0018AB 7E 00            [12] 5241 	mov	r6,#0x00
      0018AD                       5242 00235$:
                                   5243 ;	888n.c:692: if (an[j]>=0) box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);
      0018AD EE               [12] 5244 	mov	a,r6
      0018AE 24r3B            [12] 5245 	add	a,#_flash_5_an_1_106
      0018B0 F9               [12] 5246 	mov	r1,a
      0018B1 E7               [12] 5247 	mov	a,@r1
      0018B2 FD               [12] 5248 	mov	r5,a
      0018B3 20 E7 22         [24] 5249 	jb	acc.7,00181$
      0018B6 74 07            [12] 5250 	mov	a,#0x07
      0018B8 C3               [12] 5251 	clr	c
      0018B9 9E               [12] 5252 	subb	a,r6
      0018BA FC               [12] 5253 	mov	r4,a
      0018BB 8D*17            [24] 5254 	mov	_box_apeak_xy_PARM_2,r5
      0018BD 8E*18            [24] 5255 	mov	_box_apeak_xy_PARM_3,r6
      0018BF 8C*19            [24] 5256 	mov	_box_apeak_xy_PARM_4,r4
      0018C1 8D*1A            [24] 5257 	mov	_box_apeak_xy_PARM_5,r5
      0018C3 8C*1B            [24] 5258 	mov	_box_apeak_xy_PARM_6,r4
      0018C5 75*1C 00         [24] 5259 	mov	_box_apeak_xy_PARM_7,#0x00
      0018C8 75*1D 01         [24] 5260 	mov	_box_apeak_xy_PARM_8,#0x01
      0018CB 8E 82            [24] 5261 	mov	dpl,r6
      0018CD C0 07            [24] 5262 	push	ar7
      0018CF C0 06            [24] 5263 	push	ar6
      0018D1 12r08r89         [24] 5264 	lcall	_box_apeak_xy
      0018D4 D0 06            [24] 5265 	pop	ar6
      0018D6 D0 07            [24] 5266 	pop	ar7
      0018D8                       5267 00181$:
                                   5268 ;	888n.c:693: if (an[j]>=0) box_apeak_xy(j,an[j]-1,j,7-j,an[j]-1,7-j,0,0);
      0018D8 EE               [12] 5269 	mov	a,r6
      0018D9 24r3B            [12] 5270 	add	a,#_flash_5_an_1_106
      0018DB F9               [12] 5271 	mov	r1,a
      0018DC E7               [12] 5272 	mov	a,@r1
      0018DD FD               [12] 5273 	mov	r5,a
      0018DE 20 E7 23         [24] 5274 	jb	acc.7,00236$
      0018E1 1D               [12] 5275 	dec	r5
      0018E2 74 07            [12] 5276 	mov	a,#0x07
      0018E4 C3               [12] 5277 	clr	c
      0018E5 9E               [12] 5278 	subb	a,r6
      0018E6 FC               [12] 5279 	mov	r4,a
      0018E7 8D*17            [24] 5280 	mov	_box_apeak_xy_PARM_2,r5
      0018E9 8E*18            [24] 5281 	mov	_box_apeak_xy_PARM_3,r6
      0018EB 8C*19            [24] 5282 	mov	_box_apeak_xy_PARM_4,r4
      0018ED 8D*1A            [24] 5283 	mov	_box_apeak_xy_PARM_5,r5
      0018EF 8C*1B            [24] 5284 	mov	_box_apeak_xy_PARM_6,r4
      0018F1 75*1C 00         [24] 5285 	mov	_box_apeak_xy_PARM_7,#0x00
      0018F4 75*1D 00         [24] 5286 	mov	_box_apeak_xy_PARM_8,#0x00
      0018F7 8E 82            [24] 5287 	mov	dpl,r6
      0018F9 C0 07            [24] 5288 	push	ar7
      0018FB C0 06            [24] 5289 	push	ar6
      0018FD 12r08r89         [24] 5290 	lcall	_box_apeak_xy
      001900 D0 06            [24] 5291 	pop	ar6
      001902 D0 07            [24] 5292 	pop	ar7
      001904                       5293 00236$:
                                   5294 ;	888n.c:691: for (j=0;j<4;j++) {
      001904 0E               [12] 5295 	inc	r6
      001905 C3               [12] 5296 	clr	c
      001906 EE               [12] 5297 	mov	a,r6
      001907 64 80            [12] 5298 	xrl	a,#0x80
      001909 94 84            [12] 5299 	subb	a,#0x84
      00190B 40 A0            [24] 5300 	jc	00235$
                                   5301 ;	888n.c:695: for (j=0;j<4;j++)
      00190D 7E 00            [12] 5302 	mov	r6,#0x00
      00190F                       5303 00237$:
                                   5304 ;	888n.c:696: if (an[j]<7) an[j]++;
      00190F EE               [12] 5305 	mov	a,r6
      001910 24r3B            [12] 5306 	add	a,#_flash_5_an_1_106
      001912 F9               [12] 5307 	mov	r1,a
      001913 87 05            [24] 5308 	mov	ar5,@r1
      001915 C3               [12] 5309 	clr	c
      001916 ED               [12] 5310 	mov	a,r5
      001917 64 80            [12] 5311 	xrl	a,#0x80
      001919 94 87            [12] 5312 	subb	a,#0x87
      00191B 50 03            [24] 5313 	jnc	00238$
      00191D ED               [12] 5314 	mov	a,r5
      00191E 04               [12] 5315 	inc	a
      00191F F7               [12] 5316 	mov	@r1,a
      001920                       5317 00238$:
                                   5318 ;	888n.c:695: for (j=0;j<4;j++)
      001920 0E               [12] 5319 	inc	r6
      001921 C3               [12] 5320 	clr	c
      001922 EE               [12] 5321 	mov	a,r6
      001923 64 80            [12] 5322 	xrl	a,#0x80
      001925 94 84            [12] 5323 	subb	a,#0x84
      001927 40 E6            [24] 5324 	jc	00237$
                                   5325 ;	888n.c:697: delay(a);
      001929 90 3A 98         [24] 5326 	mov	dptr,#0x3a98
      00192C C0 07            [24] 5327 	push	ar7
      00192E 12r00r20         [24] 5328 	lcall	_delay
      001931 D0 07            [24] 5329 	pop	ar7
      001933 02r18rA4         [24] 5330 	ljmp	00188$
                                   5331 ;------------------------------------------------------------
                                   5332 ;Allocation info for local variables in function 'flash_6'
                                   5333 ;------------------------------------------------------------
                                   5334 ;i                         Allocated with name '_flash_6_i_1_123'
                                   5335 ;j                         Allocated with name '_flash_6_j_1_123'
                                   5336 ;k                         Allocated with name '_flash_6_k_1_123'
                                   5337 ;z                         Allocated to registers r7 
                                   5338 ;------------------------------------------------------------
                                   5339 ;	888n.c:701: void flash_6()
                                   5340 ;	-----------------------------------------
                                   5341 ;	 function flash_6
                                   5342 ;	-----------------------------------------
      001936                       5343 _flash_6:
                                   5344 ;	888n.c:705: roll_apeak_yz(1,10000);
      001936 75*21 10         [24] 5345 	mov	_roll_apeak_yz_PARM_2,#0x10
      001939 75*22 27         [24] 5346 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      00193C 75 82 01         [24] 5347 	mov	dpl,#0x01
      00193F 12r0Ar3C         [24] 5348 	lcall	_roll_apeak_yz
                                   5349 ;	888n.c:706: roll_apeak_yz(2,10000);
      001942 75*21 10         [24] 5350 	mov	_roll_apeak_yz_PARM_2,#0x10
      001945 75*22 27         [24] 5351 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001948 75 82 02         [24] 5352 	mov	dpl,#0x02
      00194B 12r0Ar3C         [24] 5353 	lcall	_roll_apeak_yz
                                   5354 ;	888n.c:707: roll_apeak_yz(3,10000);
      00194E 75*21 10         [24] 5355 	mov	_roll_apeak_yz_PARM_2,#0x10
      001951 75*22 27         [24] 5356 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001954 75 82 03         [24] 5357 	mov	dpl,#0x03
      001957 12r0Ar3C         [24] 5358 	lcall	_roll_apeak_yz
                                   5359 ;	888n.c:708: roll_apeak_yz(0,10000);
      00195A 75*21 10         [24] 5360 	mov	_roll_apeak_yz_PARM_2,#0x10
      00195D 75*22 27         [24] 5361 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001960 75 82 00         [24] 5362 	mov	dpl,#0x00
      001963 12r0Ar3C         [24] 5363 	lcall	_roll_apeak_yz
                                   5364 ;	888n.c:709: roll_apeak_yz(1,10000);
      001966 75*21 10         [24] 5365 	mov	_roll_apeak_yz_PARM_2,#0x10
      001969 75*22 27         [24] 5366 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      00196C 75 82 01         [24] 5367 	mov	dpl,#0x01
      00196F 12r0Ar3C         [24] 5368 	lcall	_roll_apeak_yz
                                   5369 ;	888n.c:710: roll_apeak_yz(2,10000);
      001972 75*21 10         [24] 5370 	mov	_roll_apeak_yz_PARM_2,#0x10
      001975 75*22 27         [24] 5371 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001978 75 82 02         [24] 5372 	mov	dpl,#0x02
      00197B 12r0Ar3C         [24] 5373 	lcall	_roll_apeak_yz
                                   5374 ;	888n.c:711: roll_apeak_yz(3,10000);
      00197E 75*21 10         [24] 5375 	mov	_roll_apeak_yz_PARM_2,#0x10
      001981 75*22 27         [24] 5376 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001984 75 82 03         [24] 5377 	mov	dpl,#0x03
      001987 12r0Ar3C         [24] 5378 	lcall	_roll_apeak_yz
                                   5379 ;	888n.c:713: for (i=0;i<3;i++) {
      00198A 75*3F 00         [24] 5380 	mov	_flash_6_i_1_123,#0x00
                                   5381 ;	888n.c:714: for (j=0;j<8;j++) {
      00198D                       5382 00124$:
      00198D E5*3F            [12] 5383 	mov	a,_flash_6_i_1_123
      00198F 75 F0 08         [24] 5384 	mov	b,#0x08
      001992 A4               [48] 5385 	mul	ab
      001993 24r1C            [12] 5386 	add	a,#_table_3p
      001995 FD               [12] 5387 	mov	r5,a
      001996 74s01            [12] 5388 	mov	a,#(_table_3p >> 8)
      001998 35 F0            [12] 5389 	addc	a,b
      00199A FE               [12] 5390 	mov	r6,a
      00199B 75*40 00         [24] 5391 	mov	_flash_6_j_1_123,#0x00
                                   5392 ;	888n.c:715: for (k=0;k<8;k++) {
      00199E                       5393 00122$:
      00199E E5*40            [12] 5394 	mov	a,_flash_6_j_1_123
      0019A0 2D               [12] 5395 	add	a,r5
      0019A1 FA               [12] 5396 	mov	r2,a
      0019A2 E4               [12] 5397 	clr	a
      0019A3 3E               [12] 5398 	addc	a,r6
      0019A4 FB               [12] 5399 	mov	r3,a
      0019A5 75*41 00         [24] 5400 	mov	_flash_6_k_1_123,#0x00
      0019A8                       5401 00111$:
                                   5402 ;	888n.c:716: if ((table_3p[i][j]>>k)&1) {
      0019A8 8A 82            [24] 5403 	mov	dpl,r2
      0019AA 8B 83            [24] 5404 	mov	dph,r3
      0019AC E4               [12] 5405 	clr	a
      0019AD 93               [24] 5406 	movc	a,@a+dptr
      0019AE F8               [12] 5407 	mov	r0,a
      0019AF 85*41 F0         [24] 5408 	mov	b,_flash_6_k_1_123
      0019B2 05 F0            [12] 5409 	inc	b
      0019B4 E8               [12] 5410 	mov	a,r0
      0019B5 80 02            [24] 5411 	sjmp	00148$
      0019B7                       5412 00147$:
      0019B7 C3               [12] 5413 	clr	c
      0019B8 13               [12] 5414 	rrc	a
      0019B9                       5415 00148$:
      0019B9 D5 F0 FB         [24] 5416 	djnz	b,00147$
      0019BC 20 E0 03         [24] 5417 	jb	acc.0,00149$
      0019BF 02r1Ar4A         [24] 5418 	ljmp	00112$
      0019C2                       5419 00149$:
                                   5420 ;	888n.c:717: for (z=1;z<8;z++) {
      0019C2 74 07            [12] 5421 	mov	a,#0x07
      0019C4 C3               [12] 5422 	clr	c
      0019C5 95*41            [12] 5423 	subb	a,_flash_6_k_1_123
      0019C7 F8               [12] 5424 	mov	r0,a
      0019C8 7F 01            [12] 5425 	mov	r7,#0x01
      0019CA                       5426 00109$:
                                   5427 ;	888n.c:718: point (j,7-k,z,1);
      0019CA 88*00            [24] 5428 	mov	_point_PARM_2,r0
      0019CC 8F*01            [24] 5429 	mov	_point_PARM_3,r7
      0019CE 75*02 01         [24] 5430 	mov	_point_PARM_4,#0x01
      0019D1 85*40 82         [24] 5431 	mov	dpl,_flash_6_j_1_123
      0019D4 C0 07            [24] 5432 	push	ar7
      0019D6 C0 06            [24] 5433 	push	ar6
      0019D8 C0 05            [24] 5434 	push	ar5
      0019DA C0 03            [24] 5435 	push	ar3
      0019DC C0 02            [24] 5436 	push	ar2
      0019DE C0 00            [24] 5437 	push	ar0
      0019E0 12r01rB1         [24] 5438 	lcall	_point
      0019E3 D0 00            [24] 5439 	pop	ar0
      0019E5 D0 02            [24] 5440 	pop	ar2
      0019E7 D0 03            [24] 5441 	pop	ar3
      0019E9 D0 05            [24] 5442 	pop	ar5
      0019EB D0 06            [24] 5443 	pop	ar6
      0019ED D0 07            [24] 5444 	pop	ar7
                                   5445 ;	888n.c:719: if (z-1) point (j,7-k,z-1,0);
      0019EF 8F 01            [24] 5446 	mov	ar1,r7
      0019F1 7C 00            [12] 5447 	mov	r4,#0x00
      0019F3 19               [12] 5448 	dec	r1
      0019F4 B9 FF 01         [24] 5449 	cjne	r1,#0xff,00150$
      0019F7 1C               [12] 5450 	dec	r4
      0019F8                       5451 00150$:
      0019F8 E9               [12] 5452 	mov	a,r1
      0019F9 4C               [12] 5453 	orl	a,r4
      0019FA 60 27            [24] 5454 	jz	00102$
      0019FC EF               [12] 5455 	mov	a,r7
      0019FD 14               [12] 5456 	dec	a
      0019FE F5*01            [12] 5457 	mov	_point_PARM_3,a
      001A00 88*00            [24] 5458 	mov	_point_PARM_2,r0
      001A02 75*02 00         [24] 5459 	mov	_point_PARM_4,#0x00
      001A05 85*40 82         [24] 5460 	mov	dpl,_flash_6_j_1_123
      001A08 C0 07            [24] 5461 	push	ar7
      001A0A C0 06            [24] 5462 	push	ar6
      001A0C C0 05            [24] 5463 	push	ar5
      001A0E C0 03            [24] 5464 	push	ar3
      001A10 C0 02            [24] 5465 	push	ar2
      001A12 C0 00            [24] 5466 	push	ar0
      001A14 12r01rB1         [24] 5467 	lcall	_point
      001A17 D0 00            [24] 5468 	pop	ar0
      001A19 D0 02            [24] 5469 	pop	ar2
      001A1B D0 03            [24] 5470 	pop	ar3
      001A1D D0 05            [24] 5471 	pop	ar5
      001A1F D0 06            [24] 5472 	pop	ar6
      001A21 D0 07            [24] 5473 	pop	ar7
      001A23                       5474 00102$:
                                   5475 ;	888n.c:720: delay(5000);
      001A23 90 13 88         [24] 5476 	mov	dptr,#0x1388
      001A26 C0 07            [24] 5477 	push	ar7
      001A28 C0 06            [24] 5478 	push	ar6
      001A2A C0 05            [24] 5479 	push	ar5
      001A2C C0 03            [24] 5480 	push	ar3
      001A2E C0 02            [24] 5481 	push	ar2
      001A30 C0 00            [24] 5482 	push	ar0
      001A32 12r00r20         [24] 5483 	lcall	_delay
      001A35 D0 00            [24] 5484 	pop	ar0
      001A37 D0 02            [24] 5485 	pop	ar2
      001A39 D0 03            [24] 5486 	pop	ar3
      001A3B D0 05            [24] 5487 	pop	ar5
      001A3D D0 06            [24] 5488 	pop	ar6
      001A3F D0 07            [24] 5489 	pop	ar7
                                   5490 ;	888n.c:717: for (z=1;z<8;z++) {
      001A41 0F               [12] 5491 	inc	r7
      001A42 BF 08 00         [24] 5492 	cjne	r7,#0x08,00152$
      001A45                       5493 00152$:
      001A45 50 03            [24] 5494 	jnc	00153$
      001A47 02r19rCA         [24] 5495 	ljmp	00109$
      001A4A                       5496 00153$:
      001A4A                       5497 00112$:
                                   5498 ;	888n.c:715: for (k=0;k<8;k++) {
      001A4A 05*41            [12] 5499 	inc	_flash_6_k_1_123
      001A4C 74 F8            [12] 5500 	mov	a,#0x100 - 0x08
      001A4E 25*41            [12] 5501 	add	a,_flash_6_k_1_123
      001A50 40 03            [24] 5502 	jc	00154$
      001A52 02r19rA8         [24] 5503 	ljmp	00111$
      001A55                       5504 00154$:
                                   5505 ;	888n.c:714: for (j=0;j<8;j++) {
      001A55 05*40            [12] 5506 	inc	_flash_6_j_1_123
      001A57 74 F8            [12] 5507 	mov	a,#0x100 - 0x08
      001A59 25*40            [12] 5508 	add	a,_flash_6_j_1_123
      001A5B 40 03            [24] 5509 	jc	00155$
      001A5D 02r19r9E         [24] 5510 	ljmp	00122$
      001A60                       5511 00155$:
                                   5512 ;	888n.c:725: trans(7,15000);
      001A60 75*27 98         [24] 5513 	mov	_trans_PARM_2,#0x98
      001A63 75*28 3A         [24] 5514 	mov	(_trans_PARM_2 + 1),#0x3a
      001A66 75 82 07         [24] 5515 	mov	dpl,#0x07
      001A69 12r0Er11         [24] 5516 	lcall	_trans
                                   5517 ;	888n.c:713: for (i=0;i<3;i++) {
      001A6C 05*3F            [12] 5518 	inc	_flash_6_i_1_123
      001A6E 74 FD            [12] 5519 	mov	a,#0x100 - 0x03
      001A70 25*3F            [12] 5520 	add	a,_flash_6_i_1_123
      001A72 40 03            [24] 5521 	jc	00156$
      001A74 02r19r8D         [24] 5522 	ljmp	00124$
      001A77                       5523 00156$:
      001A77 22               [24] 5524 	ret
                                   5525 ;------------------------------------------------------------
                                   5526 ;Allocation info for local variables in function 'flash_7'
                                   5527 ;------------------------------------------------------------
                                   5528 ;i                         Allocated to registers r7 
                                   5529 ;a                         Allocated to registers 
                                   5530 ;------------------------------------------------------------
                                   5531 ;	888n.c:729: void flash_7()
                                   5532 ;	-----------------------------------------
                                   5533 ;	 function flash_7
                                   5534 ;	-----------------------------------------
      001A78                       5535 _flash_7:
                                   5536 ;	888n.c:734: roll_apeak_yz(0,10000);
      001A78 75*21 10         [24] 5537 	mov	_roll_apeak_yz_PARM_2,#0x10
      001A7B 75*22 27         [24] 5538 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001A7E 75 82 00         [24] 5539 	mov	dpl,#0x00
      001A81 12r0Ar3C         [24] 5540 	lcall	_roll_apeak_yz
                                   5541 ;	888n.c:735: roll_apeak_yz(1,10000);
      001A84 75*21 10         [24] 5542 	mov	_roll_apeak_yz_PARM_2,#0x10
      001A87 75*22 27         [24] 5543 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001A8A 75 82 01         [24] 5544 	mov	dpl,#0x01
      001A8D 12r0Ar3C         [24] 5545 	lcall	_roll_apeak_yz
                                   5546 ;	888n.c:736: roll_apeak_yz(2,10000);
      001A90 75*21 10         [24] 5547 	mov	_roll_apeak_yz_PARM_2,#0x10
      001A93 75*22 27         [24] 5548 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001A96 75 82 02         [24] 5549 	mov	dpl,#0x02
      001A99 12r0Ar3C         [24] 5550 	lcall	_roll_apeak_yz
                                   5551 ;	888n.c:737: roll_apeak_yz(3,10000);
      001A9C 75*21 10         [24] 5552 	mov	_roll_apeak_yz_PARM_2,#0x10
      001A9F 75*22 27         [24] 5553 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001AA2 75 82 03         [24] 5554 	mov	dpl,#0x03
      001AA5 12r0Ar3C         [24] 5555 	lcall	_roll_apeak_yz
                                   5556 ;	888n.c:738: roll_apeak_yz(0,10000);
      001AA8 75*21 10         [24] 5557 	mov	_roll_apeak_yz_PARM_2,#0x10
      001AAB 75*22 27         [24] 5558 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001AAE 75 82 00         [24] 5559 	mov	dpl,#0x00
      001AB1 12r0Ar3C         [24] 5560 	lcall	_roll_apeak_yz
                                   5561 ;	888n.c:739: roll_apeak_yz(1,10000);
      001AB4 75*21 10         [24] 5562 	mov	_roll_apeak_yz_PARM_2,#0x10
      001AB7 75*22 27         [24] 5563 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001ABA 75 82 01         [24] 5564 	mov	dpl,#0x01
      001ABD 12r0Ar3C         [24] 5565 	lcall	_roll_apeak_yz
                                   5566 ;	888n.c:740: roll_apeak_yz(2,10000);
      001AC0 75*21 10         [24] 5567 	mov	_roll_apeak_yz_PARM_2,#0x10
      001AC3 75*22 27         [24] 5568 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001AC6 75 82 02         [24] 5569 	mov	dpl,#0x02
      001AC9 12r0Ar3C         [24] 5570 	lcall	_roll_apeak_yz
                                   5571 ;	888n.c:741: roll_apeak_yz(3,10000);
      001ACC 75*21 10         [24] 5572 	mov	_roll_apeak_yz_PARM_2,#0x10
      001ACF 75*22 27         [24] 5573 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001AD2 75 82 03         [24] 5574 	mov	dpl,#0x03
      001AD5 12r0Ar3C         [24] 5575 	lcall	_roll_apeak_yz
                                   5576 ;	888n.c:742: roll_apeak_yz(0,10000);
      001AD8 75*21 10         [24] 5577 	mov	_roll_apeak_yz_PARM_2,#0x10
      001ADB 75*22 27         [24] 5578 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001ADE 75 82 00         [24] 5579 	mov	dpl,#0x00
      001AE1 12r0Ar3C         [24] 5580 	lcall	_roll_apeak_yz
                                   5581 ;	888n.c:743: roll_apeak_yz(1,10000);
      001AE4 75*21 10         [24] 5582 	mov	_roll_apeak_yz_PARM_2,#0x10
      001AE7 75*22 27         [24] 5583 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001AEA 75 82 01         [24] 5584 	mov	dpl,#0x01
      001AED 12r0Ar3C         [24] 5585 	lcall	_roll_apeak_yz
                                   5586 ;	888n.c:744: roll_apeak_yz(2,10000);
      001AF0 75*21 10         [24] 5587 	mov	_roll_apeak_yz_PARM_2,#0x10
      001AF3 75*22 27         [24] 5588 	mov	(_roll_apeak_yz_PARM_2 + 1),#0x27
      001AF6 75 82 02         [24] 5589 	mov	dpl,#0x02
      001AF9 12r0Ar3C         [24] 5590 	lcall	_roll_apeak_yz
                                   5591 ;	888n.c:745: roll_apeak_xy(0,10000);
      001AFC 75*23 10         [24] 5592 	mov	_roll_apeak_xy_PARM_2,#0x10
      001AFF 75*24 27         [24] 5593 	mov	(_roll_apeak_xy_PARM_2 + 1),#0x27
      001B02 75 82 00         [24] 5594 	mov	dpl,#0x00
      001B05 12r0Br47         [24] 5595 	lcall	_roll_apeak_xy
                                   5596 ;	888n.c:746: roll_apeak_xy(1,10000);
      001B08 75*23 10         [24] 5597 	mov	_roll_apeak_xy_PARM_2,#0x10
      001B0B 75*24 27         [24] 5598 	mov	(_roll_apeak_xy_PARM_2 + 1),#0x27
      001B0E 75 82 01         [24] 5599 	mov	dpl,#0x01
      001B11 12r0Br47         [24] 5600 	lcall	_roll_apeak_xy
                                   5601 ;	888n.c:747: roll_apeak_xy(2,10000);
      001B14 75*23 10         [24] 5602 	mov	_roll_apeak_xy_PARM_2,#0x10
      001B17 75*24 27         [24] 5603 	mov	(_roll_apeak_xy_PARM_2 + 1),#0x27
      001B1A 75 82 02         [24] 5604 	mov	dpl,#0x02
      001B1D 12r0Br47         [24] 5605 	lcall	_roll_apeak_xy
                                   5606 ;	888n.c:748: roll_apeak_xy(3,10000);
      001B20 75*23 10         [24] 5607 	mov	_roll_apeak_xy_PARM_2,#0x10
      001B23 75*24 27         [24] 5608 	mov	(_roll_apeak_xy_PARM_2 + 1),#0x27
      001B26 75 82 03         [24] 5609 	mov	dpl,#0x03
      001B29 12r0Br47         [24] 5610 	lcall	_roll_apeak_xy
                                   5611 ;	888n.c:749: roll_apeak_xy(0,10000);
      001B2C 75*23 10         [24] 5612 	mov	_roll_apeak_xy_PARM_2,#0x10
      001B2F 75*24 27         [24] 5613 	mov	(_roll_apeak_xy_PARM_2 + 1),#0x27
      001B32 75 82 00         [24] 5614 	mov	dpl,#0x00
      001B35 12r0Br47         [24] 5615 	lcall	_roll_apeak_xy
                                   5616 ;	888n.c:750: roll_apeak_xy(1,10000);
      001B38 75*23 10         [24] 5617 	mov	_roll_apeak_xy_PARM_2,#0x10
      001B3B 75*24 27         [24] 5618 	mov	(_roll_apeak_xy_PARM_2 + 1),#0x27
      001B3E 75 82 01         [24] 5619 	mov	dpl,#0x01
      001B41 12r0Br47         [24] 5620 	lcall	_roll_apeak_xy
                                   5621 ;	888n.c:751: roll_apeak_xy(2,10000);
      001B44 75*23 10         [24] 5622 	mov	_roll_apeak_xy_PARM_2,#0x10
      001B47 75*24 27         [24] 5623 	mov	(_roll_apeak_xy_PARM_2 + 1),#0x27
      001B4A 75 82 02         [24] 5624 	mov	dpl,#0x02
      001B4D 12r0Br47         [24] 5625 	lcall	_roll_apeak_xy
                                   5626 ;	888n.c:752: roll_apeak_xy(3,10000);
      001B50 75*23 10         [24] 5627 	mov	_roll_apeak_xy_PARM_2,#0x10
      001B53 75*24 27         [24] 5628 	mov	(_roll_apeak_xy_PARM_2 + 1),#0x27
      001B56 75 82 03         [24] 5629 	mov	dpl,#0x03
      001B59 12r0Br47         [24] 5630 	lcall	_roll_apeak_xy
                                   5631 ;	888n.c:754: for (i=0;i<8;i++) {
      001B5C 7F 00            [12] 5632 	mov	r7,#0x00
      001B5E                       5633 00103$:
                                   5634 ;	888n.c:755: box_apeak_xy (0,i,0,7-i,i,7,1,1);
      001B5E 74 07            [12] 5635 	mov	a,#0x07
      001B60 C3               [12] 5636 	clr	c
      001B61 9F               [12] 5637 	subb	a,r7
      001B62 F5*19            [12] 5638 	mov	_box_apeak_xy_PARM_4,a
      001B64 8F*17            [24] 5639 	mov	_box_apeak_xy_PARM_2,r7
      001B66 75*18 00         [24] 5640 	mov	_box_apeak_xy_PARM_3,#0x00
      001B69 8F*1A            [24] 5641 	mov	_box_apeak_xy_PARM_5,r7
      001B6B 75*1B 07         [24] 5642 	mov	_box_apeak_xy_PARM_6,#0x07
      001B6E 75*1C 01         [24] 5643 	mov	_box_apeak_xy_PARM_7,#0x01
      001B71 75*1D 01         [24] 5644 	mov	_box_apeak_xy_PARM_8,#0x01
      001B74 75 82 00         [24] 5645 	mov	dpl,#0x00
      001B77 C0 07            [24] 5646 	push	ar7
      001B79 12r08r89         [24] 5647 	lcall	_box_apeak_xy
                                   5648 ;	888n.c:756: delay(a);
      001B7C 90 0B B8         [24] 5649 	mov	dptr,#0x0bb8
      001B7F 12r00r20         [24] 5650 	lcall	_delay
      001B82 D0 07            [24] 5651 	pop	ar7
                                   5652 ;	888n.c:754: for (i=0;i<8;i++) {
      001B84 0F               [12] 5653 	inc	r7
      001B85 BF 08 00         [24] 5654 	cjne	r7,#0x08,00123$
      001B88                       5655 00123$:
      001B88 40 D4            [24] 5656 	jc	00103$
                                   5657 ;	888n.c:759: delay(30000);
      001B8A 90 75 30         [24] 5658 	mov	dptr,#0x7530
      001B8D 12r00r20         [24] 5659 	lcall	_delay
                                   5660 ;	888n.c:760: roll_3_xy(0,a);
      001B90 75*25 B8         [24] 5661 	mov	_roll_3_xy_PARM_2,#0xb8
      001B93 75*26 0B         [24] 5662 	mov	(_roll_3_xy_PARM_2 + 1),#0x0b
      001B96 75 82 00         [24] 5663 	mov	dpl,#0x00
      001B99 12r0Cr96         [24] 5664 	lcall	_roll_3_xy
                                   5665 ;	888n.c:761: delay(30000);
      001B9C 90 75 30         [24] 5666 	mov	dptr,#0x7530
      001B9F 12r00r20         [24] 5667 	lcall	_delay
                                   5668 ;	888n.c:762: roll_3_xy(1,a);
      001BA2 75*25 B8         [24] 5669 	mov	_roll_3_xy_PARM_2,#0xb8
      001BA5 75*26 0B         [24] 5670 	mov	(_roll_3_xy_PARM_2 + 1),#0x0b
      001BA8 75 82 01         [24] 5671 	mov	dpl,#0x01
      001BAB 12r0Cr96         [24] 5672 	lcall	_roll_3_xy
                                   5673 ;	888n.c:763: delay(30000);
      001BAE 90 75 30         [24] 5674 	mov	dptr,#0x7530
      001BB1 12r00r20         [24] 5675 	lcall	_delay
                                   5676 ;	888n.c:764: roll_3_xy(2,a);
      001BB4 75*25 B8         [24] 5677 	mov	_roll_3_xy_PARM_2,#0xb8
      001BB7 75*26 0B         [24] 5678 	mov	(_roll_3_xy_PARM_2 + 1),#0x0b
      001BBA 75 82 02         [24] 5679 	mov	dpl,#0x02
      001BBD 12r0Cr96         [24] 5680 	lcall	_roll_3_xy
                                   5681 ;	888n.c:765: delay(30000);
      001BC0 90 75 30         [24] 5682 	mov	dptr,#0x7530
      001BC3 12r00r20         [24] 5683 	lcall	_delay
                                   5684 ;	888n.c:766: roll_3_xy(3,a);
      001BC6 75*25 B8         [24] 5685 	mov	_roll_3_xy_PARM_2,#0xb8
      001BC9 75*26 0B         [24] 5686 	mov	(_roll_3_xy_PARM_2 + 1),#0x0b
      001BCC 75 82 03         [24] 5687 	mov	dpl,#0x03
      001BCF 12r0Cr96         [24] 5688 	lcall	_roll_3_xy
                                   5689 ;	888n.c:767: delay(30000);
      001BD2 90 75 30         [24] 5690 	mov	dptr,#0x7530
      001BD5 12r00r20         [24] 5691 	lcall	_delay
                                   5692 ;	888n.c:768: roll_3_xy(0,a);
      001BD8 75*25 B8         [24] 5693 	mov	_roll_3_xy_PARM_2,#0xb8
      001BDB 75*26 0B         [24] 5694 	mov	(_roll_3_xy_PARM_2 + 1),#0x0b
      001BDE 75 82 00         [24] 5695 	mov	dpl,#0x00
      001BE1 12r0Cr96         [24] 5696 	lcall	_roll_3_xy
                                   5697 ;	888n.c:769: delay(30000);
      001BE4 90 75 30         [24] 5698 	mov	dptr,#0x7530
      001BE7 12r00r20         [24] 5699 	lcall	_delay
                                   5700 ;	888n.c:770: roll_3_xy(1,a);
      001BEA 75*25 B8         [24] 5701 	mov	_roll_3_xy_PARM_2,#0xb8
      001BED 75*26 0B         [24] 5702 	mov	(_roll_3_xy_PARM_2 + 1),#0x0b
      001BF0 75 82 01         [24] 5703 	mov	dpl,#0x01
      001BF3 12r0Cr96         [24] 5704 	lcall	_roll_3_xy
                                   5705 ;	888n.c:771: delay(30000);
      001BF6 90 75 30         [24] 5706 	mov	dptr,#0x7530
      001BF9 12r00r20         [24] 5707 	lcall	_delay
                                   5708 ;	888n.c:772: roll_3_xy(2,a);
      001BFC 75*25 B8         [24] 5709 	mov	_roll_3_xy_PARM_2,#0xb8
      001BFF 75*26 0B         [24] 5710 	mov	(_roll_3_xy_PARM_2 + 1),#0x0b
      001C02 75 82 02         [24] 5711 	mov	dpl,#0x02
      001C05 12r0Cr96         [24] 5712 	lcall	_roll_3_xy
                                   5713 ;	888n.c:773: delay(30000);
      001C08 90 75 30         [24] 5714 	mov	dptr,#0x7530
      001C0B 12r00r20         [24] 5715 	lcall	_delay
                                   5716 ;	888n.c:774: roll_3_xy(3,a);
      001C0E 75*25 B8         [24] 5717 	mov	_roll_3_xy_PARM_2,#0xb8
      001C11 75*26 0B         [24] 5718 	mov	(_roll_3_xy_PARM_2 + 1),#0x0b
      001C14 75 82 03         [24] 5719 	mov	dpl,#0x03
      001C17 12r0Cr96         [24] 5720 	lcall	_roll_3_xy
                                   5721 ;	888n.c:775: for (i=7;i>0;i--) {
      001C1A 7F 07            [12] 5722 	mov	r7,#0x07
      001C1C                       5723 00105$:
                                   5724 ;	888n.c:776: box_apeak_xy(i,0,0,i,7,7,1,0);
      001C1C 75*17 00         [24] 5725 	mov	_box_apeak_xy_PARM_2,#0x00
      001C1F 75*18 00         [24] 5726 	mov	_box_apeak_xy_PARM_3,#0x00
      001C22 8F*19            [24] 5727 	mov	_box_apeak_xy_PARM_4,r7
      001C24 75*1A 07         [24] 5728 	mov	_box_apeak_xy_PARM_5,#0x07
      001C27 75*1B 07         [24] 5729 	mov	_box_apeak_xy_PARM_6,#0x07
      001C2A 75*1C 01         [24] 5730 	mov	_box_apeak_xy_PARM_7,#0x01
      001C2D 75*1D 00         [24] 5731 	mov	_box_apeak_xy_PARM_8,#0x00
      001C30 8F 82            [24] 5732 	mov	dpl,r7
      001C32 C0 07            [24] 5733 	push	ar7
      001C34 12r08r89         [24] 5734 	lcall	_box_apeak_xy
                                   5735 ;	888n.c:777: delay(a);
      001C37 90 0B B8         [24] 5736 	mov	dptr,#0x0bb8
      001C3A 12r00r20         [24] 5737 	lcall	_delay
      001C3D D0 07            [24] 5738 	pop	ar7
                                   5739 ;	888n.c:775: for (i=7;i>0;i--) {
      001C3F DF DB            [24] 5740 	djnz	r7,00105$
      001C41 22               [24] 5741 	ret
                                   5742 ;------------------------------------------------------------
                                   5743 ;Allocation info for local variables in function 'flash_8'
                                   5744 ;------------------------------------------------------------
                                   5745 ;i                         Allocated to registers r7 
                                   5746 ;------------------------------------------------------------
                                   5747 ;	888n.c:781: void flash_8()
                                   5748 ;	-----------------------------------------
                                   5749 ;	 function flash_8
                                   5750 ;	-----------------------------------------
      001C42                       5751 _flash_8:
                                   5752 ;	888n.c:785: for (i=5;i<8;i++) {
      001C42 7F 05            [12] 5753 	mov	r7,#0x05
      001C44                       5754 00102$:
                                   5755 ;	888n.c:786: tranoutchar(i,10000);
      001C44 75*29 10         [24] 5756 	mov	_tranoutchar_PARM_2,#0x10
      001C47 75*2A 27         [24] 5757 	mov	(_tranoutchar_PARM_2 + 1),#0x27
      001C4A 8F 82            [24] 5758 	mov	dpl,r7
      001C4C C0 07            [24] 5759 	push	ar7
      001C4E 12r0Er67         [24] 5760 	lcall	_tranoutchar
                                   5761 ;	888n.c:787: delay(60000);
      001C51 90 EA 60         [24] 5762 	mov	dptr,#0xea60
      001C54 12r00r20         [24] 5763 	lcall	_delay
                                   5764 ;	888n.c:788: delay(60000);
      001C57 90 EA 60         [24] 5765 	mov	dptr,#0xea60
      001C5A 12r00r20         [24] 5766 	lcall	_delay
      001C5D D0 07            [24] 5767 	pop	ar7
                                   5768 ;	888n.c:785: for (i=5;i<8;i++) {
      001C5F 0F               [12] 5769 	inc	r7
      001C60 BF 08 00         [24] 5770 	cjne	r7,#0x08,00110$
      001C63                       5771 00110$:
      001C63 40 DF            [24] 5772 	jc	00102$
      001C65 22               [24] 5773 	ret
                                   5774 ;------------------------------------------------------------
                                   5775 ;Allocation info for local variables in function 'flash_9'
                                   5776 ;------------------------------------------------------------
                                   5777 ;i                         Allocated with name '_flash_9_i_1_134'
                                   5778 ;j                         Allocated with name '_flash_9_j_1_134'
                                   5779 ;an                        Allocated with name '_flash_9_an_1_134'
                                   5780 ;x                         Allocated to registers r2 
                                   5781 ;y                         Allocated with name '_flash_9_y_1_134'
                                   5782 ;t                         Allocated to registers r4 
                                   5783 ;x1                        Allocated to registers r5 
                                   5784 ;y1                        Allocated to registers r7 
                                   5785 ;sloc0                     Allocated with name '_flash_9_sloc0_1_0'
                                   5786 ;sloc1                     Allocated with name '_flash_9_sloc1_1_0'
                                   5787 ;sloc2                     Allocated with name '_flash_9_sloc2_1_0'
                                   5788 ;------------------------------------------------------------
                                   5789 ;	888n.c:792: void flash_9()
                                   5790 ;	-----------------------------------------
                                   5791 ;	 function flash_9
                                   5792 ;	-----------------------------------------
      001C66                       5793 _flash_9:
                                   5794 ;	888n.c:797: for (i=0;i<8;i++) {
      001C66 7F 00            [12] 5795 	mov	r7,#0x00
      001C68                       5796 00126$:
                                   5797 ;	888n.c:798: box_apeak_xy (i,0,0,i,7,7,1,1);
      001C68 75*17 00         [24] 5798 	mov	_box_apeak_xy_PARM_2,#0x00
      001C6B 75*18 00         [24] 5799 	mov	_box_apeak_xy_PARM_3,#0x00
      001C6E 8F*19            [24] 5800 	mov	_box_apeak_xy_PARM_4,r7
      001C70 75*1A 07         [24] 5801 	mov	_box_apeak_xy_PARM_5,#0x07
      001C73 75*1B 07         [24] 5802 	mov	_box_apeak_xy_PARM_6,#0x07
      001C76 75*1C 01         [24] 5803 	mov	_box_apeak_xy_PARM_7,#0x01
      001C79 75*1D 01         [24] 5804 	mov	_box_apeak_xy_PARM_8,#0x01
      001C7C 8F 82            [24] 5805 	mov	dpl,r7
      001C7E C0 07            [24] 5806 	push	ar7
      001C80 12r08r89         [24] 5807 	lcall	_box_apeak_xy
      001C83 D0 07            [24] 5808 	pop	ar7
                                   5809 ;	888n.c:799: if (i) box_apeak_xy (i-1,0,0,i-1,7,7,1,0);
      001C85 EF               [12] 5810 	mov	a,r7
      001C86 60 20            [24] 5811 	jz	00102$
      001C88 EF               [12] 5812 	mov	a,r7
      001C89 14               [12] 5813 	dec	a
      001C8A FE               [12] 5814 	mov	r6,a
      001C8B 75*17 00         [24] 5815 	mov	_box_apeak_xy_PARM_2,#0x00
      001C8E 75*18 00         [24] 5816 	mov	_box_apeak_xy_PARM_3,#0x00
      001C91 8E*19            [24] 5817 	mov	_box_apeak_xy_PARM_4,r6
      001C93 75*1A 07         [24] 5818 	mov	_box_apeak_xy_PARM_5,#0x07
      001C96 75*1B 07         [24] 5819 	mov	_box_apeak_xy_PARM_6,#0x07
      001C99 75*1C 01         [24] 5820 	mov	_box_apeak_xy_PARM_7,#0x01
      001C9C 75*1D 00         [24] 5821 	mov	_box_apeak_xy_PARM_8,#0x00
      001C9F 8E 82            [24] 5822 	mov	dpl,r6
      001CA1 C0 07            [24] 5823 	push	ar7
      001CA3 12r08r89         [24] 5824 	lcall	_box_apeak_xy
      001CA6 D0 07            [24] 5825 	pop	ar7
      001CA8                       5826 00102$:
                                   5827 ;	888n.c:800: delay(10000);
      001CA8 90 27 10         [24] 5828 	mov	dptr,#0x2710
      001CAB C0 07            [24] 5829 	push	ar7
      001CAD 12r00r20         [24] 5830 	lcall	_delay
      001CB0 D0 07            [24] 5831 	pop	ar7
                                   5832 ;	888n.c:797: for (i=0;i<8;i++) {
      001CB2 0F               [12] 5833 	inc	r7
      001CB3 C3               [12] 5834 	clr	c
      001CB4 EF               [12] 5835 	mov	a,r7
      001CB5 64 80            [12] 5836 	xrl	a,#0x80
      001CB7 94 88            [12] 5837 	subb	a,#0x88
      001CB9 40 AD            [24] 5838 	jc	00126$
                                   5839 ;	888n.c:803: roll_apeak_xy(3,10000);
      001CBB 75*23 10         [24] 5840 	mov	_roll_apeak_xy_PARM_2,#0x10
      001CBE 75*24 27         [24] 5841 	mov	(_roll_apeak_xy_PARM_2 + 1),#0x27
      001CC1 75 82 03         [24] 5842 	mov	dpl,#0x03
      001CC4 12r0Br47         [24] 5843 	lcall	_roll_apeak_xy
                                   5844 ;	888n.c:804: roll_apeak_xy(0,10000);
      001CC7 75*23 10         [24] 5845 	mov	_roll_apeak_xy_PARM_2,#0x10
      001CCA 75*24 27         [24] 5846 	mov	(_roll_apeak_xy_PARM_2 + 1),#0x27
      001CCD 75 82 00         [24] 5847 	mov	dpl,#0x00
      001CD0 12r0Br47         [24] 5848 	lcall	_roll_apeak_xy
                                   5849 ;	888n.c:805: roll_apeak_xy(1,10000);
      001CD3 75*23 10         [24] 5850 	mov	_roll_apeak_xy_PARM_2,#0x10
      001CD6 75*24 27         [24] 5851 	mov	(_roll_apeak_xy_PARM_2 + 1),#0x27
      001CD9 75 82 01         [24] 5852 	mov	dpl,#0x01
      001CDC 12r0Br47         [24] 5853 	lcall	_roll_apeak_xy
                                   5854 ;	888n.c:807: for (i=0;i<7;i++) {
      001CDF 7F 00            [12] 5855 	mov	r7,#0x00
      001CE1                       5856 00128$:
                                   5857 ;	888n.c:808: line(6-i,6-i,0,6-i,6-i,7,1);
      001CE1 74 06            [12] 5858 	mov	a,#0x06
      001CE3 C3               [12] 5859 	clr	c
      001CE4 9F               [12] 5860 	subb	a,r7
      001CE5 FE               [12] 5861 	mov	r6,a
      001CE6 8E*04            [24] 5862 	mov	_line_PARM_2,r6
      001CE8 75*05 00         [24] 5863 	mov	_line_PARM_3,#0x00
      001CEB 8E*06            [24] 5864 	mov	_line_PARM_4,r6
      001CED 8E*07            [24] 5865 	mov	_line_PARM_5,r6
      001CEF 75*08 07         [24] 5866 	mov	_line_PARM_6,#0x07
      001CF2 75*09 01         [24] 5867 	mov	_line_PARM_7,#0x01
      001CF5 8E 82            [24] 5868 	mov	dpl,r6
      001CF7 C0 07            [24] 5869 	push	ar7
      001CF9 12r02rAD         [24] 5870 	lcall	_line
      001CFC D0 07            [24] 5871 	pop	ar7
                                   5872 ;	888n.c:809: line(i,7,0,i,7,7,0);
      001CFE 75*04 07         [24] 5873 	mov	_line_PARM_2,#0x07
      001D01 75*05 00         [24] 5874 	mov	_line_PARM_3,#0x00
      001D04 8F*06            [24] 5875 	mov	_line_PARM_4,r7
      001D06 75*07 07         [24] 5876 	mov	_line_PARM_5,#0x07
      001D09 75*08 07         [24] 5877 	mov	_line_PARM_6,#0x07
      001D0C 75*09 00         [24] 5878 	mov	_line_PARM_7,#0x00
      001D0F 8F 82            [24] 5879 	mov	dpl,r7
      001D11 C0 07            [24] 5880 	push	ar7
      001D13 12r02rAD         [24] 5881 	lcall	_line
                                   5882 ;	888n.c:810: delay(10000);
      001D16 90 27 10         [24] 5883 	mov	dptr,#0x2710
      001D19 12r00r20         [24] 5884 	lcall	_delay
      001D1C D0 07            [24] 5885 	pop	ar7
                                   5886 ;	888n.c:807: for (i=0;i<7;i++) {
      001D1E 0F               [12] 5887 	inc	r7
      001D1F C3               [12] 5888 	clr	c
      001D20 EF               [12] 5889 	mov	a,r7
      001D21 64 80            [12] 5890 	xrl	a,#0x80
      001D23 94 87            [12] 5891 	subb	a,#0x87
      001D25 40 BA            [24] 5892 	jc	00128$
                                   5893 ;	888n.c:813: for (i=0;i<8;i++) an[i]=14;
      001D27 7F 00            [12] 5894 	mov	r7,#0x00
      001D29                       5895 00130$:
      001D29 EF               [12] 5896 	mov	a,r7
      001D2A 24r44            [12] 5897 	add	a,#_flash_9_an_1_134
      001D2C F8               [12] 5898 	mov	r0,a
      001D2D 76 0E            [12] 5899 	mov	@r0,#0x0e
      001D2F 0F               [12] 5900 	inc	r7
      001D30 C3               [12] 5901 	clr	c
      001D31 EF               [12] 5902 	mov	a,r7
      001D32 64 80            [12] 5903 	xrl	a,#0x80
      001D34 94 88            [12] 5904 	subb	a,#0x88
      001D36 40 F1            [24] 5905 	jc	00130$
                                   5906 ;	888n.c:815: for (i=0;i<85;i++) {
      001D38 75*42 00         [24] 5907 	mov	_flash_9_i_1_134,#0x00
      001D3B                       5908 00136$:
                                   5909 ;	888n.c:816: clear(0);
      001D3B 75 82 00         [24] 5910 	mov	dpl,#0x00
      001D3E 12r00rCA         [24] 5911 	lcall	_clear
                                   5912 ;	888n.c:817: for (j=0;j<8;j++) {
      001D41 7E 00            [12] 5913 	mov	r6,#0x00
      001D43                       5914 00132$:
                                   5915 ;	888n.c:818: t=an[j]%28;
      001D43 EE               [12] 5916 	mov	a,r6
      001D44 24r44            [12] 5917 	add	a,#_flash_9_an_1_134
      001D46 F9               [12] 5918 	mov	r1,a
      001D47 87 05            [24] 5919 	mov	ar5,@r1
      001D49 75 F0 1C         [24] 5920 	mov	b,#0x1c
      001D4C ED               [12] 5921 	mov	a,r5
      001D4D 84               [48] 5922 	div	ab
                                   5923 ;	888n.c:819: x=dat2[t]>>5;
      001D4E E5 F0            [12] 5924 	mov	a,b
      001D50 90r00rE8         [24] 5925 	mov	dptr,#_dat2
      001D53 93               [24] 5926 	movc	a,@a+dptr
      001D54 FB               [12] 5927 	mov	r3,a
      001D55 C4               [12] 5928 	swap	a
      001D56 03               [12] 5929 	rr	a
      001D57 54 07            [12] 5930 	anl	a,#0x07
      001D59 FA               [12] 5931 	mov	r2,a
                                   5932 ;	888n.c:820: y=(dat2[t]>>2)&0x07;
      001D5A EB               [12] 5933 	mov	a,r3
      001D5B 03               [12] 5934 	rr	a
      001D5C 03               [12] 5935 	rr	a
      001D5D 54 3F            [12] 5936 	anl	a,#0x3f
      001D5F FB               [12] 5937 	mov	r3,a
      001D60 74 07            [12] 5938 	mov	a,#0x07
      001D62 5B               [12] 5939 	anl	a,r3
      001D63 F5*4C            [12] 5940 	mov	_flash_9_y_1_134,a
                                   5941 ;	888n.c:821: t=(an[j]-14)%28;
      001D65 7F 00            [12] 5942 	mov	r7,#0x00
      001D67 ED               [12] 5943 	mov	a,r5
      001D68 24 F2            [12] 5944 	add	a,#0xf2
      001D6A F5 82            [12] 5945 	mov	dpl,a
      001D6C EF               [12] 5946 	mov	a,r7
      001D6D 34 FF            [12] 5947 	addc	a,#0xff
      001D6F F5 83            [12] 5948 	mov	dph,a
      001D71 75*00 1C         [24] 5949 	mov	__modsint_PARM_2,#0x1c
                                   5950 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      001D74 8F*01            [24] 5951 	mov	(__modsint_PARM_2 + 1),r7
      001D76 C0 06            [24] 5952 	push	ar6
      001D78 C0 02            [24] 5953 	push	ar2
      001D7A 12r00r00         [24] 5954 	lcall	__modsint
      001D7D AD 82            [24] 5955 	mov	r5,dpl
      001D7F D0 02            [24] 5956 	pop	ar2
      001D81 D0 06            [24] 5957 	pop	ar6
      001D83 8D 04            [24] 5958 	mov	ar4,r5
                                   5959 ;	888n.c:822: x1=dat2[t]>>5;
      001D85 EC               [12] 5960 	mov	a,r4
      001D86 90r00rE8         [24] 5961 	mov	dptr,#_dat2
      001D89 93               [24] 5962 	movc	a,@a+dptr
      001D8A FF               [12] 5963 	mov	r7,a
      001D8B C4               [12] 5964 	swap	a
      001D8C 03               [12] 5965 	rr	a
      001D8D 54 07            [12] 5966 	anl	a,#0x07
      001D8F FD               [12] 5967 	mov	r5,a
                                   5968 ;	888n.c:823: y1=(dat2[t]>>2)&0x07;
      001D90 EF               [12] 5969 	mov	a,r7
      001D91 03               [12] 5970 	rr	a
      001D92 03               [12] 5971 	rr	a
      001D93 54 3F            [12] 5972 	anl	a,#0x3f
      001D95 FF               [12] 5973 	mov	r7,a
      001D96 53 07 07         [24] 5974 	anl	ar7,#0x07
                                   5975 ;	888n.c:824: line(x,y,j,x1,y1,j,1);
      001D99 85*4C*04         [24] 5976 	mov	_line_PARM_2,_flash_9_y_1_134
      001D9C 8E*05            [24] 5977 	mov	_line_PARM_3,r6
      001D9E 8D*06            [24] 5978 	mov	_line_PARM_4,r5
      001DA0 8F*07            [24] 5979 	mov	_line_PARM_5,r7
      001DA2 8E*08            [24] 5980 	mov	_line_PARM_6,r6
      001DA4 75*09 01         [24] 5981 	mov	_line_PARM_7,#0x01
      001DA7 8A 82            [24] 5982 	mov	dpl,r2
      001DA9 C0 06            [24] 5983 	push	ar6
      001DAB 12r02rAD         [24] 5984 	lcall	_line
      001DAE D0 06            [24] 5985 	pop	ar6
                                   5986 ;	888n.c:817: for (j=0;j<8;j++) {
      001DB0 0E               [12] 5987 	inc	r6
      001DB1 BE 08 00         [24] 5988 	cjne	r6,#0x08,00309$
      001DB4                       5989 00309$:
      001DB4 40 8D            [24] 5990 	jc	00132$
                                   5991 ;	888n.c:826: for (j=0;j<8;j++) {
      001DB6 75*43 00         [24] 5992 	mov	_flash_9_j_1_134,#0x00
      001DB9                       5993 00134$:
                                   5994 ;	888n.c:827: if ((i>j)&(j>i-71))
      001DB9 E5*42            [12] 5995 	mov	a,_flash_9_i_1_134
      001DBB F5*4D            [12] 5996 	mov	_flash_9_sloc0_1_0,a
      001DBD 33               [12] 5997 	rlc	a
      001DBE 95 E0            [12] 5998 	subb	a,acc
      001DC0 F5*4E            [12] 5999 	mov	(_flash_9_sloc0_1_0 + 1),a
      001DC2 85*43*4F         [24] 6000 	mov	_flash_9_sloc1_1_0,_flash_9_j_1_134
      001DC5 75*50 00         [24] 6001 	mov	(_flash_9_sloc1_1_0 + 1),#0x00
      001DC8 C3               [12] 6002 	clr	c
      001DC9 E5*4F            [12] 6003 	mov	a,_flash_9_sloc1_1_0
      001DCB 95*4D            [12] 6004 	subb	a,_flash_9_sloc0_1_0
      001DCD E5*50            [12] 6005 	mov	a,(_flash_9_sloc1_1_0 + 1)
      001DCF 64 80            [12] 6006 	xrl	a,#0x80
      001DD1 85*4E F0         [24] 6007 	mov	b,(_flash_9_sloc0_1_0 + 1)
      001DD4 63 F0 80         [24] 6008 	xrl	b,#0x80
      001DD7 95 F0            [12] 6009 	subb	a,b
      001DD9 E4               [12] 6010 	clr	a
      001DDA 33               [12] 6011 	rlc	a
      001DDB F5*51            [12] 6012 	mov	_flash_9_sloc2_1_0,a
      001DDD E5*4D            [12] 6013 	mov	a,_flash_9_sloc0_1_0
      001DDF 24 B9            [12] 6014 	add	a,#0xb9
      001DE1 F5*4D            [12] 6015 	mov	_flash_9_sloc0_1_0,a
      001DE3 E5*4E            [12] 6016 	mov	a,(_flash_9_sloc0_1_0 + 1)
      001DE5 34 FF            [12] 6017 	addc	a,#0xff
      001DE7 F5*4E            [12] 6018 	mov	(_flash_9_sloc0_1_0 + 1),a
      001DE9 C3               [12] 6019 	clr	c
      001DEA E5*4D            [12] 6020 	mov	a,_flash_9_sloc0_1_0
      001DEC 95*4F            [12] 6021 	subb	a,_flash_9_sloc1_1_0
      001DEE E5*4E            [12] 6022 	mov	a,(_flash_9_sloc0_1_0 + 1)
      001DF0 64 80            [12] 6023 	xrl	a,#0x80
      001DF2 85*50 F0         [24] 6024 	mov	b,(_flash_9_sloc1_1_0 + 1)
      001DF5 63 F0 80         [24] 6025 	xrl	b,#0x80
      001DF8 95 F0            [12] 6026 	subb	a,b
      001DFA E4               [12] 6027 	clr	a
      001DFB 33               [12] 6028 	rlc	a
      001DFC FE               [12] 6029 	mov	r6,a
      001DFD 55*51            [12] 6030 	anl	a,_flash_9_sloc2_1_0
      001DFF 60 09            [24] 6031 	jz	00135$
                                   6032 ;	888n.c:828: an[j]++;
      001E01 E5*43            [12] 6033 	mov	a,_flash_9_j_1_134
      001E03 24r44            [12] 6034 	add	a,#_flash_9_an_1_134
      001E05 F9               [12] 6035 	mov	r1,a
      001E06 E7               [12] 6036 	mov	a,@r1
      001E07 FE               [12] 6037 	mov	r6,a
      001E08 04               [12] 6038 	inc	a
      001E09 F7               [12] 6039 	mov	@r1,a
      001E0A                       6040 00135$:
                                   6041 ;	888n.c:826: for (j=0;j<8;j++) {
      001E0A 05*43            [12] 6042 	inc	_flash_9_j_1_134
      001E0C 74 F8            [12] 6043 	mov	a,#0x100 - 0x08
      001E0E 25*43            [12] 6044 	add	a,_flash_9_j_1_134
      001E10 50 A7            [24] 6045 	jnc	00134$
                                   6046 ;	888n.c:830: delay(5000);
      001E12 90 13 88         [24] 6047 	mov	dptr,#0x1388
      001E15 12r00r20         [24] 6048 	lcall	_delay
                                   6049 ;	888n.c:815: for (i=0;i<85;i++) {
      001E18 05*42            [12] 6050 	inc	_flash_9_i_1_134
      001E1A C3               [12] 6051 	clr	c
      001E1B E5*42            [12] 6052 	mov	a,_flash_9_i_1_134
      001E1D 64 80            [12] 6053 	xrl	a,#0x80
      001E1F 94 D5            [12] 6054 	subb	a,#0xd5
      001E21 50 03            [24] 6055 	jnc	00313$
      001E23 02r1Dr3B         [24] 6056 	ljmp	00136$
      001E26                       6057 00313$:
                                   6058 ;	888n.c:833: for (i=0;i<85;i++) {
      001E26 75*42 00         [24] 6059 	mov	_flash_9_i_1_134,#0x00
      001E29                       6060 00142$:
                                   6061 ;	888n.c:834: clear(0);
      001E29 75 82 00         [24] 6062 	mov	dpl,#0x00
      001E2C 12r00rCA         [24] 6063 	lcall	_clear
                                   6064 ;	888n.c:835: for (j=0;j<8;j++) {
      001E2F 75*43 00         [24] 6065 	mov	_flash_9_j_1_134,#0x00
      001E32                       6066 00138$:
                                   6067 ;	888n.c:836: t=an[j]%28;
      001E32 E5*43            [12] 6068 	mov	a,_flash_9_j_1_134
      001E34 24r44            [12] 6069 	add	a,#_flash_9_an_1_134
      001E36 F9               [12] 6070 	mov	r1,a
      001E37 87*51            [24] 6071 	mov	_flash_9_sloc2_1_0,@r1
      001E39 75 F0 1C         [24] 6072 	mov	b,#0x1c
      001E3C E5*51            [12] 6073 	mov	a,_flash_9_sloc2_1_0
      001E3E 84               [48] 6074 	div	ab
                                   6075 ;	888n.c:837: x=dat2[t]>>5;
      001E3F E5 F0            [12] 6076 	mov	a,b
      001E41 90r00rE8         [24] 6077 	mov	dptr,#_dat2
      001E44 93               [24] 6078 	movc	a,@a+dptr
      001E45 FE               [12] 6079 	mov	r6,a
      001E46 C4               [12] 6080 	swap	a
      001E47 03               [12] 6081 	rr	a
      001E48 54 07            [12] 6082 	anl	a,#0x07
      001E4A FA               [12] 6083 	mov	r2,a
                                   6084 ;	888n.c:838: y=(dat2[t]>>2)&0x07;
      001E4B EE               [12] 6085 	mov	a,r6
      001E4C 03               [12] 6086 	rr	a
      001E4D 03               [12] 6087 	rr	a
      001E4E 54 3F            [12] 6088 	anl	a,#0x3f
      001E50 FE               [12] 6089 	mov	r6,a
      001E51 74 07            [12] 6090 	mov	a,#0x07
      001E53 5E               [12] 6091 	anl	a,r6
      001E54 F5*4C            [12] 6092 	mov	_flash_9_y_1_134,a
                                   6093 ;	888n.c:839: t=(an[j]-14)%28;
      001E56 AB*51            [24] 6094 	mov	r3,_flash_9_sloc2_1_0
      001E58 7E 00            [12] 6095 	mov	r6,#0x00
      001E5A EB               [12] 6096 	mov	a,r3
      001E5B 24 F2            [12] 6097 	add	a,#0xf2
      001E5D F5 82            [12] 6098 	mov	dpl,a
      001E5F EE               [12] 6099 	mov	a,r6
      001E60 34 FF            [12] 6100 	addc	a,#0xff
      001E62 F5 83            [12] 6101 	mov	dph,a
      001E64 75*00 1C         [24] 6102 	mov	__modsint_PARM_2,#0x1c
                                   6103 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      001E67 8E*01            [24] 6104 	mov	(__modsint_PARM_2 + 1),r6
      001E69 C0 02            [24] 6105 	push	ar2
      001E6B 12r00r00         [24] 6106 	lcall	__modsint
      001E6E AB 82            [24] 6107 	mov	r3,dpl
      001E70 D0 02            [24] 6108 	pop	ar2
      001E72 8B 04            [24] 6109 	mov	ar4,r3
                                   6110 ;	888n.c:840: x1=dat2[t]>>5;
      001E74 EC               [12] 6111 	mov	a,r4
      001E75 90r00rE8         [24] 6112 	mov	dptr,#_dat2
      001E78 93               [24] 6113 	movc	a,@a+dptr
      001E79 FE               [12] 6114 	mov	r6,a
      001E7A C4               [12] 6115 	swap	a
      001E7B 03               [12] 6116 	rr	a
      001E7C 54 07            [12] 6117 	anl	a,#0x07
      001E7E FD               [12] 6118 	mov	r5,a
                                   6119 ;	888n.c:841: y1=(dat2[t]>>2)&0x07;
      001E7F EE               [12] 6120 	mov	a,r6
      001E80 03               [12] 6121 	rr	a
      001E81 03               [12] 6122 	rr	a
      001E82 54 3F            [12] 6123 	anl	a,#0x3f
      001E84 FE               [12] 6124 	mov	r6,a
      001E85 74 07            [12] 6125 	mov	a,#0x07
      001E87 5E               [12] 6126 	anl	a,r6
      001E88 FF               [12] 6127 	mov	r7,a
                                   6128 ;	888n.c:842: line(x,y,j,x1,y1,j,1);
      001E89 85*4C*04         [24] 6129 	mov	_line_PARM_2,_flash_9_y_1_134
      001E8C 85*43*05         [24] 6130 	mov	_line_PARM_3,_flash_9_j_1_134
      001E8F 8D*06            [24] 6131 	mov	_line_PARM_4,r5
      001E91 8F*07            [24] 6132 	mov	_line_PARM_5,r7
      001E93 85*43*08         [24] 6133 	mov	_line_PARM_6,_flash_9_j_1_134
      001E96 75*09 01         [24] 6134 	mov	_line_PARM_7,#0x01
      001E99 8A 82            [24] 6135 	mov	dpl,r2
      001E9B 12r02rAD         [24] 6136 	lcall	_line
                                   6137 ;	888n.c:835: for (j=0;j<8;j++) {
      001E9E 05*43            [12] 6138 	inc	_flash_9_j_1_134
      001EA0 74 F8            [12] 6139 	mov	a,#0x100 - 0x08
      001EA2 25*43            [12] 6140 	add	a,_flash_9_j_1_134
      001EA4 50 8C            [24] 6141 	jnc	00138$
                                   6142 ;	888n.c:844: for (j=0;j<8;j++) {
      001EA6 75*43 00         [24] 6143 	mov	_flash_9_j_1_134,#0x00
      001EA9                       6144 00140$:
                                   6145 ;	888n.c:845: if ((i>j)&(j>i-71))
      001EA9 E5*42            [12] 6146 	mov	a,_flash_9_i_1_134
      001EAB F5*4F            [12] 6147 	mov	_flash_9_sloc1_1_0,a
      001EAD 33               [12] 6148 	rlc	a
      001EAE 95 E0            [12] 6149 	subb	a,acc
      001EB0 F5*50            [12] 6150 	mov	(_flash_9_sloc1_1_0 + 1),a
      001EB2 85*43*4D         [24] 6151 	mov	_flash_9_sloc0_1_0,_flash_9_j_1_134
      001EB5 75*4E 00         [24] 6152 	mov	(_flash_9_sloc0_1_0 + 1),#0x00
      001EB8 C3               [12] 6153 	clr	c
      001EB9 E5*4D            [12] 6154 	mov	a,_flash_9_sloc0_1_0
      001EBB 95*4F            [12] 6155 	subb	a,_flash_9_sloc1_1_0
      001EBD E5*4E            [12] 6156 	mov	a,(_flash_9_sloc0_1_0 + 1)
      001EBF 64 80            [12] 6157 	xrl	a,#0x80
      001EC1 85*50 F0         [24] 6158 	mov	b,(_flash_9_sloc1_1_0 + 1)
      001EC4 63 F0 80         [24] 6159 	xrl	b,#0x80
      001EC7 95 F0            [12] 6160 	subb	a,b
      001EC9 E4               [12] 6161 	clr	a
      001ECA 33               [12] 6162 	rlc	a
      001ECB F5*51            [12] 6163 	mov	_flash_9_sloc2_1_0,a
      001ECD E5*4F            [12] 6164 	mov	a,_flash_9_sloc1_1_0
      001ECF 24 B9            [12] 6165 	add	a,#0xb9
      001ED1 FB               [12] 6166 	mov	r3,a
      001ED2 E5*50            [12] 6167 	mov	a,(_flash_9_sloc1_1_0 + 1)
      001ED4 34 FF            [12] 6168 	addc	a,#0xff
      001ED6 FE               [12] 6169 	mov	r6,a
      001ED7 C3               [12] 6170 	clr	c
      001ED8 EB               [12] 6171 	mov	a,r3
      001ED9 95*4D            [12] 6172 	subb	a,_flash_9_sloc0_1_0
      001EDB EE               [12] 6173 	mov	a,r6
      001EDC 64 80            [12] 6174 	xrl	a,#0x80
      001EDE 85*4E F0         [24] 6175 	mov	b,(_flash_9_sloc0_1_0 + 1)
      001EE1 63 F0 80         [24] 6176 	xrl	b,#0x80
      001EE4 95 F0            [12] 6177 	subb	a,b
      001EE6 E4               [12] 6178 	clr	a
      001EE7 33               [12] 6179 	rlc	a
      001EE8 FB               [12] 6180 	mov	r3,a
      001EE9 55*51            [12] 6181 	anl	a,_flash_9_sloc2_1_0
      001EEB 60 09            [24] 6182 	jz	00141$
                                   6183 ;	888n.c:846: an[j]--;
      001EED E5*43            [12] 6184 	mov	a,_flash_9_j_1_134
      001EEF 24r44            [12] 6185 	add	a,#_flash_9_an_1_134
      001EF1 F9               [12] 6186 	mov	r1,a
      001EF2 E7               [12] 6187 	mov	a,@r1
      001EF3 FE               [12] 6188 	mov	r6,a
      001EF4 14               [12] 6189 	dec	a
      001EF5 F7               [12] 6190 	mov	@r1,a
      001EF6                       6191 00141$:
                                   6192 ;	888n.c:844: for (j=0;j<8;j++) {
      001EF6 05*43            [12] 6193 	inc	_flash_9_j_1_134
      001EF8 74 F8            [12] 6194 	mov	a,#0x100 - 0x08
      001EFA 25*43            [12] 6195 	add	a,_flash_9_j_1_134
      001EFC 50 AB            [24] 6196 	jnc	00140$
                                   6197 ;	888n.c:848: delay(5000);
      001EFE 90 13 88         [24] 6198 	mov	dptr,#0x1388
      001F01 12r00r20         [24] 6199 	lcall	_delay
                                   6200 ;	888n.c:833: for (i=0;i<85;i++) {
      001F04 05*42            [12] 6201 	inc	_flash_9_i_1_134
      001F06 C3               [12] 6202 	clr	c
      001F07 E5*42            [12] 6203 	mov	a,_flash_9_i_1_134
      001F09 64 80            [12] 6204 	xrl	a,#0x80
      001F0B 94 D5            [12] 6205 	subb	a,#0xd5
      001F0D 50 03            [24] 6206 	jnc	00317$
      001F0F 02r1Er29         [24] 6207 	ljmp	00142$
      001F12                       6208 00317$:
                                   6209 ;	888n.c:851: for (i=0;i<29;i++) {
      001F12 75*42 00         [24] 6210 	mov	_flash_9_i_1_134,#0x00
      001F15                       6211 00144$:
                                   6212 ;	888n.c:852: clear(0);
      001F15 75 82 00         [24] 6213 	mov	dpl,#0x00
      001F18 12r00rCA         [24] 6214 	lcall	_clear
                                   6215 ;	888n.c:854: t=an[0]%28;
      001F1B 75 F0 1C         [24] 6216 	mov	b,#0x1c
      001F1E E5*44            [12] 6217 	mov	a,_flash_9_an_1_134
      001F20 84               [48] 6218 	div	ab
                                   6219 ;	888n.c:855: x=dat2[t]>>5;
      001F21 E5 F0            [12] 6220 	mov	a,b
      001F23 90r00rE8         [24] 6221 	mov	dptr,#_dat2
      001F26 93               [24] 6222 	movc	a,@a+dptr
      001F27 FB               [12] 6223 	mov	r3,a
      001F28 C4               [12] 6224 	swap	a
      001F29 03               [12] 6225 	rr	a
      001F2A 54 07            [12] 6226 	anl	a,#0x07
      001F2C FA               [12] 6227 	mov	r2,a
                                   6228 ;	888n.c:856: y=(dat2[t]>>2)&0x07;
      001F2D EB               [12] 6229 	mov	a,r3
      001F2E 03               [12] 6230 	rr	a
      001F2F 03               [12] 6231 	rr	a
      001F30 54 3F            [12] 6232 	anl	a,#0x3f
      001F32 FB               [12] 6233 	mov	r3,a
      001F33 74 07            [12] 6234 	mov	a,#0x07
      001F35 5B               [12] 6235 	anl	a,r3
      001F36 F5*4C            [12] 6236 	mov	_flash_9_y_1_134,a
                                   6237 ;	888n.c:857: t=(an[0]-14)%28;
      001F38 AB*44            [24] 6238 	mov	r3,_flash_9_an_1_134
      001F3A 7E 00            [12] 6239 	mov	r6,#0x00
      001F3C EB               [12] 6240 	mov	a,r3
      001F3D 24 F2            [12] 6241 	add	a,#0xf2
      001F3F F5 82            [12] 6242 	mov	dpl,a
      001F41 EE               [12] 6243 	mov	a,r6
      001F42 34 FF            [12] 6244 	addc	a,#0xff
      001F44 F5 83            [12] 6245 	mov	dph,a
      001F46 75*00 1C         [24] 6246 	mov	__modsint_PARM_2,#0x1c
                                   6247 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      001F49 8E*01            [24] 6248 	mov	(__modsint_PARM_2 + 1),r6
      001F4B C0 02            [24] 6249 	push	ar2
      001F4D 12r00r00         [24] 6250 	lcall	__modsint
      001F50 AB 82            [24] 6251 	mov	r3,dpl
      001F52 D0 02            [24] 6252 	pop	ar2
      001F54 8B 04            [24] 6253 	mov	ar4,r3
                                   6254 ;	888n.c:858: x1=dat2[t]>>5;
      001F56 EC               [12] 6255 	mov	a,r4
      001F57 90r00rE8         [24] 6256 	mov	dptr,#_dat2
      001F5A 93               [24] 6257 	movc	a,@a+dptr
      001F5B FE               [12] 6258 	mov	r6,a
      001F5C C4               [12] 6259 	swap	a
      001F5D 03               [12] 6260 	rr	a
      001F5E 54 07            [12] 6261 	anl	a,#0x07
      001F60 FD               [12] 6262 	mov	r5,a
                                   6263 ;	888n.c:859: y1=(dat2[t]>>2)&0x07;
      001F61 EE               [12] 6264 	mov	a,r6
      001F62 03               [12] 6265 	rr	a
      001F63 03               [12] 6266 	rr	a
      001F64 54 3F            [12] 6267 	anl	a,#0x3f
      001F66 FE               [12] 6268 	mov	r6,a
      001F67 74 07            [12] 6269 	mov	a,#0x07
      001F69 5E               [12] 6270 	anl	a,r6
      001F6A FF               [12] 6271 	mov	r7,a
                                   6272 ;	888n.c:860: box_apeak_xy(x,y,0,x1,y1,7,0,1);
      001F6B 85*4C*17         [24] 6273 	mov	_box_apeak_xy_PARM_2,_flash_9_y_1_134
      001F6E 75*18 00         [24] 6274 	mov	_box_apeak_xy_PARM_3,#0x00
      001F71 8D*19            [24] 6275 	mov	_box_apeak_xy_PARM_4,r5
      001F73 8F*1A            [24] 6276 	mov	_box_apeak_xy_PARM_5,r7
      001F75 75*1B 07         [24] 6277 	mov	_box_apeak_xy_PARM_6,#0x07
      001F78 75*1C 00         [24] 6278 	mov	_box_apeak_xy_PARM_7,#0x00
      001F7B 75*1D 01         [24] 6279 	mov	_box_apeak_xy_PARM_8,#0x01
      001F7E 8A 82            [24] 6280 	mov	dpl,r2
      001F80 C0 07            [24] 6281 	push	ar7
      001F82 C0 05            [24] 6282 	push	ar5
      001F84 C0 02            [24] 6283 	push	ar2
      001F86 12r08r89         [24] 6284 	lcall	_box_apeak_xy
      001F89 D0 02            [24] 6285 	pop	ar2
      001F8B D0 05            [24] 6286 	pop	ar5
      001F8D D0 07            [24] 6287 	pop	ar7
                                   6288 ;	888n.c:861: box_apeak_xy(x,y,1,x1,y1,6,0,1);
      001F8F 85*4C*17         [24] 6289 	mov	_box_apeak_xy_PARM_2,_flash_9_y_1_134
      001F92 75*18 01         [24] 6290 	mov	_box_apeak_xy_PARM_3,#0x01
      001F95 8D*19            [24] 6291 	mov	_box_apeak_xy_PARM_4,r5
      001F97 8F*1A            [24] 6292 	mov	_box_apeak_xy_PARM_5,r7
      001F99 75*1B 06         [24] 6293 	mov	_box_apeak_xy_PARM_6,#0x06
      001F9C 75*1C 00         [24] 6294 	mov	_box_apeak_xy_PARM_7,#0x00
      001F9F 75*1D 01         [24] 6295 	mov	_box_apeak_xy_PARM_8,#0x01
      001FA2 8A 82            [24] 6296 	mov	dpl,r2
      001FA4 12r08r89         [24] 6297 	lcall	_box_apeak_xy
                                   6298 ;	888n.c:862: an[0]++; 
      001FA7 E5*44            [12] 6299 	mov	a,_flash_9_an_1_134
      001FA9 04               [12] 6300 	inc	a
      001FAA F5*44            [12] 6301 	mov	_flash_9_an_1_134,a
                                   6302 ;	888n.c:863: delay(5000);
      001FAC 90 13 88         [24] 6303 	mov	dptr,#0x1388
      001FAF 12r00r20         [24] 6304 	lcall	_delay
                                   6305 ;	888n.c:851: for (i=0;i<29;i++) {
      001FB2 05*42            [12] 6306 	inc	_flash_9_i_1_134
      001FB4 C3               [12] 6307 	clr	c
      001FB5 E5*42            [12] 6308 	mov	a,_flash_9_i_1_134
      001FB7 64 80            [12] 6309 	xrl	a,#0x80
      001FB9 94 9D            [12] 6310 	subb	a,#0x9d
      001FBB 50 03            [24] 6311 	jnc	00318$
      001FBD 02r1Fr15         [24] 6312 	ljmp	00144$
      001FC0                       6313 00318$:
                                   6314 ;	888n.c:866: for (i=0;i<16;i++) {
      001FC0 7F 00            [12] 6315 	mov	r7,#0x00
      001FC2                       6316 00146$:
                                   6317 ;	888n.c:867: clear(0);
      001FC2 75 82 00         [24] 6318 	mov	dpl,#0x00
      001FC5 C0 07            [24] 6319 	push	ar7
      001FC7 12r00rCA         [24] 6320 	lcall	_clear
                                   6321 ;	888n.c:869: t=an[0]%28;
      001FCA 75 F0 1C         [24] 6322 	mov	b,#0x1c
      001FCD E5*44            [12] 6323 	mov	a,_flash_9_an_1_134
      001FCF 84               [48] 6324 	div	ab
                                   6325 ;	888n.c:870: x=dat2[t]>>5;
      001FD0 E5 F0            [12] 6326 	mov	a,b
      001FD2 90r00rE8         [24] 6327 	mov	dptr,#_dat2
      001FD5 93               [24] 6328 	movc	a,@a+dptr
      001FD6 FE               [12] 6329 	mov	r6,a
      001FD7 C4               [12] 6330 	swap	a
      001FD8 03               [12] 6331 	rr	a
      001FD9 54 07            [12] 6332 	anl	a,#0x07
      001FDB FA               [12] 6333 	mov	r2,a
                                   6334 ;	888n.c:871: y=(dat2[t]>>2)&0x07;
      001FDC EE               [12] 6335 	mov	a,r6
      001FDD 03               [12] 6336 	rr	a
      001FDE 03               [12] 6337 	rr	a
      001FDF 54 3F            [12] 6338 	anl	a,#0x3f
      001FE1 FE               [12] 6339 	mov	r6,a
      001FE2 74 07            [12] 6340 	mov	a,#0x07
      001FE4 5E               [12] 6341 	anl	a,r6
      001FE5 F5*4C            [12] 6342 	mov	_flash_9_y_1_134,a
                                   6343 ;	888n.c:872: t=(an[0]-14)%28;
      001FE7 AD*44            [24] 6344 	mov	r5,_flash_9_an_1_134
      001FE9 7E 00            [12] 6345 	mov	r6,#0x00
      001FEB ED               [12] 6346 	mov	a,r5
      001FEC 24 F2            [12] 6347 	add	a,#0xf2
      001FEE F5 82            [12] 6348 	mov	dpl,a
      001FF0 EE               [12] 6349 	mov	a,r6
      001FF1 34 FF            [12] 6350 	addc	a,#0xff
      001FF3 F5 83            [12] 6351 	mov	dph,a
      001FF5 75*00 1C         [24] 6352 	mov	__modsint_PARM_2,#0x1c
                                   6353 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      001FF8 8E*01            [24] 6354 	mov	(__modsint_PARM_2 + 1),r6
      001FFA C0 02            [24] 6355 	push	ar2
      001FFC 12r00r00         [24] 6356 	lcall	__modsint
      001FFF AD 82            [24] 6357 	mov	r5,dpl
      002001 D0 02            [24] 6358 	pop	ar2
      002003 8D 04            [24] 6359 	mov	ar4,r5
                                   6360 ;	888n.c:873: x1=dat2[t]>>5;
      002005 EC               [12] 6361 	mov	a,r4
      002006 90r00rE8         [24] 6362 	mov	dptr,#_dat2
      002009 93               [24] 6363 	movc	a,@a+dptr
      00200A FE               [12] 6364 	mov	r6,a
      00200B C4               [12] 6365 	swap	a
      00200C 03               [12] 6366 	rr	a
      00200D 54 07            [12] 6367 	anl	a,#0x07
      00200F F5*19            [12] 6368 	mov	_box_apeak_xy_PARM_4,a
                                   6369 ;	888n.c:874: y1=(dat2[t]>>2)&0x07;
      002011 EE               [12] 6370 	mov	a,r6
      002012 03               [12] 6371 	rr	a
      002013 03               [12] 6372 	rr	a
      002014 54 3F            [12] 6373 	anl	a,#0x3f
      002016 FE               [12] 6374 	mov	r6,a
      002017 74 07            [12] 6375 	mov	a,#0x07
      002019 5E               [12] 6376 	anl	a,r6
      00201A F5*1A            [12] 6377 	mov	_box_apeak_xy_PARM_5,a
                                   6378 ;	888n.c:875: box_apeak_xy(x,y,0,x1,y1,7,1,1);
      00201C 85*4C*17         [24] 6379 	mov	_box_apeak_xy_PARM_2,_flash_9_y_1_134
      00201F 75*18 00         [24] 6380 	mov	_box_apeak_xy_PARM_3,#0x00
      002022 75*1B 07         [24] 6381 	mov	_box_apeak_xy_PARM_6,#0x07
      002025 75*1C 01         [24] 6382 	mov	_box_apeak_xy_PARM_7,#0x01
      002028 75*1D 01         [24] 6383 	mov	_box_apeak_xy_PARM_8,#0x01
      00202B 8A 82            [24] 6384 	mov	dpl,r2
      00202D 12r08r89         [24] 6385 	lcall	_box_apeak_xy
                                   6386 ;	888n.c:876: an[0]--; 
      002030 E5*44            [12] 6387 	mov	a,_flash_9_an_1_134
      002032 14               [12] 6388 	dec	a
      002033 F5*44            [12] 6389 	mov	_flash_9_an_1_134,a
                                   6390 ;	888n.c:877: delay(5000);
      002035 90 13 88         [24] 6391 	mov	dptr,#0x1388
      002038 12r00r20         [24] 6392 	lcall	_delay
      00203B D0 07            [24] 6393 	pop	ar7
                                   6394 ;	888n.c:866: for (i=0;i<16;i++) {
      00203D 0F               [12] 6395 	inc	r7
      00203E C3               [12] 6396 	clr	c
      00203F EF               [12] 6397 	mov	a,r7
      002040 64 80            [12] 6398 	xrl	a,#0x80
      002042 94 90            [12] 6399 	subb	a,#0x90
      002044 50 03            [24] 6400 	jnc	00319$
      002046 02r1FrC2         [24] 6401 	ljmp	00146$
      002049                       6402 00319$:
                                   6403 ;	888n.c:880: for (i=0;i<8;i++) {
      002049 7F 00            [12] 6404 	mov	r7,#0x00
      00204B                       6405 00148$:
                                   6406 ;	888n.c:881: line(i,i,0,0,0,i,0);
      00204B 8F*04            [24] 6407 	mov	_line_PARM_2,r7
      00204D 75*05 00         [24] 6408 	mov	_line_PARM_3,#0x00
      002050 75*06 00         [24] 6409 	mov	_line_PARM_4,#0x00
      002053 75*07 00         [24] 6410 	mov	_line_PARM_5,#0x00
      002056 8F*08            [24] 6411 	mov	_line_PARM_6,r7
      002058 75*09 00         [24] 6412 	mov	_line_PARM_7,#0x00
      00205B 8F 82            [24] 6413 	mov	dpl,r7
      00205D C0 07            [24] 6414 	push	ar7
      00205F 12r02rAD         [24] 6415 	lcall	_line
                                   6416 ;	888n.c:882: delay(5000);
      002062 90 13 88         [24] 6417 	mov	dptr,#0x1388
      002065 12r00r20         [24] 6418 	lcall	_delay
      002068 D0 07            [24] 6419 	pop	ar7
                                   6420 ;	888n.c:880: for (i=0;i<8;i++) {
      00206A 0F               [12] 6421 	inc	r7
      00206B C3               [12] 6422 	clr	c
      00206C EF               [12] 6423 	mov	a,r7
      00206D 64 80            [12] 6424 	xrl	a,#0x80
      00206F 94 88            [12] 6425 	subb	a,#0x88
      002071 40 D8            [24] 6426 	jc	00148$
                                   6427 ;	888n.c:885: for (i=1;i<7;i++) {
      002073 7F 01            [12] 6428 	mov	r7,#0x01
      002075                       6429 00150$:
                                   6430 ;	888n.c:886: line(i,i,7,7,7,i,0);
      002075 8F*04            [24] 6431 	mov	_line_PARM_2,r7
      002077 75*05 07         [24] 6432 	mov	_line_PARM_3,#0x07
      00207A 75*06 07         [24] 6433 	mov	_line_PARM_4,#0x07
      00207D 75*07 07         [24] 6434 	mov	_line_PARM_5,#0x07
      002080 8F*08            [24] 6435 	mov	_line_PARM_6,r7
      002082 75*09 00         [24] 6436 	mov	_line_PARM_7,#0x00
      002085 8F 82            [24] 6437 	mov	dpl,r7
      002087 C0 07            [24] 6438 	push	ar7
      002089 12r02rAD         [24] 6439 	lcall	_line
                                   6440 ;	888n.c:887: delay(5000);
      00208C 90 13 88         [24] 6441 	mov	dptr,#0x1388
      00208F 12r00r20         [24] 6442 	lcall	_delay
      002092 D0 07            [24] 6443 	pop	ar7
                                   6444 ;	888n.c:885: for (i=1;i<7;i++) {
      002094 0F               [12] 6445 	inc	r7
      002095 C3               [12] 6446 	clr	c
      002096 EF               [12] 6447 	mov	a,r7
      002097 64 80            [12] 6448 	xrl	a,#0x80
      002099 94 87            [12] 6449 	subb	a,#0x87
      00209B 40 D8            [24] 6450 	jc	00150$
                                   6451 ;	888n.c:890: for (i=1;i<8;i++) {
      00209D 7F 01            [12] 6452 	mov	r7,#0x01
      00209F                       6453 00152$:
                                   6454 ;	888n.c:891: clear(0);
      00209F 75 82 00         [24] 6455 	mov	dpl,#0x00
      0020A2 C0 07            [24] 6456 	push	ar7
      0020A4 12r00rCA         [24] 6457 	lcall	_clear
      0020A7 D0 07            [24] 6458 	pop	ar7
                                   6459 ;	888n.c:892: box(7,7,7,7-i,7-i,7-i,0,1);
      0020A9 74 07            [12] 6460 	mov	a,#0x07
      0020AB C3               [12] 6461 	clr	c
      0020AC 9F               [12] 6462 	subb	a,r7
      0020AD FE               [12] 6463 	mov	r6,a
      0020AE 75*0D 07         [24] 6464 	mov	_box_PARM_2,#0x07
      0020B1 75*0E 07         [24] 6465 	mov	_box_PARM_3,#0x07
      0020B4 8E*0F            [24] 6466 	mov	_box_PARM_4,r6
      0020B6 8E*10            [24] 6467 	mov	_box_PARM_5,r6
      0020B8 8E*11            [24] 6468 	mov	_box_PARM_6,r6
      0020BA 75*12 00         [24] 6469 	mov	_box_PARM_7,#0x00
      0020BD 75*13 01         [24] 6470 	mov	_box_PARM_8,#0x01
      0020C0 75 82 07         [24] 6471 	mov	dpl,#0x07
      0020C3 C0 07            [24] 6472 	push	ar7
      0020C5 12r04r53         [24] 6473 	lcall	_box
                                   6474 ;	888n.c:893: delay(10000);
      0020C8 90 27 10         [24] 6475 	mov	dptr,#0x2710
      0020CB 12r00r20         [24] 6476 	lcall	_delay
      0020CE D0 07            [24] 6477 	pop	ar7
                                   6478 ;	888n.c:890: for (i=1;i<8;i++) {
      0020D0 0F               [12] 6479 	inc	r7
      0020D1 C3               [12] 6480 	clr	c
      0020D2 EF               [12] 6481 	mov	a,r7
      0020D3 64 80            [12] 6482 	xrl	a,#0x80
      0020D5 94 88            [12] 6483 	subb	a,#0x88
      0020D7 40 C6            [24] 6484 	jc	00152$
                                   6485 ;	888n.c:896: for (i=1;i<7;i++) {
      0020D9 7F 01            [12] 6486 	mov	r7,#0x01
      0020DB                       6487 00154$:
                                   6488 ;	888n.c:897: clear(0);
      0020DB 75 82 00         [24] 6489 	mov	dpl,#0x00
      0020DE C0 07            [24] 6490 	push	ar7
      0020E0 12r00rCA         [24] 6491 	lcall	_clear
      0020E3 D0 07            [24] 6492 	pop	ar7
                                   6493 ;	888n.c:898: box(0,0,0,7-i,7-i,7-i,0,1);
      0020E5 74 07            [12] 6494 	mov	a,#0x07
      0020E7 C3               [12] 6495 	clr	c
      0020E8 9F               [12] 6496 	subb	a,r7
      0020E9 FE               [12] 6497 	mov	r6,a
      0020EA 75*0D 00         [24] 6498 	mov	_box_PARM_2,#0x00
      0020ED 75*0E 00         [24] 6499 	mov	_box_PARM_3,#0x00
      0020F0 8E*0F            [24] 6500 	mov	_box_PARM_4,r6
      0020F2 8E*10            [24] 6501 	mov	_box_PARM_5,r6
      0020F4 8E*11            [24] 6502 	mov	_box_PARM_6,r6
      0020F6 75*12 00         [24] 6503 	mov	_box_PARM_7,#0x00
      0020F9 75*13 01         [24] 6504 	mov	_box_PARM_8,#0x01
      0020FC 75 82 00         [24] 6505 	mov	dpl,#0x00
      0020FF C0 07            [24] 6506 	push	ar7
      002101 12r04r53         [24] 6507 	lcall	_box
                                   6508 ;	888n.c:899: delay(10000);
      002104 90 27 10         [24] 6509 	mov	dptr,#0x2710
      002107 12r00r20         [24] 6510 	lcall	_delay
      00210A D0 07            [24] 6511 	pop	ar7
                                   6512 ;	888n.c:896: for (i=1;i<7;i++) {
      00210C 0F               [12] 6513 	inc	r7
      00210D C3               [12] 6514 	clr	c
      00210E EF               [12] 6515 	mov	a,r7
      00210F 64 80            [12] 6516 	xrl	a,#0x80
      002111 94 87            [12] 6517 	subb	a,#0x87
      002113 40 C6            [24] 6518 	jc	00154$
                                   6519 ;	888n.c:902: for (i=1;i<8;i++) {
      002115 7F 01            [12] 6520 	mov	r7,#0x01
      002117                       6521 00156$:
                                   6522 ;	888n.c:903: clear(0);
      002117 75 82 00         [24] 6523 	mov	dpl,#0x00
      00211A C0 07            [24] 6524 	push	ar7
      00211C 12r00rCA         [24] 6525 	lcall	_clear
      00211F D0 07            [24] 6526 	pop	ar7
                                   6527 ;	888n.c:904: box(0,0,0,i,i,i,0,1);
      002121 75*0D 00         [24] 6528 	mov	_box_PARM_2,#0x00
      002124 75*0E 00         [24] 6529 	mov	_box_PARM_3,#0x00
      002127 8F*0F            [24] 6530 	mov	_box_PARM_4,r7
      002129 8F*10            [24] 6531 	mov	_box_PARM_5,r7
      00212B 8F*11            [24] 6532 	mov	_box_PARM_6,r7
      00212D 75*12 00         [24] 6533 	mov	_box_PARM_7,#0x00
      002130 75*13 01         [24] 6534 	mov	_box_PARM_8,#0x01
      002133 75 82 00         [24] 6535 	mov	dpl,#0x00
      002136 C0 07            [24] 6536 	push	ar7
      002138 12r04r53         [24] 6537 	lcall	_box
                                   6538 ;	888n.c:905: delay(10000);
      00213B 90 27 10         [24] 6539 	mov	dptr,#0x2710
      00213E 12r00r20         [24] 6540 	lcall	_delay
      002141 D0 07            [24] 6541 	pop	ar7
                                   6542 ;	888n.c:902: for (i=1;i<8;i++) {
      002143 0F               [12] 6543 	inc	r7
      002144 C3               [12] 6544 	clr	c
      002145 EF               [12] 6545 	mov	a,r7
      002146 64 80            [12] 6546 	xrl	a,#0x80
      002148 94 88            [12] 6547 	subb	a,#0x88
      00214A 40 CB            [24] 6548 	jc	00156$
                                   6549 ;	888n.c:908: for (i=1;i<7;i++) {
      00214C 7F 01            [12] 6550 	mov	r7,#0x01
      00214E                       6551 00158$:
                                   6552 ;	888n.c:909: clear(0);
      00214E 75 82 00         [24] 6553 	mov	dpl,#0x00
      002151 C0 07            [24] 6554 	push	ar7
      002153 12r00rCA         [24] 6555 	lcall	_clear
      002156 D0 07            [24] 6556 	pop	ar7
                                   6557 ;	888n.c:910: box(7,0,0,i,7-i,7-i,0,1);
      002158 74 07            [12] 6558 	mov	a,#0x07
      00215A C3               [12] 6559 	clr	c
      00215B 9F               [12] 6560 	subb	a,r7
      00215C FE               [12] 6561 	mov	r6,a
      00215D 75*0D 00         [24] 6562 	mov	_box_PARM_2,#0x00
      002160 75*0E 00         [24] 6563 	mov	_box_PARM_3,#0x00
      002163 8F*0F            [24] 6564 	mov	_box_PARM_4,r7
      002165 8E*10            [24] 6565 	mov	_box_PARM_5,r6
      002167 8E*11            [24] 6566 	mov	_box_PARM_6,r6
      002169 75*12 00         [24] 6567 	mov	_box_PARM_7,#0x00
      00216C 75*13 01         [24] 6568 	mov	_box_PARM_8,#0x01
      00216F 75 82 07         [24] 6569 	mov	dpl,#0x07
      002172 C0 07            [24] 6570 	push	ar7
      002174 12r04r53         [24] 6571 	lcall	_box
                                   6572 ;	888n.c:911: delay(10000);
      002177 90 27 10         [24] 6573 	mov	dptr,#0x2710
      00217A 12r00r20         [24] 6574 	lcall	_delay
      00217D D0 07            [24] 6575 	pop	ar7
                                   6576 ;	888n.c:908: for (i=1;i<7;i++) {
      00217F 0F               [12] 6577 	inc	r7
      002180 C3               [12] 6578 	clr	c
      002181 EF               [12] 6579 	mov	a,r7
      002182 64 80            [12] 6580 	xrl	a,#0x80
      002184 94 87            [12] 6581 	subb	a,#0x87
      002186 40 C6            [24] 6582 	jc	00158$
                                   6583 ;	888n.c:914: for (i=1;i<8;i++) {
      002188 7F 01            [12] 6584 	mov	r7,#0x01
      00218A                       6585 00160$:
                                   6586 ;	888n.c:915: box(7,0,0,7-i,i,i,1,1);
      00218A 74 07            [12] 6587 	mov	a,#0x07
      00218C C3               [12] 6588 	clr	c
      00218D 9F               [12] 6589 	subb	a,r7
      00218E F5*0F            [12] 6590 	mov	_box_PARM_4,a
      002190 75*0D 00         [24] 6591 	mov	_box_PARM_2,#0x00
      002193 75*0E 00         [24] 6592 	mov	_box_PARM_3,#0x00
      002196 8F*10            [24] 6593 	mov	_box_PARM_5,r7
      002198 8F*11            [24] 6594 	mov	_box_PARM_6,r7
      00219A 75*12 01         [24] 6595 	mov	_box_PARM_7,#0x01
      00219D 75*13 01         [24] 6596 	mov	_box_PARM_8,#0x01
      0021A0 75 82 07         [24] 6597 	mov	dpl,#0x07
      0021A3 C0 07            [24] 6598 	push	ar7
      0021A5 12r04r53         [24] 6599 	lcall	_box
                                   6600 ;	888n.c:916: delay(10000);
      0021A8 90 27 10         [24] 6601 	mov	dptr,#0x2710
      0021AB 12r00r20         [24] 6602 	lcall	_delay
      0021AE D0 07            [24] 6603 	pop	ar7
                                   6604 ;	888n.c:914: for (i=1;i<8;i++) {
      0021B0 0F               [12] 6605 	inc	r7
      0021B1 C3               [12] 6606 	clr	c
      0021B2 EF               [12] 6607 	mov	a,r7
      0021B3 64 80            [12] 6608 	xrl	a,#0x80
      0021B5 94 88            [12] 6609 	subb	a,#0x88
      0021B7 40 D1            [24] 6610 	jc	00160$
                                   6611 ;	888n.c:919: for (i=1;i<7;i++) {
      0021B9 7F 01            [12] 6612 	mov	r7,#0x01
      0021BB                       6613 00162$:
                                   6614 ;	888n.c:920: clear(0);
      0021BB 75 82 00         [24] 6615 	mov	dpl,#0x00
      0021BE C0 07            [24] 6616 	push	ar7
      0021C0 12r00rCA         [24] 6617 	lcall	_clear
      0021C3 D0 07            [24] 6618 	pop	ar7
                                   6619 ;	888n.c:921: box(0,7,7,7-i,i,i,1,1);
      0021C5 74 07            [12] 6620 	mov	a,#0x07
      0021C7 C3               [12] 6621 	clr	c
      0021C8 9F               [12] 6622 	subb	a,r7
      0021C9 F5*0F            [12] 6623 	mov	_box_PARM_4,a
      0021CB 75*0D 07         [24] 6624 	mov	_box_PARM_2,#0x07
      0021CE 75*0E 07         [24] 6625 	mov	_box_PARM_3,#0x07
      0021D1 8F*10            [24] 6626 	mov	_box_PARM_5,r7
      0021D3 8F*11            [24] 6627 	mov	_box_PARM_6,r7
      0021D5 75*12 01         [24] 6628 	mov	_box_PARM_7,#0x01
      0021D8 75*13 01         [24] 6629 	mov	_box_PARM_8,#0x01
      0021DB 75 82 00         [24] 6630 	mov	dpl,#0x00
      0021DE C0 07            [24] 6631 	push	ar7
      0021E0 12r04r53         [24] 6632 	lcall	_box
                                   6633 ;	888n.c:922: delay(10000);
      0021E3 90 27 10         [24] 6634 	mov	dptr,#0x2710
      0021E6 12r00r20         [24] 6635 	lcall	_delay
      0021E9 D0 07            [24] 6636 	pop	ar7
                                   6637 ;	888n.c:919: for (i=1;i<7;i++) {
      0021EB 0F               [12] 6638 	inc	r7
      0021EC C3               [12] 6639 	clr	c
      0021ED EF               [12] 6640 	mov	a,r7
      0021EE 64 80            [12] 6641 	xrl	a,#0x80
      0021F0 94 87            [12] 6642 	subb	a,#0x87
      0021F2 40 C7            [24] 6643 	jc	00162$
      0021F4 22               [24] 6644 	ret
                                   6645 ;------------------------------------------------------------
                                   6646 ;Allocation info for local variables in function 'flash_10'
                                   6647 ;------------------------------------------------------------
                                   6648 ;i                         Allocated with name '_flash_10_i_1_153'
                                   6649 ;j                         Allocated to registers r6 
                                   6650 ;an                        Allocated with name '_flash_10_an_1_153'
                                   6651 ;x                         Allocated to registers r3 
                                   6652 ;y                         Allocated to registers r4 
                                   6653 ;t                         Allocated to registers r5 
                                   6654 ;------------------------------------------------------------
                                   6655 ;	888n.c:926: void flash_10()
                                   6656 ;	-----------------------------------------
                                   6657 ;	 function flash_10
                                   6658 ;	-----------------------------------------
      0021F5                       6659 _flash_10:
                                   6660 ;	888n.c:930: for (i=1;i<7;i++) {
      0021F5 7F 01            [12] 6661 	mov	r7,#0x01
      0021F7                       6662 00116$:
                                   6663 ;	888n.c:931: clear(0);
      0021F7 75 82 00         [24] 6664 	mov	dpl,#0x00
      0021FA C0 07            [24] 6665 	push	ar7
      0021FC 12r00rCA         [24] 6666 	lcall	_clear
                                   6667 ;	888n.c:932: box(0,6,6,1,7,7,1,1);
      0021FF 75*0D 06         [24] 6668 	mov	_box_PARM_2,#0x06
      002202 75*0E 06         [24] 6669 	mov	_box_PARM_3,#0x06
      002205 75*0F 01         [24] 6670 	mov	_box_PARM_4,#0x01
      002208 75*10 07         [24] 6671 	mov	_box_PARM_5,#0x07
      00220B 75*11 07         [24] 6672 	mov	_box_PARM_6,#0x07
      00220E 75*12 01         [24] 6673 	mov	_box_PARM_7,#0x01
      002211 75*13 01         [24] 6674 	mov	_box_PARM_8,#0x01
      002214 75 82 00         [24] 6675 	mov	dpl,#0x00
      002217 12r04r53         [24] 6676 	lcall	_box
      00221A D0 07            [24] 6677 	pop	ar7
                                   6678 ;	888n.c:933: box(i,6,6-i,i+1,7,7-i,1,1);
      00221C 74 06            [12] 6679 	mov	a,#0x06
      00221E C3               [12] 6680 	clr	c
      00221F 9F               [12] 6681 	subb	a,r7
      002220 FE               [12] 6682 	mov	r6,a
      002221 EF               [12] 6683 	mov	a,r7
      002222 04               [12] 6684 	inc	a
      002223 FD               [12] 6685 	mov	r5,a
      002224 74 07            [12] 6686 	mov	a,#0x07
      002226 C3               [12] 6687 	clr	c
      002227 9F               [12] 6688 	subb	a,r7
      002228 FC               [12] 6689 	mov	r4,a
      002229 75*0D 06         [24] 6690 	mov	_box_PARM_2,#0x06
      00222C 8E*0E            [24] 6691 	mov	_box_PARM_3,r6
      00222E 8D*0F            [24] 6692 	mov	_box_PARM_4,r5
      002230 75*10 07         [24] 6693 	mov	_box_PARM_5,#0x07
      002233 8C*11            [24] 6694 	mov	_box_PARM_6,r4
      002235 75*12 01         [24] 6695 	mov	_box_PARM_7,#0x01
      002238 75*13 01         [24] 6696 	mov	_box_PARM_8,#0x01
      00223B 8F 82            [24] 6697 	mov	dpl,r7
      00223D C0 07            [24] 6698 	push	ar7
      00223F C0 06            [24] 6699 	push	ar6
      002241 C0 05            [24] 6700 	push	ar5
      002243 C0 04            [24] 6701 	push	ar4
      002245 12r04r53         [24] 6702 	lcall	_box
      002248 D0 04            [24] 6703 	pop	ar4
      00224A D0 05            [24] 6704 	pop	ar5
      00224C D0 06            [24] 6705 	pop	ar6
      00224E D0 07            [24] 6706 	pop	ar7
                                   6707 ;	888n.c:934: box(i,6,6,i+1,7,7,1,1);
      002250 75*0D 06         [24] 6708 	mov	_box_PARM_2,#0x06
      002253 75*0E 06         [24] 6709 	mov	_box_PARM_3,#0x06
      002256 8D*0F            [24] 6710 	mov	_box_PARM_4,r5
      002258 75*10 07         [24] 6711 	mov	_box_PARM_5,#0x07
      00225B 75*11 07         [24] 6712 	mov	_box_PARM_6,#0x07
      00225E 75*12 01         [24] 6713 	mov	_box_PARM_7,#0x01
      002261 75*13 01         [24] 6714 	mov	_box_PARM_8,#0x01
      002264 8F 82            [24] 6715 	mov	dpl,r7
      002266 C0 07            [24] 6716 	push	ar7
      002268 C0 06            [24] 6717 	push	ar6
      00226A C0 05            [24] 6718 	push	ar5
      00226C C0 04            [24] 6719 	push	ar4
      00226E 12r04r53         [24] 6720 	lcall	_box
      002271 D0 04            [24] 6721 	pop	ar4
      002273 D0 05            [24] 6722 	pop	ar5
      002275 D0 06            [24] 6723 	pop	ar6
                                   6724 ;	888n.c:935: box(0,6,6-i,1,7,7-i,1,1);
      002277 75*0D 06         [24] 6725 	mov	_box_PARM_2,#0x06
      00227A 8E*0E            [24] 6726 	mov	_box_PARM_3,r6
      00227C 75*0F 01         [24] 6727 	mov	_box_PARM_4,#0x01
      00227F 75*10 07         [24] 6728 	mov	_box_PARM_5,#0x07
      002282 8C*11            [24] 6729 	mov	_box_PARM_6,r4
      002284 75*12 01         [24] 6730 	mov	_box_PARM_7,#0x01
      002287 75*13 01         [24] 6731 	mov	_box_PARM_8,#0x01
      00228A 75 82 00         [24] 6732 	mov	dpl,#0x00
      00228D C0 06            [24] 6733 	push	ar6
      00228F C0 05            [24] 6734 	push	ar5
      002291 C0 04            [24] 6735 	push	ar4
      002293 12r04r53         [24] 6736 	lcall	_box
      002296 D0 04            [24] 6737 	pop	ar4
      002298 D0 05            [24] 6738 	pop	ar5
      00229A D0 06            [24] 6739 	pop	ar6
                                   6740 ;	888n.c:936: box(0,6-i,6,1,7-i,7,1,1);
      00229C 8E*0D            [24] 6741 	mov	_box_PARM_2,r6
      00229E 75*0E 06         [24] 6742 	mov	_box_PARM_3,#0x06
      0022A1 75*0F 01         [24] 6743 	mov	_box_PARM_4,#0x01
      0022A4 8C*10            [24] 6744 	mov	_box_PARM_5,r4
      0022A6 75*11 07         [24] 6745 	mov	_box_PARM_6,#0x07
      0022A9 75*12 01         [24] 6746 	mov	_box_PARM_7,#0x01
      0022AC 75*13 01         [24] 6747 	mov	_box_PARM_8,#0x01
      0022AF 75 82 00         [24] 6748 	mov	dpl,#0x00
      0022B2 C0 06            [24] 6749 	push	ar6
      0022B4 C0 05            [24] 6750 	push	ar5
      0022B6 C0 04            [24] 6751 	push	ar4
      0022B8 12r04r53         [24] 6752 	lcall	_box
      0022BB D0 04            [24] 6753 	pop	ar4
      0022BD D0 05            [24] 6754 	pop	ar5
      0022BF D0 06            [24] 6755 	pop	ar6
      0022C1 D0 07            [24] 6756 	pop	ar7
                                   6757 ;	888n.c:937: box(i,6-i,6-i,i+1,7-i,7-i,1,1);
      0022C3 8E*0D            [24] 6758 	mov	_box_PARM_2,r6
      0022C5 8E*0E            [24] 6759 	mov	_box_PARM_3,r6
      0022C7 8D*0F            [24] 6760 	mov	_box_PARM_4,r5
      0022C9 8C*10            [24] 6761 	mov	_box_PARM_5,r4
      0022CB 8C*11            [24] 6762 	mov	_box_PARM_6,r4
      0022CD 75*12 01         [24] 6763 	mov	_box_PARM_7,#0x01
      0022D0 75*13 01         [24] 6764 	mov	_box_PARM_8,#0x01
      0022D3 8F 82            [24] 6765 	mov	dpl,r7
      0022D5 C0 07            [24] 6766 	push	ar7
      0022D7 C0 06            [24] 6767 	push	ar6
      0022D9 C0 05            [24] 6768 	push	ar5
      0022DB C0 04            [24] 6769 	push	ar4
      0022DD 12r04r53         [24] 6770 	lcall	_box
      0022E0 D0 04            [24] 6771 	pop	ar4
      0022E2 D0 05            [24] 6772 	pop	ar5
      0022E4 D0 06            [24] 6773 	pop	ar6
      0022E6 D0 07            [24] 6774 	pop	ar7
                                   6775 ;	888n.c:938: box(i,6-i,6,i+1,7-i,7,1,1);
      0022E8 8E*0D            [24] 6776 	mov	_box_PARM_2,r6
      0022EA 75*0E 06         [24] 6777 	mov	_box_PARM_3,#0x06
      0022ED 8D*0F            [24] 6778 	mov	_box_PARM_4,r5
      0022EF 8C*10            [24] 6779 	mov	_box_PARM_5,r4
      0022F1 75*11 07         [24] 6780 	mov	_box_PARM_6,#0x07
      0022F4 75*12 01         [24] 6781 	mov	_box_PARM_7,#0x01
      0022F7 75*13 01         [24] 6782 	mov	_box_PARM_8,#0x01
      0022FA 8F 82            [24] 6783 	mov	dpl,r7
      0022FC C0 06            [24] 6784 	push	ar6
      0022FE C0 05            [24] 6785 	push	ar5
      002300 C0 04            [24] 6786 	push	ar4
      002302 12r04r53         [24] 6787 	lcall	_box
      002305 D0 04            [24] 6788 	pop	ar4
      002307 D0 05            [24] 6789 	pop	ar5
      002309 D0 06            [24] 6790 	pop	ar6
                                   6791 ;	888n.c:939: box(0,6-i,6-i,1,7-i,7-i,1,1);
      00230B 8E*0D            [24] 6792 	mov	_box_PARM_2,r6
      00230D 8E*0E            [24] 6793 	mov	_box_PARM_3,r6
      00230F 75*0F 01         [24] 6794 	mov	_box_PARM_4,#0x01
      002312 8C*10            [24] 6795 	mov	_box_PARM_5,r4
      002314 8C*11            [24] 6796 	mov	_box_PARM_6,r4
      002316 75*12 01         [24] 6797 	mov	_box_PARM_7,#0x01
      002319 75*13 01         [24] 6798 	mov	_box_PARM_8,#0x01
      00231C 75 82 00         [24] 6799 	mov	dpl,#0x00
      00231F C0 05            [24] 6800 	push	ar5
      002321 12r04r53         [24] 6801 	lcall	_box
                                   6802 ;	888n.c:940: delay(30000);
      002324 90 75 30         [24] 6803 	mov	dptr,#0x7530
      002327 12r00r20         [24] 6804 	lcall	_delay
      00232A D0 05            [24] 6805 	pop	ar5
                                   6806 ;	888n.c:930: for (i=1;i<7;i++) {
      00232C 8D 07            [24] 6807 	mov	ar7,r5
      00232E BF 07 00         [24] 6808 	cjne	r7,#0x07,00252$
      002331                       6809 00252$:
      002331 50 03            [24] 6810 	jnc	00253$
      002333 02r21rF7         [24] 6811 	ljmp	00116$
      002336                       6812 00253$:
                                   6813 ;	888n.c:943: for (i=0;i<4;i++) an[i]=6*i;
      002336 7F 00            [12] 6814 	mov	r7,#0x00
      002338                       6815 00118$:
      002338 EF               [12] 6816 	mov	a,r7
      002339 24r53            [12] 6817 	add	a,#_flash_10_an_1_153
      00233B F9               [12] 6818 	mov	r1,a
      00233C EF               [12] 6819 	mov	a,r7
      00233D 75 F0 06         [24] 6820 	mov	b,#0x06
      002340 A4               [48] 6821 	mul	ab
      002341 F7               [12] 6822 	mov	@r1,a
      002342 0F               [12] 6823 	inc	r7
      002343 BF 04 00         [24] 6824 	cjne	r7,#0x04,00254$
      002346                       6825 00254$:
      002346 40 F0            [24] 6826 	jc	00118$
                                   6827 ;	888n.c:945: for (i=0;i<35;i++) {
      002348 75*52 00         [24] 6828 	mov	_flash_10_i_1_153,#0x00
      00234B                       6829 00124$:
                                   6830 ;	888n.c:946: clear(0);
      00234B 75 82 00         [24] 6831 	mov	dpl,#0x00
      00234E 12r00rCA         [24] 6832 	lcall	_clear
                                   6833 ;	888n.c:947: for(j=0;j<4;j++) {
      002351 7E 00            [12] 6834 	mov	r6,#0x00
      002353                       6835 00120$:
                                   6836 ;	888n.c:948: t=an[j]%24;
      002353 EE               [12] 6837 	mov	a,r6
      002354 24r53            [12] 6838 	add	a,#_flash_10_an_1_153
      002356 F9               [12] 6839 	mov	r1,a
      002357 87 05            [24] 6840 	mov	ar5,@r1
      002359 75 F0 18         [24] 6841 	mov	b,#0x18
      00235C ED               [12] 6842 	mov	a,r5
      00235D 84               [48] 6843 	div	ab
                                   6844 ;	888n.c:949: x=dat3[t]>>4;
      00235E E5 F0            [12] 6845 	mov	a,b
      002360 90r01r04         [24] 6846 	mov	dptr,#_dat3
      002363 93               [24] 6847 	movc	a,@a+dptr
      002364 FC               [12] 6848 	mov	r4,a
      002365 C4               [12] 6849 	swap	a
      002366 54 0F            [12] 6850 	anl	a,#0x0f
      002368 FB               [12] 6851 	mov	r3,a
                                   6852 ;	888n.c:950: y=dat3[t]&0x0f;
      002369 53 04 0F         [24] 6853 	anl	ar4,#0x0f
                                   6854 ;	888n.c:951: box(x,y,0,x+1,y+1,1,1,1);
      00236C EB               [12] 6855 	mov	a,r3
      00236D 04               [12] 6856 	inc	a
      00236E FA               [12] 6857 	mov	r2,a
      00236F EC               [12] 6858 	mov	a,r4
      002370 04               [12] 6859 	inc	a
      002371 FF               [12] 6860 	mov	r7,a
      002372 8C*0D            [24] 6861 	mov	_box_PARM_2,r4
      002374 75*0E 00         [24] 6862 	mov	_box_PARM_3,#0x00
      002377 8A*0F            [24] 6863 	mov	_box_PARM_4,r2
      002379 8F*10            [24] 6864 	mov	_box_PARM_5,r7
      00237B 75*11 01         [24] 6865 	mov	_box_PARM_6,#0x01
      00237E 75*12 01         [24] 6866 	mov	_box_PARM_7,#0x01
      002381 75*13 01         [24] 6867 	mov	_box_PARM_8,#0x01
      002384 8B 82            [24] 6868 	mov	dpl,r3
      002386 C0 07            [24] 6869 	push	ar7
      002388 C0 06            [24] 6870 	push	ar6
      00238A C0 04            [24] 6871 	push	ar4
      00238C C0 03            [24] 6872 	push	ar3
      00238E C0 02            [24] 6873 	push	ar2
      002390 12r04r53         [24] 6874 	lcall	_box
      002393 D0 02            [24] 6875 	pop	ar2
      002395 D0 03            [24] 6876 	pop	ar3
      002397 D0 04            [24] 6877 	pop	ar4
      002399 D0 06            [24] 6878 	pop	ar6
      00239B D0 07            [24] 6879 	pop	ar7
                                   6880 ;	888n.c:952: box(x,y,6,x+1,y+1,7,1,1);
      00239D 8C*0D            [24] 6881 	mov	_box_PARM_2,r4
      00239F 75*0E 06         [24] 6882 	mov	_box_PARM_3,#0x06
      0023A2 8A*0F            [24] 6883 	mov	_box_PARM_4,r2
      0023A4 8F*10            [24] 6884 	mov	_box_PARM_5,r7
      0023A6 75*11 07         [24] 6885 	mov	_box_PARM_6,#0x07
      0023A9 75*12 01         [24] 6886 	mov	_box_PARM_7,#0x01
      0023AC 75*13 01         [24] 6887 	mov	_box_PARM_8,#0x01
      0023AF 8B 82            [24] 6888 	mov	dpl,r3
      0023B1 C0 06            [24] 6889 	push	ar6
      0023B3 12r04r53         [24] 6890 	lcall	_box
      0023B6 D0 06            [24] 6891 	pop	ar6
                                   6892 ;	888n.c:947: for(j=0;j<4;j++) {
      0023B8 0E               [12] 6893 	inc	r6
      0023B9 BE 04 00         [24] 6894 	cjne	r6,#0x04,00256$
      0023BC                       6895 00256$:
      0023BC 40 95            [24] 6896 	jc	00120$
                                   6897 ;	888n.c:954: for (j=0;j<4;j++) an[j]++; 
      0023BE 7F 00            [12] 6898 	mov	r7,#0x00
      0023C0                       6899 00122$:
      0023C0 EF               [12] 6900 	mov	a,r7
      0023C1 24r53            [12] 6901 	add	a,#_flash_10_an_1_153
      0023C3 F9               [12] 6902 	mov	r1,a
      0023C4 E7               [12] 6903 	mov	a,@r1
      0023C5 FE               [12] 6904 	mov	r6,a
      0023C6 04               [12] 6905 	inc	a
      0023C7 F7               [12] 6906 	mov	@r1,a
      0023C8 0F               [12] 6907 	inc	r7
      0023C9 BF 04 00         [24] 6908 	cjne	r7,#0x04,00258$
      0023CC                       6909 00258$:
      0023CC 40 F2            [24] 6910 	jc	00122$
                                   6911 ;	888n.c:955: delay(10000);
      0023CE 90 27 10         [24] 6912 	mov	dptr,#0x2710
      0023D1 12r00r20         [24] 6913 	lcall	_delay
                                   6914 ;	888n.c:945: for (i=0;i<35;i++) {
      0023D4 05*52            [12] 6915 	inc	_flash_10_i_1_153
      0023D6 74 DD            [12] 6916 	mov	a,#0x100 - 0x23
      0023D8 25*52            [12] 6917 	add	a,_flash_10_i_1_153
      0023DA 40 03            [24] 6918 	jc	00260$
      0023DC 02r23r4B         [24] 6919 	ljmp	00124$
      0023DF                       6920 00260$:
                                   6921 ;	888n.c:958: for (i=0;i<35;i++) {
      0023DF 75*52 00         [24] 6922 	mov	_flash_10_i_1_153,#0x00
      0023E2                       6923 00130$:
                                   6924 ;	888n.c:959: clear(0);
      0023E2 75 82 00         [24] 6925 	mov	dpl,#0x00
      0023E5 12r00rCA         [24] 6926 	lcall	_clear
                                   6927 ;	888n.c:960: for(j=0;j<4;j++) {
      0023E8 7E 00            [12] 6928 	mov	r6,#0x00
      0023EA                       6929 00126$:
                                   6930 ;	888n.c:961: t=an[j]%24;
      0023EA EE               [12] 6931 	mov	a,r6
      0023EB 24r53            [12] 6932 	add	a,#_flash_10_an_1_153
      0023ED F9               [12] 6933 	mov	r1,a
      0023EE 87 02            [24] 6934 	mov	ar2,@r1
      0023F0 75 F0 18         [24] 6935 	mov	b,#0x18
      0023F3 EA               [12] 6936 	mov	a,r2
      0023F4 84               [48] 6937 	div	ab
                                   6938 ;	888n.c:962: x=dat3[t]>>4;
      0023F5 E5 F0            [12] 6939 	mov	a,b
      0023F7 90r01r04         [24] 6940 	mov	dptr,#_dat3
      0023FA 93               [24] 6941 	movc	a,@a+dptr
      0023FB FA               [12] 6942 	mov	r2,a
      0023FC C4               [12] 6943 	swap	a
      0023FD 54 0F            [12] 6944 	anl	a,#0x0f
      0023FF FB               [12] 6945 	mov	r3,a
                                   6946 ;	888n.c:963: y=dat3[t]&0x0f;
      002400 74 0F            [12] 6947 	mov	a,#0x0f
      002402 5A               [12] 6948 	anl	a,r2
      002403 FC               [12] 6949 	mov	r4,a
                                   6950 ;	888n.c:964: box(x,y,0,x+1,y+1,1,1,1);
      002404 EB               [12] 6951 	mov	a,r3
      002405 04               [12] 6952 	inc	a
      002406 FA               [12] 6953 	mov	r2,a
      002407 EC               [12] 6954 	mov	a,r4
      002408 04               [12] 6955 	inc	a
      002409 FF               [12] 6956 	mov	r7,a
      00240A 8C*0D            [24] 6957 	mov	_box_PARM_2,r4
      00240C 75*0E 00         [24] 6958 	mov	_box_PARM_3,#0x00
      00240F 8A*0F            [24] 6959 	mov	_box_PARM_4,r2
      002411 8F*10            [24] 6960 	mov	_box_PARM_5,r7
      002413 75*11 01         [24] 6961 	mov	_box_PARM_6,#0x01
      002416 75*12 01         [24] 6962 	mov	_box_PARM_7,#0x01
      002419 75*13 01         [24] 6963 	mov	_box_PARM_8,#0x01
      00241C 8B 82            [24] 6964 	mov	dpl,r3
      00241E C0 07            [24] 6965 	push	ar7
      002420 C0 06            [24] 6966 	push	ar6
      002422 C0 04            [24] 6967 	push	ar4
      002424 C0 03            [24] 6968 	push	ar3
      002426 C0 02            [24] 6969 	push	ar2
      002428 12r04r53         [24] 6970 	lcall	_box
      00242B D0 02            [24] 6971 	pop	ar2
      00242D D0 03            [24] 6972 	pop	ar3
      00242F D0 04            [24] 6973 	pop	ar4
      002431 D0 06            [24] 6974 	pop	ar6
      002433 D0 07            [24] 6975 	pop	ar7
                                   6976 ;	888n.c:965: box(x,y,6,x+1,y+1,7,1,1);
      002435 8C*0D            [24] 6977 	mov	_box_PARM_2,r4
      002437 75*0E 06         [24] 6978 	mov	_box_PARM_3,#0x06
      00243A 8A*0F            [24] 6979 	mov	_box_PARM_4,r2
      00243C 8F*10            [24] 6980 	mov	_box_PARM_5,r7
      00243E 75*11 07         [24] 6981 	mov	_box_PARM_6,#0x07
      002441 75*12 01         [24] 6982 	mov	_box_PARM_7,#0x01
      002444 75*13 01         [24] 6983 	mov	_box_PARM_8,#0x01
      002447 8B 82            [24] 6984 	mov	dpl,r3
      002449 C0 06            [24] 6985 	push	ar6
      00244B 12r04r53         [24] 6986 	lcall	_box
      00244E D0 06            [24] 6987 	pop	ar6
                                   6988 ;	888n.c:960: for(j=0;j<4;j++) {
      002450 0E               [12] 6989 	inc	r6
      002451 BE 04 00         [24] 6990 	cjne	r6,#0x04,00261$
      002454                       6991 00261$:
      002454 40 94            [24] 6992 	jc	00126$
                                   6993 ;	888n.c:968: for (j=0;j<4;j++) an[j]--; 
      002456 7F 00            [12] 6994 	mov	r7,#0x00
      002458                       6995 00128$:
      002458 EF               [12] 6996 	mov	a,r7
      002459 24r53            [12] 6997 	add	a,#_flash_10_an_1_153
      00245B F9               [12] 6998 	mov	r1,a
      00245C E7               [12] 6999 	mov	a,@r1
      00245D FE               [12] 7000 	mov	r6,a
      00245E 14               [12] 7001 	dec	a
      00245F F7               [12] 7002 	mov	@r1,a
      002460 0F               [12] 7003 	inc	r7
      002461 BF 04 00         [24] 7004 	cjne	r7,#0x04,00263$
      002464                       7005 00263$:
      002464 40 F2            [24] 7006 	jc	00128$
                                   7007 ;	888n.c:969: delay(10000);
      002466 90 27 10         [24] 7008 	mov	dptr,#0x2710
      002469 12r00r20         [24] 7009 	lcall	_delay
                                   7010 ;	888n.c:958: for (i=0;i<35;i++) {
      00246C 05*52            [12] 7011 	inc	_flash_10_i_1_153
      00246E 74 DD            [12] 7012 	mov	a,#0x100 - 0x23
      002470 25*52            [12] 7013 	add	a,_flash_10_i_1_153
      002472 40 03            [24] 7014 	jc	00265$
      002474 02r23rE2         [24] 7015 	ljmp	00130$
      002477                       7016 00265$:
                                   7017 ;	888n.c:972: for (i=0;i<35;i++)
      002477 75*52 00         [24] 7018 	mov	_flash_10_i_1_153,#0x00
      00247A                       7019 00136$:
                                   7020 ;	888n.c:974: clear(0);
      00247A 75 82 00         [24] 7021 	mov	dpl,#0x00
      00247D 12r00rCA         [24] 7022 	lcall	_clear
                                   7023 ;	888n.c:975: for(j=0;j<4;j++) {
      002480 7E 00            [12] 7024 	mov	r6,#0x00
      002482                       7025 00132$:
                                   7026 ;	888n.c:976: t=an[j]%24;
      002482 EE               [12] 7027 	mov	a,r6
      002483 24r53            [12] 7028 	add	a,#_flash_10_an_1_153
      002485 F9               [12] 7029 	mov	r1,a
      002486 87 02            [24] 7030 	mov	ar2,@r1
      002488 75 F0 18         [24] 7031 	mov	b,#0x18
      00248B EA               [12] 7032 	mov	a,r2
      00248C 84               [48] 7033 	div	ab
                                   7034 ;	888n.c:977: x=dat3[t]>>4;
      00248D E5 F0            [12] 7035 	mov	a,b
      00248F 90r01r04         [24] 7036 	mov	dptr,#_dat3
      002492 93               [24] 7037 	movc	a,@a+dptr
      002493 FA               [12] 7038 	mov	r2,a
      002494 C4               [12] 7039 	swap	a
      002495 54 0F            [12] 7040 	anl	a,#0x0f
      002497 FB               [12] 7041 	mov	r3,a
                                   7042 ;	888n.c:978: y=dat3[t]&0x0f;
      002498 74 0F            [12] 7043 	mov	a,#0x0f
      00249A 5A               [12] 7044 	anl	a,r2
      00249B FC               [12] 7045 	mov	r4,a
                                   7046 ;	888n.c:979: box(x,0,y,x+1,1,y+1,1,1);
      00249C EB               [12] 7047 	mov	a,r3
      00249D 04               [12] 7048 	inc	a
      00249E FA               [12] 7049 	mov	r2,a
      00249F EC               [12] 7050 	mov	a,r4
      0024A0 04               [12] 7051 	inc	a
      0024A1 FF               [12] 7052 	mov	r7,a
      0024A2 75*0D 00         [24] 7053 	mov	_box_PARM_2,#0x00
      0024A5 8C*0E            [24] 7054 	mov	_box_PARM_3,r4
      0024A7 8A*0F            [24] 7055 	mov	_box_PARM_4,r2
      0024A9 75*10 01         [24] 7056 	mov	_box_PARM_5,#0x01
      0024AC 8F*11            [24] 7057 	mov	_box_PARM_6,r7
      0024AE 75*12 01         [24] 7058 	mov	_box_PARM_7,#0x01
      0024B1 75*13 01         [24] 7059 	mov	_box_PARM_8,#0x01
      0024B4 8B 82            [24] 7060 	mov	dpl,r3
      0024B6 C0 07            [24] 7061 	push	ar7
      0024B8 C0 06            [24] 7062 	push	ar6
      0024BA C0 04            [24] 7063 	push	ar4
      0024BC C0 03            [24] 7064 	push	ar3
      0024BE C0 02            [24] 7065 	push	ar2
      0024C0 12r04r53         [24] 7066 	lcall	_box
      0024C3 D0 02            [24] 7067 	pop	ar2
      0024C5 D0 03            [24] 7068 	pop	ar3
      0024C7 D0 04            [24] 7069 	pop	ar4
      0024C9 D0 06            [24] 7070 	pop	ar6
      0024CB D0 07            [24] 7071 	pop	ar7
                                   7072 ;	888n.c:980: box(x,6,y,x+1,7,y+1,1,1);
      0024CD 75*0D 06         [24] 7073 	mov	_box_PARM_2,#0x06
      0024D0 8C*0E            [24] 7074 	mov	_box_PARM_3,r4
      0024D2 8A*0F            [24] 7075 	mov	_box_PARM_4,r2
      0024D4 75*10 07         [24] 7076 	mov	_box_PARM_5,#0x07
      0024D7 8F*11            [24] 7077 	mov	_box_PARM_6,r7
      0024D9 75*12 01         [24] 7078 	mov	_box_PARM_7,#0x01
      0024DC 75*13 01         [24] 7079 	mov	_box_PARM_8,#0x01
      0024DF 8B 82            [24] 7080 	mov	dpl,r3
      0024E1 C0 06            [24] 7081 	push	ar6
      0024E3 12r04r53         [24] 7082 	lcall	_box
      0024E6 D0 06            [24] 7083 	pop	ar6
                                   7084 ;	888n.c:975: for(j=0;j<4;j++) {
      0024E8 0E               [12] 7085 	inc	r6
      0024E9 BE 04 00         [24] 7086 	cjne	r6,#0x04,00266$
      0024EC                       7087 00266$:
      0024EC 40 94            [24] 7088 	jc	00132$
                                   7089 ;	888n.c:982: for (j=0;j<4;j++) an[j]++; 
      0024EE 7F 00            [12] 7090 	mov	r7,#0x00
      0024F0                       7091 00134$:
      0024F0 EF               [12] 7092 	mov	a,r7
      0024F1 24r53            [12] 7093 	add	a,#_flash_10_an_1_153
      0024F3 F9               [12] 7094 	mov	r1,a
      0024F4 E7               [12] 7095 	mov	a,@r1
      0024F5 FE               [12] 7096 	mov	r6,a
      0024F6 04               [12] 7097 	inc	a
      0024F7 F7               [12] 7098 	mov	@r1,a
      0024F8 0F               [12] 7099 	inc	r7
      0024F9 BF 04 00         [24] 7100 	cjne	r7,#0x04,00268$
      0024FC                       7101 00268$:
      0024FC 40 F2            [24] 7102 	jc	00134$
                                   7103 ;	888n.c:983: delay(10000);
      0024FE 90 27 10         [24] 7104 	mov	dptr,#0x2710
      002501 12r00r20         [24] 7105 	lcall	_delay
                                   7106 ;	888n.c:972: for (i=0;i<35;i++)
      002504 05*52            [12] 7107 	inc	_flash_10_i_1_153
      002506 74 DD            [12] 7108 	mov	a,#0x100 - 0x23
      002508 25*52            [12] 7109 	add	a,_flash_10_i_1_153
      00250A 40 03            [24] 7110 	jc	00270$
      00250C 02r24r7A         [24] 7111 	ljmp	00136$
      00250F                       7112 00270$:
                                   7113 ;	888n.c:986: for (i=0;i<36;i++) {
      00250F 7F 00            [12] 7114 	mov	r7,#0x00
      002511                       7115 00142$:
                                   7116 ;	888n.c:987: clear(0);
      002511 75 82 00         [24] 7117 	mov	dpl,#0x00
      002514 C0 07            [24] 7118 	push	ar7
      002516 12r00rCA         [24] 7119 	lcall	_clear
      002519 D0 07            [24] 7120 	pop	ar7
                                   7121 ;	888n.c:988: for(j=0;j<4;j++) {
      00251B 7E 00            [12] 7122 	mov	r6,#0x00
      00251D                       7123 00138$:
                                   7124 ;	888n.c:989: t=an[j]%24;
      00251D EE               [12] 7125 	mov	a,r6
      00251E 24r53            [12] 7126 	add	a,#_flash_10_an_1_153
      002520 F9               [12] 7127 	mov	r1,a
      002521 87 02            [24] 7128 	mov	ar2,@r1
      002523 75 F0 18         [24] 7129 	mov	b,#0x18
      002526 EA               [12] 7130 	mov	a,r2
      002527 84               [48] 7131 	div	ab
                                   7132 ;	888n.c:990: x=dat3[t]>>4;
      002528 E5 F0            [12] 7133 	mov	a,b
      00252A 90r01r04         [24] 7134 	mov	dptr,#_dat3
      00252D 93               [24] 7135 	movc	a,@a+dptr
      00252E FD               [12] 7136 	mov	r5,a
      00252F C4               [12] 7137 	swap	a
      002530 54 0F            [12] 7138 	anl	a,#0x0f
      002532 FB               [12] 7139 	mov	r3,a
                                   7140 ;	888n.c:991: y=dat3[t]&0x0f;
      002533 74 0F            [12] 7141 	mov	a,#0x0f
      002535 5D               [12] 7142 	anl	a,r5
      002536 FC               [12] 7143 	mov	r4,a
                                   7144 ;	888n.c:992: box(x,0,y,x+1,1,y+1,1,1);
      002537 EB               [12] 7145 	mov	a,r3
      002538 04               [12] 7146 	inc	a
      002539 FD               [12] 7147 	mov	r5,a
      00253A EC               [12] 7148 	mov	a,r4
      00253B 04               [12] 7149 	inc	a
      00253C FA               [12] 7150 	mov	r2,a
      00253D 75*0D 00         [24] 7151 	mov	_box_PARM_2,#0x00
      002540 8C*0E            [24] 7152 	mov	_box_PARM_3,r4
      002542 8D*0F            [24] 7153 	mov	_box_PARM_4,r5
      002544 75*10 01         [24] 7154 	mov	_box_PARM_5,#0x01
      002547 8A*11            [24] 7155 	mov	_box_PARM_6,r2
      002549 75*12 01         [24] 7156 	mov	_box_PARM_7,#0x01
      00254C 75*13 01         [24] 7157 	mov	_box_PARM_8,#0x01
      00254F 8B 82            [24] 7158 	mov	dpl,r3
      002551 C0 07            [24] 7159 	push	ar7
      002553 C0 06            [24] 7160 	push	ar6
      002555 C0 05            [24] 7161 	push	ar5
      002557 C0 04            [24] 7162 	push	ar4
      002559 C0 03            [24] 7163 	push	ar3
      00255B C0 02            [24] 7164 	push	ar2
      00255D 12r04r53         [24] 7165 	lcall	_box
      002560 D0 02            [24] 7166 	pop	ar2
      002562 D0 03            [24] 7167 	pop	ar3
      002564 D0 04            [24] 7168 	pop	ar4
      002566 D0 05            [24] 7169 	pop	ar5
                                   7170 ;	888n.c:993: box(x,6,y,x+1,7,y+1,1,1);
      002568 75*0D 06         [24] 7171 	mov	_box_PARM_2,#0x06
      00256B 8C*0E            [24] 7172 	mov	_box_PARM_3,r4
      00256D 8D*0F            [24] 7173 	mov	_box_PARM_4,r5
      00256F 75*10 07         [24] 7174 	mov	_box_PARM_5,#0x07
      002572 8A*11            [24] 7175 	mov	_box_PARM_6,r2
      002574 75*12 01         [24] 7176 	mov	_box_PARM_7,#0x01
      002577 75*13 01         [24] 7177 	mov	_box_PARM_8,#0x01
      00257A 8B 82            [24] 7178 	mov	dpl,r3
      00257C 12r04r53         [24] 7179 	lcall	_box
      00257F D0 06            [24] 7180 	pop	ar6
      002581 D0 07            [24] 7181 	pop	ar7
                                   7182 ;	888n.c:988: for(j=0;j<4;j++) {
      002583 0E               [12] 7183 	inc	r6
      002584 BE 04 00         [24] 7184 	cjne	r6,#0x04,00271$
      002587                       7185 00271$:
      002587 40 94            [24] 7186 	jc	00138$
                                   7187 ;	888n.c:995: for (j=0;j<4;j++) an[j]--; 
      002589 7E 00            [12] 7188 	mov	r6,#0x00
      00258B                       7189 00140$:
      00258B EE               [12] 7190 	mov	a,r6
      00258C 24r53            [12] 7191 	add	a,#_flash_10_an_1_153
      00258E F9               [12] 7192 	mov	r1,a
      00258F E7               [12] 7193 	mov	a,@r1
      002590 FD               [12] 7194 	mov	r5,a
      002591 14               [12] 7195 	dec	a
      002592 F7               [12] 7196 	mov	@r1,a
      002593 0E               [12] 7197 	inc	r6
      002594 BE 04 00         [24] 7198 	cjne	r6,#0x04,00273$
      002597                       7199 00273$:
      002597 40 F2            [24] 7200 	jc	00140$
                                   7201 ;	888n.c:996: delay(10000);
      002599 90 27 10         [24] 7202 	mov	dptr,#0x2710
      00259C C0 07            [24] 7203 	push	ar7
      00259E 12r00r20         [24] 7204 	lcall	_delay
      0025A1 D0 07            [24] 7205 	pop	ar7
                                   7206 ;	888n.c:986: for (i=0;i<36;i++) {
      0025A3 0F               [12] 7207 	inc	r7
      0025A4 BF 24 00         [24] 7208 	cjne	r7,#0x24,00275$
      0025A7                       7209 00275$:
      0025A7 50 03            [24] 7210 	jnc	00276$
      0025A9 02r25r11         [24] 7211 	ljmp	00142$
      0025AC                       7212 00276$:
                                   7213 ;	888n.c:999: for (i=6;i>0;i--) {
      0025AC 7F 06            [12] 7214 	mov	r7,#0x06
      0025AE                       7215 00144$:
                                   7216 ;	888n.c:1000: clear(0);
      0025AE 75 82 00         [24] 7217 	mov	dpl,#0x00
      0025B1 C0 07            [24] 7218 	push	ar7
      0025B3 12r00rCA         [24] 7219 	lcall	_clear
                                   7220 ;	888n.c:1001: box(0,6,6,1,7,7,1,1);
      0025B6 75*0D 06         [24] 7221 	mov	_box_PARM_2,#0x06
      0025B9 75*0E 06         [24] 7222 	mov	_box_PARM_3,#0x06
      0025BC 75*0F 01         [24] 7223 	mov	_box_PARM_4,#0x01
      0025BF 75*10 07         [24] 7224 	mov	_box_PARM_5,#0x07
      0025C2 75*11 07         [24] 7225 	mov	_box_PARM_6,#0x07
      0025C5 75*12 01         [24] 7226 	mov	_box_PARM_7,#0x01
      0025C8 75*13 01         [24] 7227 	mov	_box_PARM_8,#0x01
      0025CB 75 82 00         [24] 7228 	mov	dpl,#0x00
      0025CE 12r04r53         [24] 7229 	lcall	_box
      0025D1 D0 07            [24] 7230 	pop	ar7
                                   7231 ;	888n.c:1002: box(i,6,6-i,i+1,7,7-i,1,1);
      0025D3 74 06            [12] 7232 	mov	a,#0x06
      0025D5 C3               [12] 7233 	clr	c
      0025D6 9F               [12] 7234 	subb	a,r7
      0025D7 FE               [12] 7235 	mov	r6,a
      0025D8 EF               [12] 7236 	mov	a,r7
      0025D9 04               [12] 7237 	inc	a
      0025DA FD               [12] 7238 	mov	r5,a
      0025DB 74 07            [12] 7239 	mov	a,#0x07
      0025DD C3               [12] 7240 	clr	c
      0025DE 9F               [12] 7241 	subb	a,r7
      0025DF FC               [12] 7242 	mov	r4,a
      0025E0 75*0D 06         [24] 7243 	mov	_box_PARM_2,#0x06
      0025E3 8E*0E            [24] 7244 	mov	_box_PARM_3,r6
      0025E5 8D*0F            [24] 7245 	mov	_box_PARM_4,r5
      0025E7 75*10 07         [24] 7246 	mov	_box_PARM_5,#0x07
      0025EA 8C*11            [24] 7247 	mov	_box_PARM_6,r4
      0025EC 75*12 01         [24] 7248 	mov	_box_PARM_7,#0x01
      0025EF 75*13 01         [24] 7249 	mov	_box_PARM_8,#0x01
      0025F2 8F 82            [24] 7250 	mov	dpl,r7
      0025F4 C0 07            [24] 7251 	push	ar7
      0025F6 C0 06            [24] 7252 	push	ar6
      0025F8 C0 05            [24] 7253 	push	ar5
      0025FA C0 04            [24] 7254 	push	ar4
      0025FC 12r04r53         [24] 7255 	lcall	_box
      0025FF D0 04            [24] 7256 	pop	ar4
      002601 D0 05            [24] 7257 	pop	ar5
      002603 D0 06            [24] 7258 	pop	ar6
      002605 D0 07            [24] 7259 	pop	ar7
                                   7260 ;	888n.c:1003: box(i,6,6,i+1,7,7,1,1);
      002607 75*0D 06         [24] 7261 	mov	_box_PARM_2,#0x06
      00260A 75*0E 06         [24] 7262 	mov	_box_PARM_3,#0x06
      00260D 8D*0F            [24] 7263 	mov	_box_PARM_4,r5
      00260F 75*10 07         [24] 7264 	mov	_box_PARM_5,#0x07
      002612 75*11 07         [24] 7265 	mov	_box_PARM_6,#0x07
      002615 75*12 01         [24] 7266 	mov	_box_PARM_7,#0x01
      002618 75*13 01         [24] 7267 	mov	_box_PARM_8,#0x01
      00261B 8F 82            [24] 7268 	mov	dpl,r7
      00261D C0 07            [24] 7269 	push	ar7
      00261F C0 06            [24] 7270 	push	ar6
      002621 C0 05            [24] 7271 	push	ar5
      002623 C0 04            [24] 7272 	push	ar4
      002625 12r04r53         [24] 7273 	lcall	_box
      002628 D0 04            [24] 7274 	pop	ar4
      00262A D0 05            [24] 7275 	pop	ar5
      00262C D0 06            [24] 7276 	pop	ar6
                                   7277 ;	888n.c:1004: box(0,6,6-i,1,7,7-i,1,1);
      00262E 75*0D 06         [24] 7278 	mov	_box_PARM_2,#0x06
      002631 8E*0E            [24] 7279 	mov	_box_PARM_3,r6
      002633 75*0F 01         [24] 7280 	mov	_box_PARM_4,#0x01
      002636 75*10 07         [24] 7281 	mov	_box_PARM_5,#0x07
      002639 8C*11            [24] 7282 	mov	_box_PARM_6,r4
      00263B 75*12 01         [24] 7283 	mov	_box_PARM_7,#0x01
      00263E 75*13 01         [24] 7284 	mov	_box_PARM_8,#0x01
      002641 75 82 00         [24] 7285 	mov	dpl,#0x00
      002644 C0 06            [24] 7286 	push	ar6
      002646 C0 05            [24] 7287 	push	ar5
      002648 C0 04            [24] 7288 	push	ar4
      00264A 12r04r53         [24] 7289 	lcall	_box
      00264D D0 04            [24] 7290 	pop	ar4
      00264F D0 05            [24] 7291 	pop	ar5
      002651 D0 06            [24] 7292 	pop	ar6
                                   7293 ;	888n.c:1005: box(0,6-i,6,1,7-i,7,1,1);
      002653 8E*0D            [24] 7294 	mov	_box_PARM_2,r6
      002655 75*0E 06         [24] 7295 	mov	_box_PARM_3,#0x06
      002658 75*0F 01         [24] 7296 	mov	_box_PARM_4,#0x01
      00265B 8C*10            [24] 7297 	mov	_box_PARM_5,r4
      00265D 75*11 07         [24] 7298 	mov	_box_PARM_6,#0x07
      002660 75*12 01         [24] 7299 	mov	_box_PARM_7,#0x01
      002663 75*13 01         [24] 7300 	mov	_box_PARM_8,#0x01
      002666 75 82 00         [24] 7301 	mov	dpl,#0x00
      002669 C0 06            [24] 7302 	push	ar6
      00266B C0 05            [24] 7303 	push	ar5
      00266D C0 04            [24] 7304 	push	ar4
      00266F 12r04r53         [24] 7305 	lcall	_box
      002672 D0 04            [24] 7306 	pop	ar4
      002674 D0 05            [24] 7307 	pop	ar5
      002676 D0 06            [24] 7308 	pop	ar6
      002678 D0 07            [24] 7309 	pop	ar7
                                   7310 ;	888n.c:1006: box(i,6-i,6-i,i+1,7-i,7-i,1,1);
      00267A 8E*0D            [24] 7311 	mov	_box_PARM_2,r6
      00267C 8E*0E            [24] 7312 	mov	_box_PARM_3,r6
      00267E 8D*0F            [24] 7313 	mov	_box_PARM_4,r5
      002680 8C*10            [24] 7314 	mov	_box_PARM_5,r4
      002682 8C*11            [24] 7315 	mov	_box_PARM_6,r4
      002684 75*12 01         [24] 7316 	mov	_box_PARM_7,#0x01
      002687 75*13 01         [24] 7317 	mov	_box_PARM_8,#0x01
      00268A 8F 82            [24] 7318 	mov	dpl,r7
      00268C C0 07            [24] 7319 	push	ar7
      00268E C0 06            [24] 7320 	push	ar6
      002690 C0 05            [24] 7321 	push	ar5
      002692 C0 04            [24] 7322 	push	ar4
      002694 12r04r53         [24] 7323 	lcall	_box
      002697 D0 04            [24] 7324 	pop	ar4
      002699 D0 05            [24] 7325 	pop	ar5
      00269B D0 06            [24] 7326 	pop	ar6
      00269D D0 07            [24] 7327 	pop	ar7
                                   7328 ;	888n.c:1007: box(i,6-i,6,i+1,7-i,7,1,1);
      00269F 8E*0D            [24] 7329 	mov	_box_PARM_2,r6
      0026A1 75*0E 06         [24] 7330 	mov	_box_PARM_3,#0x06
      0026A4 8D*0F            [24] 7331 	mov	_box_PARM_4,r5
      0026A6 8C*10            [24] 7332 	mov	_box_PARM_5,r4
      0026A8 75*11 07         [24] 7333 	mov	_box_PARM_6,#0x07
      0026AB 75*12 01         [24] 7334 	mov	_box_PARM_7,#0x01
      0026AE 75*13 01         [24] 7335 	mov	_box_PARM_8,#0x01
      0026B1 8F 82            [24] 7336 	mov	dpl,r7
      0026B3 C0 07            [24] 7337 	push	ar7
      0026B5 C0 06            [24] 7338 	push	ar6
      0026B7 C0 04            [24] 7339 	push	ar4
      0026B9 12r04r53         [24] 7340 	lcall	_box
      0026BC D0 04            [24] 7341 	pop	ar4
      0026BE D0 06            [24] 7342 	pop	ar6
                                   7343 ;	888n.c:1008: box(0,6-i,6-i,1,7-i,7-i,1,1);
      0026C0 8E*0D            [24] 7344 	mov	_box_PARM_2,r6
      0026C2 8E*0E            [24] 7345 	mov	_box_PARM_3,r6
      0026C4 75*0F 01         [24] 7346 	mov	_box_PARM_4,#0x01
      0026C7 8C*10            [24] 7347 	mov	_box_PARM_5,r4
      0026C9 8C*11            [24] 7348 	mov	_box_PARM_6,r4
      0026CB 75*12 01         [24] 7349 	mov	_box_PARM_7,#0x01
      0026CE 75*13 01         [24] 7350 	mov	_box_PARM_8,#0x01
      0026D1 75 82 00         [24] 7351 	mov	dpl,#0x00
      0026D4 12r04r53         [24] 7352 	lcall	_box
                                   7353 ;	888n.c:1009: delay(30000);
      0026D7 90 75 30         [24] 7354 	mov	dptr,#0x7530
      0026DA 12r00r20         [24] 7355 	lcall	_delay
      0026DD D0 07            [24] 7356 	pop	ar7
                                   7357 ;	888n.c:999: for (i=6;i>0;i--) {
      0026DF DF 01            [24] 7358 	djnz	r7,00277$
      0026E1 22               [24] 7359 	ret
      0026E2                       7360 00277$:
      0026E2 02r25rAE         [24] 7361 	ljmp	00144$
      0026E5 22               [24] 7362 	ret
                                   7363 ;------------------------------------------------------------
                                   7364 ;Allocation info for local variables in function 'flash_11'
                                   7365 ;------------------------------------------------------------
                                   7366 ;i                         Allocated to registers r6 
                                   7367 ;j                         Allocated to registers r7 
                                   7368 ;t                         Allocated to registers r4 
                                   7369 ;x                         Allocated to registers r4 
                                   7370 ;y                         Allocated to registers r5 
                                   7371 ;------------------------------------------------------------
                                   7372 ;	888n.c:1013: void flash_11()
                                   7373 ;	-----------------------------------------
                                   7374 ;	 function flash_11
                                   7375 ;	-----------------------------------------
      0026E6                       7376 _flash_11:
                                   7377 ;	888n.c:1019: for (j=0; j<5; j++) {
      0026E6 7F 00            [12] 7378 	mov	r7,#0x00
                                   7379 ;	888n.c:1020: for (i=0; i<13; i++) {
      0026E8                       7380 00125$:
      0026E8 7E 00            [12] 7381 	mov	r6,#0x00
      0026EA                       7382 00110$:
                                   7383 ;	888n.c:1021: if (daa[i]>>4) {
      0026EA EE               [12] 7384 	mov	a,r6
      0026EB 90r01r34         [24] 7385 	mov	dptr,#_flash_11_daa_1_164
      0026EE 93               [24] 7386 	movc	a,@a+dptr
      0026EF FD               [12] 7387 	mov	r5,a
      0026F0 C4               [12] 7388 	swap	a
      0026F1 54 0F            [12] 7389 	anl	a,#0x0f
      0026F3 FC               [12] 7390 	mov	r4,a
      0026F4 60 2A            [24] 7391 	jz	00102$
                                   7392 ;	888n.c:1022: t=daa[i]&0x0f;
      0026F6 74 0F            [12] 7393 	mov	a,#0x0f
      0026F8 5D               [12] 7394 	anl	a,r5
                                   7395 ;	888n.c:1023: line (0,0,t+1,0,7,t+1,1);
      0026F9 FC               [12] 7396 	mov	r4,a
      0026FA 04               [12] 7397 	inc	a
      0026FB FB               [12] 7398 	mov	r3,a
      0026FC 75*04 00         [24] 7399 	mov	_line_PARM_2,#0x00
      0026FF 8B*05            [24] 7400 	mov	_line_PARM_3,r3
      002701 75*06 00         [24] 7401 	mov	_line_PARM_4,#0x00
      002704 75*07 07         [24] 7402 	mov	_line_PARM_5,#0x07
      002707 8B*08            [24] 7403 	mov	_line_PARM_6,r3
      002709 75*09 01         [24] 7404 	mov	_line_PARM_7,#0x01
      00270C 75 82 00         [24] 7405 	mov	dpl,#0x00
      00270F C0 07            [24] 7406 	push	ar7
      002711 C0 06            [24] 7407 	push	ar6
      002713 C0 04            [24] 7408 	push	ar4
      002715 12r02rAD         [24] 7409 	lcall	_line
      002718 D0 04            [24] 7410 	pop	ar4
      00271A D0 06            [24] 7411 	pop	ar6
      00271C D0 07            [24] 7412 	pop	ar7
      00271E 80 02            [24] 7413 	sjmp	00103$
      002720                       7414 00102$:
                                   7415 ;	888n.c:1025: t=daa[i];
      002720 8D 04            [24] 7416 	mov	ar4,r5
      002722                       7417 00103$:
                                   7418 ;	888n.c:1027: line (0,0,t,0,7,t,1);
      002722 75*04 00         [24] 7419 	mov	_line_PARM_2,#0x00
      002725 8C*05            [24] 7420 	mov	_line_PARM_3,r4
      002727 75*06 00         [24] 7421 	mov	_line_PARM_4,#0x00
      00272A 75*07 07         [24] 7422 	mov	_line_PARM_5,#0x07
      00272D 8C*08            [24] 7423 	mov	_line_PARM_6,r4
      00272F 75*09 01         [24] 7424 	mov	_line_PARM_7,#0x01
      002732 75 82 00         [24] 7425 	mov	dpl,#0x00
      002735 C0 07            [24] 7426 	push	ar7
      002737 C0 06            [24] 7427 	push	ar6
      002739 12r02rAD         [24] 7428 	lcall	_line
                                   7429 ;	888n.c:1028: transss();
      00273C 12r0Fr83         [24] 7430 	lcall	_transss
                                   7431 ;	888n.c:1029: delay(10000);
      00273F 90 27 10         [24] 7432 	mov	dptr,#0x2710
      002742 12r00r20         [24] 7433 	lcall	_delay
      002745 D0 06            [24] 7434 	pop	ar6
      002747 D0 07            [24] 7435 	pop	ar7
                                   7436 ;	888n.c:1020: for (i=0; i<13; i++) {
      002749 0E               [12] 7437 	inc	r6
      00274A BE 0D 00         [24] 7438 	cjne	r6,#0x0d,00165$
      00274D                       7439 00165$:
      00274D 40 9B            [24] 7440 	jc	00110$
                                   7441 ;	888n.c:1019: for (j=0; j<5; j++) {
      00274F 0F               [12] 7442 	inc	r7
      002750 BF 05 00         [24] 7443 	cjne	r7,#0x05,00167$
      002753                       7444 00167$:
      002753 40 93            [24] 7445 	jc	00125$
                                   7446 ;	888n.c:1033: for (j=1; j<8; j++) {
      002755 7F 01            [12] 7447 	mov	r7,#0x01
      002757                       7448 00116$:
                                   7449 ;	888n.c:1036: for (i=0; i<24; i+=j) {
      002757 7E 00            [12] 7450 	mov	r6,#0x00
      002759                       7451 00114$:
                                   7452 ;	888n.c:1037: x=dat3[i]>>4;
      002759 EE               [12] 7453 	mov	a,r6
      00275A 90r01r04         [24] 7454 	mov	dptr,#_dat3
      00275D 93               [24] 7455 	movc	a,@a+dptr
      00275E FD               [12] 7456 	mov	r5,a
      00275F C4               [12] 7457 	swap	a
      002760 54 0F            [12] 7458 	anl	a,#0x0f
      002762 FC               [12] 7459 	mov	r4,a
                                   7460 ;	888n.c:1038: y=dat3[i]&0x0f;
      002763 53 05 0F         [24] 7461 	anl	ar5,#0x0f
                                   7462 ;	888n.c:1039: box_apeak_xy(0, x, y, 0, x+1, y+1, 1, 1);
      002766 EC               [12] 7463 	mov	a,r4
      002767 04               [12] 7464 	inc	a
      002768 F5*1A            [12] 7465 	mov	_box_apeak_xy_PARM_5,a
      00276A ED               [12] 7466 	mov	a,r5
      00276B 04               [12] 7467 	inc	a
      00276C F5*1B            [12] 7468 	mov	_box_apeak_xy_PARM_6,a
      00276E 8C*17            [24] 7469 	mov	_box_apeak_xy_PARM_2,r4
      002770 8D*18            [24] 7470 	mov	_box_apeak_xy_PARM_3,r5
      002772 75*19 00         [24] 7471 	mov	_box_apeak_xy_PARM_4,#0x00
      002775 75*1C 01         [24] 7472 	mov	_box_apeak_xy_PARM_7,#0x01
      002778 75*1D 01         [24] 7473 	mov	_box_apeak_xy_PARM_8,#0x01
      00277B 75 82 00         [24] 7474 	mov	dpl,#0x00
      00277E C0 07            [24] 7475 	push	ar7
      002780 C0 06            [24] 7476 	push	ar6
      002782 12r08r89         [24] 7477 	lcall	_box_apeak_xy
                                   7478 ;	888n.c:1040: transss();
      002785 12r0Fr83         [24] 7479 	lcall	_transss
                                   7480 ;	888n.c:1041: delay(10000);
      002788 90 27 10         [24] 7481 	mov	dptr,#0x2710
      00278B 12r00r20         [24] 7482 	lcall	_delay
      00278E D0 06            [24] 7483 	pop	ar6
      002790 D0 07            [24] 7484 	pop	ar7
                                   7485 ;	888n.c:1036: for (i=0; i<24; i+=j) {
      002792 EF               [12] 7486 	mov	a,r7
      002793 2E               [12] 7487 	add	a,r6
      002794 FE               [12] 7488 	mov	r6,a
      002795 BE 18 00         [24] 7489 	cjne	r6,#0x18,00169$
      002798                       7490 00169$:
      002798 40 BF            [24] 7491 	jc	00114$
                                   7492 ;	888n.c:1033: for (j=1; j<8; j++) {
      00279A 0F               [12] 7493 	inc	r7
      00279B BF 08 00         [24] 7494 	cjne	r7,#0x08,00171$
      00279E                       7495 00171$:
      00279E 40 B7            [24] 7496 	jc	00116$
                                   7497 ;	888n.c:1045: for (j=1;j<8;j++)
      0027A0 7F 01            [12] 7498 	mov	r7,#0x01
      0027A2                       7499 00120$:
                                   7500 ;	888n.c:1049: for (i=0; i<24; i+=j) {
      0027A2 7E 00            [12] 7501 	mov	r6,#0x00
      0027A4                       7502 00118$:
                                   7503 ;	888n.c:1050: x=dat3[i]>>4;
      0027A4 EE               [12] 7504 	mov	a,r6
      0027A5 90r01r04         [24] 7505 	mov	dptr,#_dat3
      0027A8 93               [24] 7506 	movc	a,@a+dptr
      0027A9 FD               [12] 7507 	mov	r5,a
      0027AA C4               [12] 7508 	swap	a
      0027AB 54 0F            [12] 7509 	anl	a,#0x0f
      0027AD F5*00            [12] 7510 	mov	_point_PARM_2,a
                                   7511 ;	888n.c:1051: y=dat3[i]&0x0f;
      0027AF 74 0F            [12] 7512 	mov	a,#0x0f
      0027B1 5D               [12] 7513 	anl	a,r5
      0027B2 F5*01            [12] 7514 	mov	_point_PARM_3,a
                                   7515 ;	888n.c:1052: point (0,x,y,1);
      0027B4 75*02 01         [24] 7516 	mov	_point_PARM_4,#0x01
      0027B7 75 82 00         [24] 7517 	mov	dpl,#0x00
      0027BA C0 07            [24] 7518 	push	ar7
      0027BC C0 06            [24] 7519 	push	ar6
      0027BE 12r01rB1         [24] 7520 	lcall	_point
                                   7521 ;	888n.c:1053: transss();
      0027C1 12r0Fr83         [24] 7522 	lcall	_transss
                                   7523 ;	888n.c:1054: delay(10000);
      0027C4 90 27 10         [24] 7524 	mov	dptr,#0x2710
      0027C7 12r00r20         [24] 7525 	lcall	_delay
      0027CA D0 06            [24] 7526 	pop	ar6
      0027CC D0 07            [24] 7527 	pop	ar7
                                   7528 ;	888n.c:1049: for (i=0; i<24; i+=j) {
      0027CE EF               [12] 7529 	mov	a,r7
      0027CF 2E               [12] 7530 	add	a,r6
      0027D0 FE               [12] 7531 	mov	r6,a
      0027D1 BE 18 00         [24] 7532 	cjne	r6,#0x18,00173$
      0027D4                       7533 00173$:
      0027D4 40 CE            [24] 7534 	jc	00118$
                                   7535 ;	888n.c:1045: for (j=1;j<8;j++)
      0027D6 0F               [12] 7536 	inc	r7
      0027D7 BF 08 00         [24] 7537 	cjne	r7,#0x08,00175$
      0027DA                       7538 00175$:
      0027DA 40 C6            [24] 7539 	jc	00120$
      0027DC 22               [24] 7540 	ret
                                   7541 ;------------------------------------------------------------
                                   7542 ;Allocation info for local variables in function 'main'
                                   7543 ;------------------------------------------------------------
                                   7544 ;	888n.c:1060: void main()
                                   7545 ;	-----------------------------------------
                                   7546 ;	 function main
                                   7547 ;	-----------------------------------------
      0027DD                       7548 _main:
                                   7549 ;	888n.c:1062: sinter();
      0027DD 12r00r00         [24] 7550 	lcall	_sinter
                                   7551 ;	888n.c:1064: while (1) {
      0027E0                       7552 00102$:
                                   7553 ;	888n.c:1069: clear(0);
      0027E0 75 82 00         [24] 7554 	mov	dpl,#0x00
      0027E3 12r00rCA         [24] 7555 	lcall	_clear
                                   7556 ;	888n.c:1070: flash_2();
      0027E6 12r10r32         [24] 7557 	lcall	_flash_2
                                   7558 ;	888n.c:1071: flash_3();
      0027E9 12r10rE6         [24] 7559 	lcall	_flash_3
                                   7560 ;	888n.c:1072: flash_4();
      0027EC 12r11rE0         [24] 7561 	lcall	_flash_4
                                   7562 ;	888n.c:1073: flash_4();
      0027EF 12r11rE0         [24] 7563 	lcall	_flash_4
                                   7564 ;	888n.c:1074: flash_5();
      0027F2 12r13r99         [24] 7565 	lcall	_flash_5
                                   7566 ;	888n.c:1075: flash_5();
      0027F5 12r13r99         [24] 7567 	lcall	_flash_5
                                   7568 ;	888n.c:1076: flash_6();
      0027F8 12r19r36         [24] 7569 	lcall	_flash_6
                                   7570 ;	888n.c:1077: flash_7();
      0027FB 12r1Ar78         [24] 7571 	lcall	_flash_7
                                   7572 ;	888n.c:1078: flash_8();
      0027FE 12r1Cr42         [24] 7573 	lcall	_flash_8
                                   7574 ;	888n.c:1079: flash_9();
      002801 12r1Cr66         [24] 7575 	lcall	_flash_9
                                   7576 ;	888n.c:1080: flash_10();
      002804 12r21rF5         [24] 7577 	lcall	_flash_10
                                   7578 ;	888n.c:1081: clear (0);
      002807 75 82 00         [24] 7579 	mov	dpl,#0x00
      00280A 12r00rCA         [24] 7580 	lcall	_clear
                                   7581 ;	888n.c:1082: flash_11();
      00280D 12r26rE6         [24] 7582 	lcall	_flash_11
                                   7583 ;	888n.c:1083: flash_9();
      002810 12r1Cr66         [24] 7584 	lcall	_flash_9
                                   7585 ;	888n.c:1084: flash_5();
      002813 12r13r99         [24] 7586 	lcall	_flash_5
                                   7587 ;	888n.c:1085: flash_7();
      002816 12r1Ar78         [24] 7588 	lcall	_flash_7
                                   7589 ;	888n.c:1086: flash_5();
      002819 12r13r99         [24] 7590 	lcall	_flash_5
                                   7591 ;	888n.c:1087: flash_6();
      00281C 12r19r36         [24] 7592 	lcall	_flash_6
                                   7593 ;	888n.c:1088: flash_8();
      00281F 12r1Cr42         [24] 7594 	lcall	_flash_8
                                   7595 ;	888n.c:1089: flash_9();
      002822 12r1Cr66         [24] 7596 	lcall	_flash_9
                                   7597 ;	888n.c:1090: flash_10();
      002825 12r21rF5         [24] 7598 	lcall	_flash_10
      002828 80 B6            [24] 7599 	sjmp	00102$
                                   7600 ;------------------------------------------------------------
                                   7601 ;Allocation info for local variables in function 'print'
                                   7602 ;------------------------------------------------------------
                                   7603 ;layer                     Allocated with name '_print_layer_1_174'
                                   7604 ;i                         Allocated to registers r7 
                                   7605 ;------------------------------------------------------------
                                   7606 ;	888n.c:1097: void print() __interrupt (1)
                                   7607 ;	-----------------------------------------
                                   7608 ;	 function print
                                   7609 ;	-----------------------------------------
      00282A                       7610 _print:
      00282A C0*00            [24] 7611 	push	bits
      00282C C0 E0            [24] 7612 	push	acc
      00282E C0 F0            [24] 7613 	push	b
      002830 C0 82            [24] 7614 	push	dpl
      002832 C0 83            [24] 7615 	push	dph
      002834 C0 07            [24] 7616 	push	(0+7)
      002836 C0 06            [24] 7617 	push	(0+6)
      002838 C0 05            [24] 7618 	push	(0+5)
      00283A C0 04            [24] 7619 	push	(0+4)
      00283C C0 03            [24] 7620 	push	(0+3)
      00283E C0 02            [24] 7621 	push	(0+2)
      002840 C0 01            [24] 7622 	push	(0+1)
      002842 C0 00            [24] 7623 	push	(0+0)
      002844 C0 D0            [24] 7624 	push	psw
      002846 75 D0 00         [24] 7625 	mov	psw,#0x00
                                   7626 ;	888n.c:1102: P1=0;
      002849 75 90 00         [24] 7627 	mov	_P1,#0x00
                                   7628 ;	888n.c:1103: for (i=0; i<8; i++) {
      00284C 7F 00            [12] 7629 	mov	r7,#0x00
      00284E                       7630 00105$:
                                   7631 ;	888n.c:1104: P2=1<<i;
      00284E 8F F0            [24] 7632 	mov	b,r7
      002850 05 F0            [12] 7633 	inc	b
      002852 74 01            [12] 7634 	mov	a,#0x01
      002854 80 02            [24] 7635 	sjmp	00121$
      002856                       7636 00119$:
      002856 25 E0            [12] 7637 	add	a,acc
      002858                       7638 00121$:
      002858 D5 F0 FB         [24] 7639 	djnz	b,00119$
      00285B F5 A0            [12] 7640 	mov	_P2,a
                                   7641 ;	888n.c:1105: delay(3);
      00285D 90 00 03         [24] 7642 	mov	dptr,#0x0003
      002860 C0 07            [24] 7643 	push	ar7
      002862 12r00r20         [24] 7644 	lcall	_delay
      002865 D0 07            [24] 7645 	pop	ar7
                                   7646 ;	888n.c:1106: P0=display[layer][i];
      002867 E5*57            [12] 7647 	mov	a,_print_layer_1_174
      002869 75 F0 08         [24] 7648 	mov	b,#0x08
      00286C A4               [48] 7649 	mul	ab
      00286D 24r00            [12] 7650 	add	a,#_display
      00286F FD               [12] 7651 	mov	r5,a
      002870 74s00            [12] 7652 	mov	a,#(_display >> 8)
      002872 35 F0            [12] 7653 	addc	a,b
      002874 FE               [12] 7654 	mov	r6,a
      002875 EF               [12] 7655 	mov	a,r7
      002876 2D               [12] 7656 	add	a,r5
      002877 F5 82            [12] 7657 	mov	dpl,a
      002879 E4               [12] 7658 	clr	a
      00287A 3E               [12] 7659 	addc	a,r6
      00287B F5 83            [12] 7660 	mov	dph,a
      00287D E0               [24] 7661 	movx	a,@dptr
      00287E F5 80            [12] 7662 	mov	_P0,a
                                   7663 ;	888n.c:1107: delay(3);
      002880 90 00 03         [24] 7664 	mov	dptr,#0x0003
      002883 C0 07            [24] 7665 	push	ar7
      002885 12r00r20         [24] 7666 	lcall	_delay
      002888 D0 07            [24] 7667 	pop	ar7
                                   7668 ;	888n.c:1103: for (i=0; i<8; i++) {
      00288A 0F               [12] 7669 	inc	r7
      00288B BF 08 00         [24] 7670 	cjne	r7,#0x08,00122$
      00288E                       7671 00122$:
      00288E 40 BE            [24] 7672 	jc	00105$
                                   7673 ;	888n.c:1110: P1=1<<layer;
      002890 85*57 F0         [24] 7674 	mov	b,_print_layer_1_174
      002893 05 F0            [12] 7675 	inc	b
      002895 74 01            [12] 7676 	mov	a,#0x01
      002897 80 02            [24] 7677 	sjmp	00126$
      002899                       7678 00124$:
      002899 25 E0            [12] 7679 	add	a,acc
      00289B                       7680 00126$:
      00289B D5 F0 FB         [24] 7681 	djnz	b,00124$
      00289E F5 90            [12] 7682 	mov	_P1,a
                                   7683 ;	888n.c:1111: if (layer<7) 
      0028A0 74 F9            [12] 7684 	mov	a,#0x100 - 0x07
      0028A2 25*57            [12] 7685 	add	a,_print_layer_1_174
      0028A4 40 04            [24] 7686 	jc	00103$
                                   7687 ;	888n.c:1112: layer++;
      0028A6 05*57            [12] 7688 	inc	_print_layer_1_174
      0028A8 80 03            [24] 7689 	sjmp	00104$
      0028AA                       7690 00103$:
                                   7691 ;	888n.c:1114: layer=0;
      0028AA 75*57 00         [24] 7692 	mov	_print_layer_1_174,#0x00
      0028AD                       7693 00104$:
                                   7694 ;	888n.c:1116: TH0=0xc0;
      0028AD 75 8C C0         [24] 7695 	mov	_TH0,#0xc0
                                   7696 ;	888n.c:1117: TL0=0;
      0028B0 75 8A 00         [24] 7697 	mov	_TL0,#0x00
      0028B3 D0 D0            [24] 7698 	pop	psw
      0028B5 D0 00            [24] 7699 	pop	(0+0)
      0028B7 D0 01            [24] 7700 	pop	(0+1)
      0028B9 D0 02            [24] 7701 	pop	(0+2)
      0028BB D0 03            [24] 7702 	pop	(0+3)
      0028BD D0 04            [24] 7703 	pop	(0+4)
      0028BF D0 05            [24] 7704 	pop	(0+5)
      0028C1 D0 06            [24] 7705 	pop	(0+6)
      0028C3 D0 07            [24] 7706 	pop	(0+7)
      0028C5 D0 83            [24] 7707 	pop	dph
      0028C7 D0 82            [24] 7708 	pop	dpl
      0028C9 D0 F0            [24] 7709 	pop	b
      0028CB D0 E0            [24] 7710 	pop	acc
      0028CD D0*00            [24] 7711 	pop	bits
      0028CF 32               [24] 7712 	reti
                                   7713 	.area CSEG    (CODE)
                                   7714 	.area CONST   (CODE)
      000000                       7715 _table_cha:
      000000 51                    7716 	.db #0x51	; 81	'Q'
      000001 51                    7717 	.db #0x51	; 81	'Q'
      000002 51                    7718 	.db #0x51	; 81	'Q'
      000003 4A                    7719 	.db #0x4a	; 74	'J'
      000004 4A                    7720 	.db #0x4a	; 74	'J'
      000005 4A                    7721 	.db #0x4a	; 74	'J'
      000006 44                    7722 	.db #0x44	; 68	'D'
      000007 44                    7723 	.db #0x44	; 68	'D'
      000008 18                    7724 	.db #0x18	; 24
      000009 1C                    7725 	.db #0x1c	; 28
      00000A 18                    7726 	.db #0x18	; 24
      00000B 18                    7727 	.db #0x18	; 24
      00000C 18                    7728 	.db #0x18	; 24
      00000D 18                    7729 	.db #0x18	; 24
      00000E 18                    7730 	.db #0x18	; 24
      00000F 3C                    7731 	.db #0x3c	; 60
      000010 3C                    7732 	.db #0x3c	; 60
      000011 66                    7733 	.db #0x66	; 102	'f'
      000012 66                    7734 	.db #0x66	; 102	'f'
      000013 30                    7735 	.db #0x30	; 48	'0'
      000014 18                    7736 	.db #0x18	; 24
      000015 0C                    7737 	.db #0x0c	; 12
      000016 06                    7738 	.db #0x06	; 6
      000017 F6                    7739 	.db #0xf6	; 246
      000018 3C                    7740 	.db #0x3c	; 60
      000019 66                    7741 	.db #0x66	; 102	'f'
      00001A 60                    7742 	.db #0x60	; 96
      00001B 38                    7743 	.db #0x38	; 56	'8'
      00001C 60                    7744 	.db #0x60	; 96
      00001D 60                    7745 	.db #0x60	; 96
      00001E 66                    7746 	.db #0x66	; 102	'f'
      00001F 3C                    7747 	.db #0x3c	; 60
      000020 30                    7748 	.db #0x30	; 48	'0'
      000021 38                    7749 	.db #0x38	; 56	'8'
      000022 3C                    7750 	.db #0x3c	; 60
      000023 3E                    7751 	.db #0x3e	; 62
      000024 36                    7752 	.db #0x36	; 54	'6'
      000025 7E                    7753 	.db #0x7e	; 126
      000026 30                    7754 	.db #0x30	; 48	'0'
      000027 30                    7755 	.db #0x30	; 48	'0'
      000028 3C                    7756 	.db #0x3c	; 60
      000029 3C                    7757 	.db #0x3c	; 60
      00002A 18                    7758 	.db #0x18	; 24
      00002B 18                    7759 	.db #0x18	; 24
      00002C 18                    7760 	.db #0x18	; 24
      00002D 18                    7761 	.db #0x18	; 24
      00002E 3C                    7762 	.db #0x3c	; 60
      00002F 3C                    7763 	.db #0x3c	; 60
      000030 66                    7764 	.db #0x66	; 102	'f'
      000031 FF                    7765 	.db #0xff	; 255
      000032 FF                    7766 	.db #0xff	; 255
      000033 FF                    7767 	.db #0xff	; 255
      000034 7E                    7768 	.db #0x7e	; 126
      000035 3C                    7769 	.db #0x3c	; 60
      000036 18                    7770 	.db #0x18	; 24
      000037 18                    7771 	.db #0x18	; 24
      000038 66                    7772 	.db #0x66	; 102	'f'
      000039 66                    7773 	.db #0x66	; 102	'f'
      00003A 66                    7774 	.db #0x66	; 102	'f'
      00003B 66                    7775 	.db #0x66	; 102	'f'
      00003C 66                    7776 	.db #0x66	; 102	'f'
      00003D 66                    7777 	.db #0x66	; 102	'f'
      00003E 7E                    7778 	.db #0x7e	; 126
      00003F 3C                    7779 	.db #0x3c	; 60
      000040                       7780 _table_id:
      000040 81                    7781 	.db #0x81	; 129
      000041 FF                    7782 	.db #0xff	; 255
      000042 81                    7783 	.db #0x81	; 129
      000043 00                    7784 	.db #0x00	; 0
      000044 FF                    7785 	.db #0xff	; 255
      000045 81                    7786 	.db #0x81	; 129
      000046 81                    7787 	.db #0x81	; 129
      000047 7E                    7788 	.db #0x7e	; 126
      000048 00                    7789 	.db #0x00	; 0
      000049 FF                    7790 	.db #0xff	; 255
      00004A 89                    7791 	.db #0x89	; 137
      00004B 89                    7792 	.db #0x89	; 137
      00004C 00                    7793 	.db #0x00	; 0
      00004D F8                    7794 	.db #0xf8	; 248
      00004E 27                    7795 	.db #0x27	; 39
      00004F 27                    7796 	.db #0x27	; 39
      000050 F8                    7797 	.db #0xf8	; 248
      000051 00                    7798 	.db #0x00	; 0
      000052 8F                    7799 	.db #0x8f	; 143
      000053 89                    7800 	.db #0x89	; 137
      000054 89                    7801 	.db #0x89	; 137
      000055 F9                    7802 	.db #0xf9	; 249
      000056 00                    7803 	.db #0x00	; 0
      000057 FF                    7804 	.db #0xff	; 255
      000058 81                    7805 	.db #0x81	; 129
      000059 81                    7806 	.db #0x81	; 129
      00005A FF                    7807 	.db #0xff	; 255
      00005B 00                    7808 	.db #0x00	; 0
      00005C FF                    7809 	.db #0xff	; 255
      00005D 09                    7810 	.db #0x09	; 9
      00005E 09                    7811 	.db #0x09	; 9
      00005F 09                    7812 	.db #0x09	; 9
      000060 01                    7813 	.db #0x01	; 1
      000061 00                    7814 	.db #0x00	; 0
      000062 01                    7815 	.db #0x01	; 1
      000063 01                    7816 	.db #0x01	; 1
      000064 FF                    7817 	.db #0xff	; 255
      000065 01                    7818 	.db #0x01	; 1
      000066 01                    7819 	.db #0x01	; 1
      000067 00                    7820 	.db #0x00	; 0
      000068                       7821 _dat:
      000068 00                    7822 	.db #0x00	; 0
      000069 20                    7823 	.db #0x20	; 32
      00006A 40                    7824 	.db #0x40	; 64
      00006B 60                    7825 	.db #0x60	; 96
      00006C 80                    7826 	.db #0x80	; 128
      00006D A0                    7827 	.db #0xa0	; 160
      00006E C0                    7828 	.db #0xc0	; 192
      00006F E0                    7829 	.db #0xe0	; 224
      000070 E4                    7830 	.db #0xe4	; 228
      000071 E8                    7831 	.db #0xe8	; 232
      000072 EC                    7832 	.db #0xec	; 236
      000073 F0                    7833 	.db #0xf0	; 240
      000074 F4                    7834 	.db #0xf4	; 244
      000075 F8                    7835 	.db #0xf8	; 248
      000076 FC                    7836 	.db #0xfc	; 252
      000077 DC                    7837 	.db #0xdc	; 220
      000078 BC                    7838 	.db #0xbc	; 188
      000079 9C                    7839 	.db #0x9c	; 156
      00007A 7C                    7840 	.db #0x7c	; 124
      00007B 5C                    7841 	.db #0x5c	; 92
      00007C 3C                    7842 	.db #0x3c	; 60
      00007D 1C                    7843 	.db #0x1c	; 28
      00007E 18                    7844 	.db #0x18	; 24
      00007F 14                    7845 	.db #0x14	; 20
      000080 10                    7846 	.db #0x10	; 16
      000081 0C                    7847 	.db #0x0c	; 12
      000082 08                    7848 	.db #0x08	; 8
      000083 04                    7849 	.db #0x04	; 4
      000084 25                    7850 	.db #0x25	; 37
      000085 45                    7851 	.db #0x45	; 69	'E'
      000086 65                    7852 	.db #0x65	; 101	'e'
      000087 85                    7853 	.db #0x85	; 133
      000088 A5                    7854 	.db #0xa5	; 165
      000089 C5                    7855 	.db #0xc5	; 197
      00008A C9                    7856 	.db #0xc9	; 201
      00008B CD                    7857 	.db #0xcd	; 205
      00008C D1                    7858 	.db #0xd1	; 209
      00008D D5                    7859 	.db #0xd5	; 213
      00008E D9                    7860 	.db #0xd9	; 217
      00008F B9                    7861 	.db #0xb9	; 185
      000090 99                    7862 	.db #0x99	; 153
      000091 79                    7863 	.db #0x79	; 121	'y'
      000092 59                    7864 	.db #0x59	; 89	'Y'
      000093 39                    7865 	.db #0x39	; 57	'9'
      000094 35                    7866 	.db #0x35	; 53	'5'
      000095 31                    7867 	.db #0x31	; 49	'1'
      000096 2D                    7868 	.db #0x2d	; 45
      000097 29                    7869 	.db #0x29	; 41
      000098 4A                    7870 	.db #0x4a	; 74	'J'
      000099 6A                    7871 	.db #0x6a	; 106	'j'
      00009A 8A                    7872 	.db #0x8a	; 138
      00009B AA                    7873 	.db #0xaa	; 170
      00009C AE                    7874 	.db #0xae	; 174
      00009D B2                    7875 	.db #0xb2	; 178
      00009E B6                    7876 	.db #0xb6	; 182
      00009F 96                    7877 	.db #0x96	; 150
      0000A0 76                    7878 	.db #0x76	; 118	'v'
      0000A1 56                    7879 	.db #0x56	; 86	'V'
      0000A2 52                    7880 	.db #0x52	; 82	'R'
      0000A3 4E                    7881 	.db #0x4e	; 78	'N'
      0000A4 6F                    7882 	.db #0x6f	; 111	'o'
      0000A5 8F                    7883 	.db #0x8f	; 143
      0000A6 93                    7884 	.db #0x93	; 147
      0000A7 73                    7885 	.db #0x73	; 115	's'
      0000A8 6F                    7886 	.db #0x6f	; 111	'o'
      0000A9 8F                    7887 	.db #0x8f	; 143
      0000AA 93                    7888 	.db #0x93	; 147
      0000AB 73                    7889 	.db #0x73	; 115	's'
      0000AC 4A                    7890 	.db #0x4a	; 74	'J'
      0000AD 6A                    7891 	.db #0x6a	; 106	'j'
      0000AE 8A                    7892 	.db #0x8a	; 138
      0000AF AA                    7893 	.db #0xaa	; 170
      0000B0 AE                    7894 	.db #0xae	; 174
      0000B1 B2                    7895 	.db #0xb2	; 178
      0000B2 B6                    7896 	.db #0xb6	; 182
      0000B3 96                    7897 	.db #0x96	; 150
      0000B4 76                    7898 	.db #0x76	; 118	'v'
      0000B5 56                    7899 	.db #0x56	; 86	'V'
      0000B6 52                    7900 	.db #0x52	; 82	'R'
      0000B7 4E                    7901 	.db #0x4e	; 78	'N'
      0000B8 25                    7902 	.db #0x25	; 37
      0000B9 45                    7903 	.db #0x45	; 69	'E'
      0000BA 65                    7904 	.db #0x65	; 101	'e'
      0000BB 85                    7905 	.db #0x85	; 133
      0000BC A5                    7906 	.db #0xa5	; 165
      0000BD C5                    7907 	.db #0xc5	; 197
      0000BE C9                    7908 	.db #0xc9	; 201
      0000BF CD                    7909 	.db #0xcd	; 205
      0000C0 D1                    7910 	.db #0xd1	; 209
      0000C1 D5                    7911 	.db #0xd5	; 213
      0000C2 D9                    7912 	.db #0xd9	; 217
      0000C3 B9                    7913 	.db #0xb9	; 185
      0000C4 99                    7914 	.db #0x99	; 153
      0000C5 79                    7915 	.db #0x79	; 121	'y'
      0000C6 59                    7916 	.db #0x59	; 89	'Y'
      0000C7 39                    7917 	.db #0x39	; 57	'9'
      0000C8 35                    7918 	.db #0x35	; 53	'5'
      0000C9 31                    7919 	.db #0x31	; 49	'1'
      0000CA 2D                    7920 	.db #0x2d	; 45
      0000CB 29                    7921 	.db #0x29	; 41
      0000CC 00                    7922 	.db #0x00	; 0
      0000CD 20                    7923 	.db #0x20	; 32
      0000CE 40                    7924 	.db #0x40	; 64
      0000CF 60                    7925 	.db #0x60	; 96
      0000D0 80                    7926 	.db #0x80	; 128
      0000D1 A0                    7927 	.db #0xa0	; 160
      0000D2 C0                    7928 	.db #0xc0	; 192
      0000D3 E0                    7929 	.db #0xe0	; 224
      0000D4 E4                    7930 	.db #0xe4	; 228
      0000D5 E8                    7931 	.db #0xe8	; 232
      0000D6 EC                    7932 	.db #0xec	; 236
      0000D7 F0                    7933 	.db #0xf0	; 240
      0000D8 F4                    7934 	.db #0xf4	; 244
      0000D9 F8                    7935 	.db #0xf8	; 248
      0000DA FC                    7936 	.db #0xfc	; 252
      0000DB DC                    7937 	.db #0xdc	; 220
      0000DC BC                    7938 	.db #0xbc	; 188
      0000DD 9C                    7939 	.db #0x9c	; 156
      0000DE 7C                    7940 	.db #0x7c	; 124
      0000DF 5C                    7941 	.db #0x5c	; 92
      0000E0 3C                    7942 	.db #0x3c	; 60
      0000E1 1C                    7943 	.db #0x1c	; 28
      0000E2 18                    7944 	.db #0x18	; 24
      0000E3 14                    7945 	.db #0x14	; 20
      0000E4 10                    7946 	.db #0x10	; 16
      0000E5 0C                    7947 	.db #0x0c	; 12
      0000E6 08                    7948 	.db #0x08	; 8
      0000E7 04                    7949 	.db #0x04	; 4
      0000E8                       7950 _dat2:
      0000E8 00                    7951 	.db #0x00	; 0
      0000E9 20                    7952 	.db #0x20	; 32
      0000EA 40                    7953 	.db #0x40	; 64
      0000EB 60                    7954 	.db #0x60	; 96
      0000EC 80                    7955 	.db #0x80	; 128
      0000ED A0                    7956 	.db #0xa0	; 160
      0000EE C0                    7957 	.db #0xc0	; 192
      0000EF E0                    7958 	.db #0xe0	; 224
      0000F0 E4                    7959 	.db #0xe4	; 228
      0000F1 E8                    7960 	.db #0xe8	; 232
      0000F2 EC                    7961 	.db #0xec	; 236
      0000F3 F0                    7962 	.db #0xf0	; 240
      0000F4 F4                    7963 	.db #0xf4	; 244
      0000F5 F8                    7964 	.db #0xf8	; 248
      0000F6 FC                    7965 	.db #0xfc	; 252
      0000F7 DC                    7966 	.db #0xdc	; 220
      0000F8 BC                    7967 	.db #0xbc	; 188
      0000F9 9C                    7968 	.db #0x9c	; 156
      0000FA 7C                    7969 	.db #0x7c	; 124
      0000FB 5C                    7970 	.db #0x5c	; 92
      0000FC 3C                    7971 	.db #0x3c	; 60
      0000FD 1C                    7972 	.db #0x1c	; 28
      0000FE 18                    7973 	.db #0x18	; 24
      0000FF 14                    7974 	.db #0x14	; 20
      000100 10                    7975 	.db #0x10	; 16
      000101 0C                    7976 	.db #0x0c	; 12
      000102 08                    7977 	.db #0x08	; 8
      000103 04                    7978 	.db #0x04	; 4
      000104                       7979 _dat3:
      000104 00                    7980 	.db #0x00	; 0
      000105 01                    7981 	.db #0x01	; 1
      000106 02                    7982 	.db #0x02	; 2
      000107 03                    7983 	.db #0x03	; 3
      000108 04                    7984 	.db #0x04	; 4
      000109 05                    7985 	.db #0x05	; 5
      00010A 06                    7986 	.db #0x06	; 6
      00010B 16                    7987 	.db #0x16	; 22
      00010C 26                    7988 	.db #0x26	; 38
      00010D 36                    7989 	.db #0x36	; 54	'6'
      00010E 46                    7990 	.db #0x46	; 70	'F'
      00010F 56                    7991 	.db #0x56	; 86	'V'
      000110 66                    7992 	.db #0x66	; 102	'f'
      000111 65                    7993 	.db #0x65	; 101	'e'
      000112 64                    7994 	.db #0x64	; 100	'd'
      000113 63                    7995 	.db #0x63	; 99	'c'
      000114 62                    7996 	.db #0x62	; 98	'b'
      000115 61                    7997 	.db #0x61	; 97	'a'
      000116 60                    7998 	.db #0x60	; 96
      000117 50                    7999 	.db #0x50	; 80	'P'
      000118 40                    8000 	.db #0x40	; 64
      000119 30                    8001 	.db #0x30	; 48	'0'
      00011A 20                    8002 	.db #0x20	; 32
      00011B 10                    8003 	.db #0x10	; 16
      00011C                       8004 _table_3p:
      00011C FF                    8005 	.db #0xff	; 255
      00011D 89                    8006 	.db #0x89	; 137
      00011E F5                    8007 	.db #0xf5	; 245
      00011F 93                    8008 	.db #0x93	; 147
      000120 93                    8009 	.db #0x93	; 147
      000121 F5                    8010 	.db #0xf5	; 245
      000122 89                    8011 	.db #0x89	; 137
      000123 FF                    8012 	.db #0xff	; 255
      000124 0E                    8013 	.db #0x0e	; 14
      000125 1F                    8014 	.db #0x1f	; 31
      000126 3F                    8015 	.db #0x3f	; 63
      000127 7E                    8016 	.db #0x7e	; 126
      000128 7E                    8017 	.db #0x7e	; 126
      000129 3F                    8018 	.db #0x3f	; 63
      00012A 1F                    8019 	.db #0x1f	; 31
      00012B 0E                    8020 	.db #0x0e	; 14
      00012C 18                    8021 	.db #0x18	; 24
      00012D 3C                    8022 	.db #0x3c	; 60
      00012E 7E                    8023 	.db #0x7e	; 126
      00012F FF                    8024 	.db #0xff	; 255
      000130 18                    8025 	.db #0x18	; 24
      000131 18                    8026 	.db #0x18	; 24
      000132 18                    8027 	.db #0x18	; 24
      000133 18                    8028 	.db #0x18	; 24
      000134                       8029 _flash_11_daa_1_164:
      000134 00                    8030 	.db #0x00	; 0
      000135 01                    8031 	.db #0x01	; 1
      000136 02                    8032 	.db #0x02	; 2
      000137 23                    8033 	.db #0x23	; 35
      000138 05                    8034 	.db #0x05	; 5
      000139 06                    8035 	.db #0x06	; 6
      00013A 07                    8036 	.db #0x07	; 7
      00013B 06                    8037 	.db #0x06	; 6
      00013C 05                    8038 	.db #0x05	; 5
      00013D 23                    8039 	.db #0x23	; 35
      00013E 02                    8040 	.db #0x02	; 2
      00013F 01                    8041 	.db #0x01	; 1
      000140 00                    8042 	.db #0x00	; 0
                                   8043 	.area XINIT   (CODE)
                                   8044 	.area CABS    (ABS,CODE)
